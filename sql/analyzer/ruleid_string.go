// Code generated by "stringer -type=RuleId"; DO NOT EDIT.

package analyzer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[validateOffsetAndLimitId-0]
	_ = x[validateCreateTableId-1]
	_ = x[validateExprSemId-2]
	_ = x[resolveVariablesId-3]
	_ = x[resolveNamedWindowsId-4]
	_ = x[resolveSetVariablesId-5]
	_ = x[resolveViewsId-6]
	_ = x[liftCtesId-7]
	_ = x[resolveCtesId-8]
	_ = x[liftRecursiveCtesId-9]
	_ = x[resolveDatabasesId-10]
	_ = x[resolveTablesId-11]
	_ = x[loadStoredProceduresId-12]
	_ = x[validateDropTablesId-13]
	_ = x[setTargetSchemasId-14]
	_ = x[resolveCreateLikeId-15]
	_ = x[parseColumnDefaultsId-16]
	_ = x[resolveDropConstraintId-17]
	_ = x[validateDropConstraintId-18]
	_ = x[loadCheckConstraintsId-19]
	_ = x[resolveCreateSelectId-20]
	_ = x[resolveSubqueriesId-21]
	_ = x[resolveUnionsId-22]
	_ = x[resolveDescribeQueryId-23]
	_ = x[checkUniqueTableNamesId-24]
	_ = x[resolveTableFunctionsId-25]
	_ = x[resolveDeclarationsId-26]
	_ = x[validateCreateTriggerId-27]
	_ = x[validateCreateProcedureId-28]
	_ = x[loadInfoSchemaId-29]
	_ = x[validateReadOnlyDatabaseId-30]
	_ = x[validateReadOnlyTransactionId-31]
	_ = x[validateDatabaseSetId-32]
	_ = x[validatePriviledgesId-33]
	_ = x[stripDecorationsId-34]
	_ = x[unresolveTablesId-35]
	_ = x[validateJoinComplexityId-36]
	_ = x[resolveNaturalJoinsId-37]
	_ = x[resolveOrderbyLiteralsId-38]
	_ = x[resolveFunctionsId-39]
	_ = x[flattenTableAliasesId-40]
	_ = x[pushdownSortId-41]
	_ = x[pushdownGroupbyAliasesId-42]
	_ = x[pushdownSubqueryAliasFiltersId-43]
	_ = x[qualifyColumnsId-44]
	_ = x[resolveColumnsId-45]
	_ = x[resolveColumnDefaultsId-46]
	_ = x[validateCheckConstraintId-47]
	_ = x[resolveBarewordSetVariablesId-48]
	_ = x[expandStarsId-49]
	_ = x[resolveHavingId-50]
	_ = x[mergeUnionSchemasId-51]
	_ = x[flattenAggregationExprsId-52]
	_ = x[reorderProjectionId-53]
	_ = x[resolveSubqueryExprsId-54]
	_ = x[replaceCrossJoinsId-55]
	_ = x[moveJoinCondsToFilterId-56]
	_ = x[evalFilterId-57]
	_ = x[optimizeDistinctId-58]
	_ = x[finalizeSubqueriesId-59]
	_ = x[finalizeUnionsId-60]
	_ = x[loadTriggersId-61]
	_ = x[processTruncateId-62]
	_ = x[validateAlterColumnId-63]
	_ = x[resolveGeneratorsId-64]
	_ = x[removeUnnecessaryConvertsId-65]
	_ = x[assignCatalogId-66]
	_ = x[pruneColumnsId-67]
	_ = x[optimizeJoinsId-68]
	_ = x[pushdownFiltersId-69]
	_ = x[subqueryIndexesId-70]
	_ = x[inSubqueryIndexesId-71]
	_ = x[pushdownProjectionsId-72]
	_ = x[setJoinScopeLenId-73]
	_ = x[eraseProjectionId-74]
	_ = x[insertTopNId-75]
	_ = x[cacheSubqueryResultsId-76]
	_ = x[cacheSubqueryAliasesInJoinsId-77]
	_ = x[applyHashLookupsId-78]
	_ = x[applyHashInId-79]
	_ = x[resolveInsertRowsId-80]
	_ = x[applyTriggersId-81]
	_ = x[applyProceduresId-82]
	_ = x[assignRoutinesId-83]
	_ = x[modifyUpdateExprsForJoinId-84]
	_ = x[applyRowUpdateAccumulatorsId-85]
	_ = x[applyFKsId-86]
	_ = x[validateResolvedId-87]
	_ = x[validateOrderById-88]
	_ = x[validateGroupById-89]
	_ = x[validateSchemaSourceId-90]
	_ = x[validateIndexCreationId-91]
	_ = x[validateOperandsId-92]
	_ = x[validateCaseResultTypesId-93]
	_ = x[validateIntervalUsageId-94]
	_ = x[validateExplodeUsageId-95]
	_ = x[validateSubqueryColumnsId-96]
	_ = x[validateUnionSchemasMatchId-97]
	_ = x[validateAggregationsId-98]
	_ = x[TrackProcessId-99]
	_ = x[parallelizeId-100]
	_ = x[clearWarningsId-101]
}

const _RuleId_name = "validateOffsetAndLimitIdvalidateCreateTableIdvalidateExprSemIdresolveVariablesIdresolveNamedWindowsIdresolveSetVariablesIdresolveViewsIdliftCtesIdresolveCtesIdliftRecursiveCtesIdresolveDatabasesIdresolveTablesIdloadStoredProceduresIdvalidateDropTablesIdsetTargetSchemasIdresolveCreateLikeIdparseColumnDefaultsIdresolveDropConstraintIdvalidateDropConstraintIdloadCheckConstraintsIdresolveCreateSelectIdresolveSubqueriesIdresolveUnionsIdresolveDescribeQueryIdcheckUniqueTableNamesIdresolveTableFunctionsIdresolveDeclarationsIdvalidateCreateTriggerIdvalidateCreateProcedureIdloadInfoSchemaIdvalidateReadOnlyDatabaseIdvalidateReadOnlyTransactionIdvalidateDatabaseSetIdvalidatePriviledgesIdstripDecorationsIdunresolveTablesIdvalidateJoinComplexityIdresolveNaturalJoinsIdresolveOrderbyLiteralsIdresolveFunctionsIdflattenTableAliasesIdpushdownSortIdpushdownGroupbyAliasesIdpushdownSubqueryAliasFiltersIdqualifyColumnsIdresolveColumnsIdresolveColumnDefaultsIdvalidateCheckConstraintIdresolveBarewordSetVariablesIdexpandStarsIdresolveHavingIdmergeUnionSchemasIdflattenAggregationExprsIdreorderProjectionIdresolveSubqueryExprsIdreplaceCrossJoinsIdmoveJoinCondsToFilterIdevalFilterIdoptimizeDistinctIdfinalizeSubqueriesIdfinalizeUnionsIdloadTriggersIdprocessTruncateIdvalidateAlterColumnIdresolveGeneratorsIdremoveUnnecessaryConvertsIdassignCatalogIdpruneColumnsIdoptimizeJoinsIdpushdownFiltersIdsubqueryIndexesIdinSubqueryIndexesIdpushdownProjectionsIdsetJoinScopeLenIderaseProjectionIdinsertTopNIdcacheSubqueryResultsIdcacheSubqueryAliasesInJoinsIdapplyHashLookupsIdapplyHashInIdresolveInsertRowsIdapplyTriggersIdapplyProceduresIdassignRoutinesIdmodifyUpdateExprsForJoinIdapplyRowUpdateAccumulatorsIdapplyFKsIdvalidateResolvedIdvalidateOrderByIdvalidateGroupByIdvalidateSchemaSourceIdvalidateIndexCreationIdvalidateOperandsIdvalidateCaseResultTypesIdvalidateIntervalUsageIdvalidateExplodeUsageIdvalidateSubqueryColumnsIdvalidateUnionSchemasMatchIdvalidateAggregationsIdTrackProcessIdparallelizeIdclearWarningsId"

var _RuleId_index = [...]uint16{0, 24, 45, 62, 80, 101, 122, 136, 146, 159, 178, 196, 211, 233, 253, 271, 290, 311, 334, 358, 380, 401, 420, 435, 457, 480, 503, 524, 547, 572, 588, 614, 643, 664, 685, 703, 720, 744, 765, 789, 807, 828, 842, 866, 896, 912, 928, 951, 976, 1005, 1018, 1033, 1052, 1077, 1096, 1118, 1137, 1160, 1172, 1190, 1210, 1226, 1240, 1257, 1278, 1297, 1324, 1339, 1353, 1368, 1385, 1402, 1421, 1442, 1459, 1476, 1488, 1510, 1539, 1557, 1570, 1589, 1604, 1621, 1637, 1663, 1691, 1701, 1719, 1736, 1753, 1775, 1798, 1816, 1841, 1864, 1886, 1911, 1938, 1960, 1974, 1987, 2002}

func (i RuleId) String() string {
	if i < 0 || i >= RuleId(len(_RuleId_index)-1) {
		return "RuleId(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _RuleId_name[_RuleId_index[i]:_RuleId_index[i+1]]
}
