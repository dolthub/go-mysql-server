// Copyright 2025 Dolthub, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package plan

import (
	"github.com/dolthub/go-mysql-server/sql"
)

// Binlog represents the BINLOG statement, an internal-use statement generated by mysqlbinlog to execute binary log events (format description events and row events).
// https://dev.mysql.com/doc/refman/8.4/en/binlog.html
type Binlog struct {
	Base64Str string
}

var _ sql.Node = (*Binlog)(nil)

// NewBinlog creates a new Binlog node.
func NewBinlog(base64Str string) *Binlog {
	return &Binlog{
		Base64Str: base64Str,
	}
}

// RowIter implements the sql.Node interface.
func (b *Binlog) RowIter(ctx *sql.Context, _ sql.Row) (sql.RowIter, error) {
	// TODO: Decode base64 data and execute binary log events
	// For now, this is a no-op
	return sql.RowsToRowIter(), nil
}

func (b *Binlog) String() string {
	return "BINLOG"
}

func (b *Binlog) Resolved() bool {
	return true
}

func (b *Binlog) Schema() sql.Schema {
	return nil
}

func (b *Binlog) Children() []sql.Node {
	return nil
}

func (b *Binlog) IsReadOnly() bool {
	return false
}

// WithChildren implements the Node interface.
func (b *Binlog) WithChildren(children ...sql.Node) (sql.Node, error) {
	if len(children) != 0 {
		return nil, sql.ErrInvalidChildrenNumber.New(b, len(children), 0)
	}
	return b, nil
}
