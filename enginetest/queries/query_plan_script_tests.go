// Code generated by plangen.

// Copyright 2025 Dolthub, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package queries

import (
	"github.com/dolthub/go-mysql-server/sql"
)

var QueryPlanScriptTests = []ScriptTest{
	{
		Name: "test merge join optimization (removing sort node over indexed tables) does not break ordering",
		SetUpScript: []string{
			"create table t1 (i int primary key);",
			"create table t2 (j int primary key);",
			"insert into t1 values (1), (2), (3);",
			"insert into t2 values (2), (3), (4);",
			"create table t3 (i int, j int, primary key (i, j));",
			"create table t4 (x int, y int, primary key (x, y));",
			"insert into t3 values (1, 1), (1, 2), (2, 2), (3, 3);",
			"insert into t4 values (2, 2), (3, 3), (4, 4);",
		},
		Assertions: []ScriptTestAssertion{
			{
				Query: "select /*+ MERGE_JOIN(t1, t2) */ * from t1 join t2 on t1.i = t2.j order by t1.i;",
				Expected: []sql.Row{
					sql.Row{2, 2},
					sql.Row{3, 3},
				},
				ExpectedPlan: "MergeJoin\n" +
					" ├─ cmp: Eq\n" +
					" │   ├─ t1.i:0!null\n" +
					" │   └─ t2.j:1!null\n" +
					" ├─ IndexedTableAccess(t1)\n" +
					" │   ├─ index: [t1.i]\n" +
					" │   ├─ static: [{[NULL, ∞)}]\n" +
					" │   ├─ colSet: (1)\n" +
					" │   ├─ tableId: 1\n" +
					" │   └─ Table\n" +
					" │       ├─ name: t1\n" +
					" │       └─ columns: [i]\n" +
					" └─ IndexedTableAccess(t2)\n" +
					"     ├─ index: [t2.j]\n" +
					"     ├─ static: [{[NULL, ∞)}]\n" +
					"     ├─ colSet: (2)\n" +
					"     ├─ tableId: 2\n" +
					"     └─ Table\n" +
					"         ├─ name: t2\n" +
					"         └─ columns: [j]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t1, t2) */ * from t1 join t2 on t1.i = t2.j order by t2.j;",
				Expected: []sql.Row{
					sql.Row{2, 2},
					sql.Row{3, 3},
				},
				ExpectedPlan: "MergeJoin\n" +
					" ├─ cmp: Eq\n" +
					" │   ├─ t1.i:0!null\n" +
					" │   └─ t2.j:1!null\n" +
					" ├─ IndexedTableAccess(t1)\n" +
					" │   ├─ index: [t1.i]\n" +
					" │   ├─ static: [{[NULL, ∞)}]\n" +
					" │   ├─ colSet: (1)\n" +
					" │   ├─ tableId: 1\n" +
					" │   └─ Table\n" +
					" │       ├─ name: t1\n" +
					" │       └─ columns: [i]\n" +
					" └─ IndexedTableAccess(t2)\n" +
					"     ├─ index: [t2.j]\n" +
					"     ├─ static: [{[NULL, ∞)}]\n" +
					"     ├─ colSet: (2)\n" +
					"     ├─ tableId: 2\n" +
					"     └─ Table\n" +
					"         ├─ name: t2\n" +
					"         └─ columns: [j]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t1, t2) */ * from t1 join t2 on t1.i = t2.j order by t1.i desc;",
				Expected: []sql.Row{
					sql.Row{3, 3},
					sql.Row{2, 2},
				},
				ExpectedPlan: "MergeJoin\n" +
					" ├─ cmp: Eq\n" +
					" │   ├─ t1.i:0!null\n" +
					" │   └─ t2.j:1!null\n" +
					" ├─ IndexedTableAccess(t1)\n" +
					" │   ├─ index: [t1.i]\n" +
					" │   ├─ static: [{[NULL, ∞)}]\n" +
					" │   ├─ reverse: true\n" +
					" │   ├─ colSet: (1)\n" +
					" │   ├─ tableId: 1\n" +
					" │   └─ Table\n" +
					" │       ├─ name: t1\n" +
					" │       └─ columns: [i]\n" +
					" └─ IndexedTableAccess(t2)\n" +
					"     ├─ index: [t2.j]\n" +
					"     ├─ static: [{[NULL, ∞)}]\n" +
					"     ├─ reverse: true\n" +
					"     ├─ colSet: (2)\n" +
					"     ├─ tableId: 2\n" +
					"     └─ Table\n" +
					"         ├─ name: t2\n" +
					"         └─ columns: [j]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t1, t2) */ * from t1 join t2 on t1.i = t2.j order by t2.j desc;",
				Expected: []sql.Row{
					sql.Row{3, 3},
					sql.Row{2, 2},
				},
				ExpectedPlan: "MergeJoin\n" +
					" ├─ cmp: Eq\n" +
					" │   ├─ t1.i:0!null\n" +
					" │   └─ t2.j:1!null\n" +
					" ├─ IndexedTableAccess(t1)\n" +
					" │   ├─ index: [t1.i]\n" +
					" │   ├─ static: [{[NULL, ∞)}]\n" +
					" │   ├─ reverse: true\n" +
					" │   ├─ colSet: (1)\n" +
					" │   ├─ tableId: 1\n" +
					" │   └─ Table\n" +
					" │       ├─ name: t1\n" +
					" │       └─ columns: [i]\n" +
					" └─ IndexedTableAccess(t2)\n" +
					"     ├─ index: [t2.j]\n" +
					"     ├─ static: [{[NULL, ∞)}]\n" +
					"     ├─ reverse: true\n" +
					"     ├─ colSet: (2)\n" +
					"     ├─ tableId: 2\n" +
					"     └─ Table\n" +
					"         ├─ name: t2\n" +
					"         └─ columns: [j]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t1, t2) */ * from t1 where ((i in (select j from t2 where j > 2))) order by i desc;",
				Expected: []sql.Row{
					sql.Row{3},
				},
				ExpectedPlan: "Project\n" +
					" ├─ columns: [t1.i:0!null]\n" +
					" └─ MergeJoin\n" +
					"     ├─ cmp: Eq\n" +
					"     │   ├─ t1.i:0!null\n" +
					"     │   └─ t2.j:1!null\n" +
					"     ├─ IndexedTableAccess(t1)\n" +
					"     │   ├─ index: [t1.i]\n" +
					"     │   ├─ static: [{[NULL, ∞)}]\n" +
					"     │   ├─ reverse: true\n" +
					"     │   ├─ colSet: (1)\n" +
					"     │   ├─ tableId: 1\n" +
					"     │   └─ Table\n" +
					"     │       ├─ name: t1\n" +
					"     │       └─ columns: [i]\n" +
					"     └─ Filter\n" +
					"         ├─ GreaterThan\n" +
					"         │   ├─ t2.j:0!null\n" +
					"         │   └─ 2 (int)\n" +
					"         └─ IndexedTableAccess(t2)\n" +
					"             ├─ index: [t2.j]\n" +
					"             ├─ static: [{[NULL, ∞)}]\n" +
					"             ├─ reverse: true\n" +
					"             ├─ colSet: (2)\n" +
					"             ├─ tableId: 2\n" +
					"             └─ Table\n" +
					"                 ├─ name: t2\n" +
					"                 └─ columns: [j]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t3, t4) */ * from t3 join t4 on t3.i = t4.x order by t3.i;",
				Expected: []sql.Row{
					sql.Row{2, 2, 2, 2},
					sql.Row{3, 3, 3, 3},
				},
				ExpectedPlan: "MergeJoin\n" +
					" ├─ cmp: Eq\n" +
					" │   ├─ t3.i:0!null\n" +
					" │   └─ t4.x:2!null\n" +
					" ├─ IndexedTableAccess(t3)\n" +
					" │   ├─ index: [t3.i,t3.j]\n" +
					" │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					" │   ├─ colSet: (1,2)\n" +
					" │   ├─ tableId: 1\n" +
					" │   └─ Table\n" +
					" │       ├─ name: t3\n" +
					" │       └─ columns: [i j]\n" +
					" └─ IndexedTableAccess(t4)\n" +
					"     ├─ index: [t4.x,t4.y]\n" +
					"     ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"     ├─ colSet: (3,4)\n" +
					"     ├─ tableId: 2\n" +
					"     └─ Table\n" +
					"         ├─ name: t4\n" +
					"         └─ columns: [x y]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t3, t4) */ * from t3 join t4 on t3.i = t4.x order by t3.i desc;",
				Expected: []sql.Row{
					sql.Row{3, 3, 3, 3},
					sql.Row{2, 2, 2, 2},
				},
				ExpectedPlan: "MergeJoin\n" +
					" ├─ cmp: Eq\n" +
					" │   ├─ t3.i:0!null\n" +
					" │   └─ t4.x:2!null\n" +
					" ├─ IndexedTableAccess(t3)\n" +
					" │   ├─ index: [t3.i,t3.j]\n" +
					" │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					" │   ├─ reverse: true\n" +
					" │   ├─ colSet: (1,2)\n" +
					" │   ├─ tableId: 1\n" +
					" │   └─ Table\n" +
					" │       ├─ name: t3\n" +
					" │       └─ columns: [i j]\n" +
					" └─ IndexedTableAccess(t4)\n" +
					"     ├─ index: [t4.x,t4.y]\n" +
					"     ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"     ├─ reverse: true\n" +
					"     ├─ colSet: (3,4)\n" +
					"     ├─ tableId: 2\n" +
					"     └─ Table\n" +
					"         ├─ name: t4\n" +
					"         └─ columns: [x y]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t3, t4) */ * from t3 join t4 on t3.i = t4.x order by t4.x;",
				Expected: []sql.Row{
					sql.Row{2, 2, 2, 2},
					sql.Row{3, 3, 3, 3},
				},
				ExpectedPlan: "MergeJoin\n" +
					" ├─ cmp: Eq\n" +
					" │   ├─ t3.i:0!null\n" +
					" │   └─ t4.x:2!null\n" +
					" ├─ IndexedTableAccess(t3)\n" +
					" │   ├─ index: [t3.i,t3.j]\n" +
					" │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					" │   ├─ colSet: (1,2)\n" +
					" │   ├─ tableId: 1\n" +
					" │   └─ Table\n" +
					" │       ├─ name: t3\n" +
					" │       └─ columns: [i j]\n" +
					" └─ IndexedTableAccess(t4)\n" +
					"     ├─ index: [t4.x,t4.y]\n" +
					"     ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"     ├─ colSet: (3,4)\n" +
					"     ├─ tableId: 2\n" +
					"     └─ Table\n" +
					"         ├─ name: t4\n" +
					"         └─ columns: [x y]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t3, t4) */ * from t3 join t4 on t3.i = t4.x order by t4.x desc;",
				Expected: []sql.Row{
					sql.Row{3, 3, 3, 3},
					sql.Row{2, 2, 2, 2},
				},
				ExpectedPlan: "MergeJoin\n" +
					" ├─ cmp: Eq\n" +
					" │   ├─ t3.i:0!null\n" +
					" │   └─ t4.x:2!null\n" +
					" ├─ IndexedTableAccess(t3)\n" +
					" │   ├─ index: [t3.i,t3.j]\n" +
					" │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					" │   ├─ reverse: true\n" +
					" │   ├─ colSet: (1,2)\n" +
					" │   ├─ tableId: 1\n" +
					" │   └─ Table\n" +
					" │       ├─ name: t3\n" +
					" │       └─ columns: [i j]\n" +
					" └─ IndexedTableAccess(t4)\n" +
					"     ├─ index: [t4.x,t4.y]\n" +
					"     ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"     ├─ reverse: true\n" +
					"     ├─ colSet: (3,4)\n" +
					"     ├─ tableId: 2\n" +
					"     └─ Table\n" +
					"         ├─ name: t4\n" +
					"         └─ columns: [x y]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t3, t4) */ * from t3 join t4 on t3.i = t4.x order by t3.i, t3.j;",
				Expected: []sql.Row{
					sql.Row{2, 2, 2, 2},
					sql.Row{3, 3, 3, 3},
				},
				ExpectedPlan: "MergeJoin\n" +
					" ├─ cmp: Eq\n" +
					" │   ├─ t3.i:0!null\n" +
					" │   └─ t4.x:2!null\n" +
					" ├─ IndexedTableAccess(t3)\n" +
					" │   ├─ index: [t3.i,t3.j]\n" +
					" │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					" │   ├─ colSet: (1,2)\n" +
					" │   ├─ tableId: 1\n" +
					" │   └─ Table\n" +
					" │       ├─ name: t3\n" +
					" │       └─ columns: [i j]\n" +
					" └─ IndexedTableAccess(t4)\n" +
					"     ├─ index: [t4.x,t4.y]\n" +
					"     ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"     ├─ colSet: (3,4)\n" +
					"     ├─ tableId: 2\n" +
					"     └─ Table\n" +
					"         ├─ name: t4\n" +
					"         └─ columns: [x y]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t3, t4) */ * from t3 join t4 on t3.i = t4.x order by t3.i desc, t3.j desc;",
				Expected: []sql.Row{
					sql.Row{3, 3, 3, 3},
					sql.Row{2, 2, 2, 2},
				},
				ExpectedPlan: "MergeJoin\n" +
					" ├─ cmp: Eq\n" +
					" │   ├─ t3.i:0!null\n" +
					" │   └─ t4.x:2!null\n" +
					" ├─ IndexedTableAccess(t3)\n" +
					" │   ├─ index: [t3.i,t3.j]\n" +
					" │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					" │   ├─ reverse: true\n" +
					" │   ├─ colSet: (1,2)\n" +
					" │   ├─ tableId: 1\n" +
					" │   └─ Table\n" +
					" │       ├─ name: t3\n" +
					" │       └─ columns: [i j]\n" +
					" └─ IndexedTableAccess(t4)\n" +
					"     ├─ index: [t4.x,t4.y]\n" +
					"     ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"     ├─ reverse: true\n" +
					"     ├─ colSet: (3,4)\n" +
					"     ├─ tableId: 2\n" +
					"     └─ Table\n" +
					"         ├─ name: t4\n" +
					"         └─ columns: [x y]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t3, t4) */ * from t3 join t4 on t3.i = t4.x order by t4.x, t4.y;",
				Expected: []sql.Row{
					sql.Row{2, 2, 2, 2},
					sql.Row{3, 3, 3, 3},
				},
				ExpectedPlan: "MergeJoin\n" +
					" ├─ cmp: Eq\n" +
					" │   ├─ t3.i:0!null\n" +
					" │   └─ t4.x:2!null\n" +
					" ├─ IndexedTableAccess(t3)\n" +
					" │   ├─ index: [t3.i,t3.j]\n" +
					" │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					" │   ├─ colSet: (1,2)\n" +
					" │   ├─ tableId: 1\n" +
					" │   └─ Table\n" +
					" │       ├─ name: t3\n" +
					" │       └─ columns: [i j]\n" +
					" └─ IndexedTableAccess(t4)\n" +
					"     ├─ index: [t4.x,t4.y]\n" +
					"     ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"     ├─ colSet: (3,4)\n" +
					"     ├─ tableId: 2\n" +
					"     └─ Table\n" +
					"         ├─ name: t4\n" +
					"         └─ columns: [x y]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t3, t4) */ * from t3 join t4 on t3.i = t4.x order by t4.x desc, t4.y desc;",
				Expected: []sql.Row{
					sql.Row{3, 3, 3, 3},
					sql.Row{2, 2, 2, 2},
				},
				ExpectedPlan: "MergeJoin\n" +
					" ├─ cmp: Eq\n" +
					" │   ├─ t3.i:0!null\n" +
					" │   └─ t4.x:2!null\n" +
					" ├─ IndexedTableAccess(t3)\n" +
					" │   ├─ index: [t3.i,t3.j]\n" +
					" │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					" │   ├─ reverse: true\n" +
					" │   ├─ colSet: (1,2)\n" +
					" │   ├─ tableId: 1\n" +
					" │   └─ Table\n" +
					" │       ├─ name: t3\n" +
					" │       └─ columns: [i j]\n" +
					" └─ IndexedTableAccess(t4)\n" +
					"     ├─ index: [t4.x,t4.y]\n" +
					"     ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"     ├─ reverse: true\n" +
					"     ├─ colSet: (3,4)\n" +
					"     ├─ tableId: 2\n" +
					"     └─ Table\n" +
					"         ├─ name: t4\n" +
					"         └─ columns: [x y]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t3, t4) */ * from t3 join t4 on t3.i = t4.x order by t3.i, t4.x;",
				Expected: []sql.Row{
					sql.Row{2, 2, 2, 2},
					sql.Row{3, 3, 3, 3},
				},
				ExpectedPlan: "Sort(t3.i:0!null ASC nullsFirst, t4.x:2!null ASC nullsFirst)\n" +
					" └─ MergeJoin\n" +
					"     ├─ cmp: Eq\n" +
					"     │   ├─ t3.i:0!null\n" +
					"     │   └─ t4.x:2!null\n" +
					"     ├─ IndexedTableAccess(t3)\n" +
					"     │   ├─ index: [t3.i,t3.j]\n" +
					"     │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"     │   ├─ colSet: (1,2)\n" +
					"     │   ├─ tableId: 1\n" +
					"     │   └─ Table\n" +
					"     │       ├─ name: t3\n" +
					"     │       └─ columns: [i j]\n" +
					"     └─ IndexedTableAccess(t4)\n" +
					"         ├─ index: [t4.x,t4.y]\n" +
					"         ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"         ├─ colSet: (3,4)\n" +
					"         ├─ tableId: 2\n" +
					"         └─ Table\n" +
					"             ├─ name: t4\n" +
					"             └─ columns: [x y]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t3, t4) */ * from t3 join t4 on t3.i = t4.x order by t3.i, t4.x desc;",
				Expected: []sql.Row{
					sql.Row{2, 2, 2, 2},
					sql.Row{3, 3, 3, 3},
				},
				ExpectedPlan: "Sort(t3.i:0!null ASC nullsFirst, t4.x:2!null DESC nullsFirst)\n" +
					" └─ MergeJoin\n" +
					"     ├─ cmp: Eq\n" +
					"     │   ├─ t3.i:0!null\n" +
					"     │   └─ t4.x:2!null\n" +
					"     ├─ IndexedTableAccess(t3)\n" +
					"     │   ├─ index: [t3.i,t3.j]\n" +
					"     │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"     │   ├─ colSet: (1,2)\n" +
					"     │   ├─ tableId: 1\n" +
					"     │   └─ Table\n" +
					"     │       ├─ name: t3\n" +
					"     │       └─ columns: [i j]\n" +
					"     └─ IndexedTableAccess(t4)\n" +
					"         ├─ index: [t4.x,t4.y]\n" +
					"         ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"         ├─ colSet: (3,4)\n" +
					"         ├─ tableId: 2\n" +
					"         └─ Table\n" +
					"             ├─ name: t4\n" +
					"             └─ columns: [x y]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t3, t4) */ * from t3 join t4 on t3.i = t4.x order by t3.i, t3.j, t4.x;",
				Expected: []sql.Row{
					sql.Row{2, 2, 2, 2},
					sql.Row{3, 3, 3, 3},
				},
				ExpectedPlan: "Sort(t3.i:0!null ASC nullsFirst, t3.j:1!null ASC nullsFirst, t4.x:2!null ASC nullsFirst)\n" +
					" └─ MergeJoin\n" +
					"     ├─ cmp: Eq\n" +
					"     │   ├─ t3.i:0!null\n" +
					"     │   └─ t4.x:2!null\n" +
					"     ├─ IndexedTableAccess(t3)\n" +
					"     │   ├─ index: [t3.i,t3.j]\n" +
					"     │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"     │   ├─ colSet: (1,2)\n" +
					"     │   ├─ tableId: 1\n" +
					"     │   └─ Table\n" +
					"     │       ├─ name: t3\n" +
					"     │       └─ columns: [i j]\n" +
					"     └─ IndexedTableAccess(t4)\n" +
					"         ├─ index: [t4.x,t4.y]\n" +
					"         ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"         ├─ colSet: (3,4)\n" +
					"         ├─ tableId: 2\n" +
					"         └─ Table\n" +
					"             ├─ name: t4\n" +
					"             └─ columns: [x y]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t3, t4) */ * from t3 join t4 on t3.i = t4.x order by t3.i, t3.j, t4.x, t4.y;",
				Expected: []sql.Row{
					sql.Row{2, 2, 2, 2},
					sql.Row{3, 3, 3, 3},
				},
				ExpectedPlan: "Sort(t3.i:0!null ASC nullsFirst, t3.j:1!null ASC nullsFirst, t4.x:2!null ASC nullsFirst, t4.y:3!null ASC nullsFirst)\n" +
					" └─ MergeJoin\n" +
					"     ├─ cmp: Eq\n" +
					"     │   ├─ t3.i:0!null\n" +
					"     │   └─ t4.x:2!null\n" +
					"     ├─ IndexedTableAccess(t3)\n" +
					"     │   ├─ index: [t3.i,t3.j]\n" +
					"     │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"     │   ├─ colSet: (1,2)\n" +
					"     │   ├─ tableId: 1\n" +
					"     │   └─ Table\n" +
					"     │       ├─ name: t3\n" +
					"     │       └─ columns: [i j]\n" +
					"     └─ IndexedTableAccess(t4)\n" +
					"         ├─ index: [t4.x,t4.y]\n" +
					"         ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"         ├─ colSet: (3,4)\n" +
					"         ├─ tableId: 2\n" +
					"         └─ Table\n" +
					"             ├─ name: t4\n" +
					"             └─ columns: [x y]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t3, t4) */ * from t3 join t4 on t3.i = t4.x order by t3.j;",
				Expected: []sql.Row{
					sql.Row{2, 2, 2, 2},
					sql.Row{3, 3, 3, 3},
				},
				ExpectedPlan: "Sort(t3.j:1!null ASC nullsFirst)\n" +
					" └─ MergeJoin\n" +
					"     ├─ cmp: Eq\n" +
					"     │   ├─ t3.i:0!null\n" +
					"     │   └─ t4.x:2!null\n" +
					"     ├─ IndexedTableAccess(t3)\n" +
					"     │   ├─ index: [t3.i,t3.j]\n" +
					"     │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"     │   ├─ colSet: (1,2)\n" +
					"     │   ├─ tableId: 1\n" +
					"     │   └─ Table\n" +
					"     │       ├─ name: t3\n" +
					"     │       └─ columns: [i j]\n" +
					"     └─ IndexedTableAccess(t4)\n" +
					"         ├─ index: [t4.x,t4.y]\n" +
					"         ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"         ├─ colSet: (3,4)\n" +
					"         ├─ tableId: 2\n" +
					"         └─ Table\n" +
					"             ├─ name: t4\n" +
					"             └─ columns: [x y]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t3, t4) */ * from t3 join t4 on t3.i = t4.x order by t4.y;",
				Expected: []sql.Row{
					sql.Row{2, 2, 2, 2},
					sql.Row{3, 3, 3, 3},
				},
				ExpectedPlan: "Sort(t4.y:3!null ASC nullsFirst)\n" +
					" └─ MergeJoin\n" +
					"     ├─ cmp: Eq\n" +
					"     │   ├─ t3.i:0!null\n" +
					"     │   └─ t4.x:2!null\n" +
					"     ├─ IndexedTableAccess(t3)\n" +
					"     │   ├─ index: [t3.i,t3.j]\n" +
					"     │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"     │   ├─ colSet: (1,2)\n" +
					"     │   ├─ tableId: 1\n" +
					"     │   └─ Table\n" +
					"     │       ├─ name: t3\n" +
					"     │       └─ columns: [i j]\n" +
					"     └─ IndexedTableAccess(t4)\n" +
					"         ├─ index: [t4.x,t4.y]\n" +
					"         ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"         ├─ colSet: (3,4)\n" +
					"         ├─ tableId: 2\n" +
					"         └─ Table\n" +
					"             ├─ name: t4\n" +
					"             └─ columns: [x y]\n" +
					"",
			},
			{
				Query: "select /*+ MERGE_JOIN(t3, t4) */ * from t3 join t4 on t3.i = t4.x order by t3.i, t3.j desc;",
				Expected: []sql.Row{
					sql.Row{2, 2, 2, 2},
					sql.Row{3, 3, 3, 3},
				},
				ExpectedPlan: "Sort(t3.i:0!null ASC nullsFirst, t3.j:1!null DESC nullsFirst)\n" +
					" └─ MergeJoin\n" +
					"     ├─ cmp: Eq\n" +
					"     │   ├─ t3.i:0!null\n" +
					"     │   └─ t4.x:2!null\n" +
					"     ├─ IndexedTableAccess(t3)\n" +
					"     │   ├─ index: [t3.i,t3.j]\n" +
					"     │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"     │   ├─ colSet: (1,2)\n" +
					"     │   ├─ tableId: 1\n" +
					"     │   └─ Table\n" +
					"     │       ├─ name: t3\n" +
					"     │       └─ columns: [i j]\n" +
					"     └─ IndexedTableAccess(t4)\n" +
					"         ├─ index: [t4.x,t4.y]\n" +
					"         ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
					"         ├─ colSet: (3,4)\n" +
					"         ├─ tableId: 2\n" +
					"         └─ Table\n" +
					"             ├─ name: t4\n" +
					"             └─ columns: [x y]\n" +
					"",
			},
		},
	},
}
