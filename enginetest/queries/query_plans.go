// Code generated by plangen.

// Copyright 2024 Dolthub, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package queries

var PlanTests = []QueryPlanTest{
	{
		Query: `select x from xy where y in (select xy.x from xy join (select t2.y from xy t2 where exists (select t3.y from xy t3 where t3.y = xy.x)) t1);`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [xy.x:0!null]\n" +
			" └─ Filter\n" +
			"     ├─ InSubquery\n" +
			"     │   ├─ left: xy.y:1\n" +
			"     │   └─ right: Subquery\n" +
			"     │       ├─ cacheable: false\n" +
			"     │       ├─ alias-string: select xy.x from xy join (select t2.y from xy as t2 where exists (select t3.y from xy as t3 where t3.y = xy.x)) as t1\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [xy.x:2!null]\n" +
			"     │           └─ CrossHashJoin\n" +
			"     │               ├─ Table\n" +
			"     │               │   ├─ name: xy\n" +
			"     │               │   ├─ columns: [x]\n" +
			"     │               │   ├─ colSet: (3,4)\n" +
			"     │               │   └─ tableId: 2\n" +
			"     │               └─ HashLookup\n" +
			"     │                   ├─ left-key: TUPLE()\n" +
			"     │                   ├─ right-key: TUPLE()\n" +
			"     │                   └─ SubqueryAlias\n" +
			"     │                       ├─ name: t1\n" +
			"     │                       ├─ outerVisibility: true\n" +
			"     │                       ├─ isLateral: false\n" +
			"     │                       ├─ cacheable: false\n" +
			"     │                       ├─ colSet: (9)\n" +
			"     │                       ├─ tableId: 5\n" +
			"     │                       └─ Project\n" +
			"     │                           ├─ columns: [t2.y:3]\n" +
			"     │                           └─ Filter\n" +
			"     │                               ├─ EXISTS Subquery\n" +
			"     │                               │   ├─ cacheable: false\n" +
			"     │                               │   ├─ alias-string: select t3.y from xy as t3 where t3.y = xy.x\n" +
			"     │                               │   └─ Project\n" +
			"     │                               │       ├─ columns: [t3.y:5]\n" +
			"     │                               │       └─ Filter\n" +
			"     │                               │           ├─ Eq\n" +
			"     │                               │           │   ├─ t3.y:5\n" +
			"     │                               │           │   └─ xy.x:0!null\n" +
			"     │                               │           └─ TableAlias(t3)\n" +
			"     │                               │               └─ IndexedTableAccess(xy)\n" +
			"     │                               │                   ├─ index: [xy.y]\n" +
			"     │                               │                   ├─ keys: [xy.x:0!null]\n" +
			"     │                               │                   ├─ colSet: (7,8)\n" +
			"     │                               │                   ├─ tableId: 4\n" +
			"     │                               │                   └─ Table\n" +
			"     │                               │                       ├─ name: xy\n" +
			"     │                               │                       └─ columns: [x y]\n" +
			"     │                               └─ TableAlias(t2)\n" +
			"     │                                   └─ Table\n" +
			"     │                                       ├─ name: xy\n" +
			"     │                                       ├─ columns: [x y]\n" +
			"     │                                       ├─ colSet: (5,6)\n" +
			"     │                                       └─ tableId: 3\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [xy.x]\n" +
			" └─ Filter\n" +
			"     ├─ InSubquery\n" +
			"     │   ├─ left: xy.y\n" +
			"     │   └─ right: Subquery\n" +
			"     │       ├─ cacheable: false\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [xy.x]\n" +
			"     │           └─ CrossHashJoin\n" +
			"     │               ├─ Table\n" +
			"     │               │   ├─ name: xy\n" +
			"     │               │   └─ columns: [x]\n" +
			"     │               └─ HashLookup\n" +
			"     │                   ├─ left-key: ()\n" +
			"     │                   ├─ right-key: ()\n" +
			"     │                   └─ SubqueryAlias\n" +
			"     │                       ├─ name: t1\n" +
			"     │                       ├─ outerVisibility: true\n" +
			"     │                       ├─ isLateral: false\n" +
			"     │                       ├─ cacheable: false\n" +
			"     │                       └─ Project\n" +
			"     │                           ├─ columns: [t2.y]\n" +
			"     │                           └─ Filter\n" +
			"     │                               ├─ EXISTS Subquery\n" +
			"     │                               │   ├─ cacheable: false\n" +
			"     │                               │   └─ Project\n" +
			"     │                               │       ├─ columns: [t3.y]\n" +
			"     │                               │       └─ Filter\n" +
			"     │                               │           ├─ (t3.y = xy.x)\n" +
			"     │                               │           └─ TableAlias(t3)\n" +
			"     │                               │               └─ IndexedTableAccess(xy)\n" +
			"     │                               │                   ├─ index: [xy.y]\n" +
			"     │                               │                   ├─ columns: [x y]\n" +
			"     │                               │                   └─ keys: xy.x\n" +
			"     │                               └─ TableAlias(t2)\n" +
			"     │                                   └─ Table\n" +
			"     │                                       └─ name: xy\n" +
			"     └─ Table\n" +
			"         └─ name: xy\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [xy.x]\n" +
			" └─ Filter\n" +
			"     ├─ InSubquery\n" +
			"     │   ├─ left: xy.y\n" +
			"     │   └─ right: Subquery\n" +
			"     │       ├─ cacheable: false\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [xy.x]\n" +
			"     │           └─ CrossHashJoin\n" +
			"     │               ├─ Table\n" +
			"     │               │   ├─ name: xy\n" +
			"     │               │   └─ columns: [x]\n" +
			"     │               └─ HashLookup\n" +
			"     │                   ├─ left-key: ()\n" +
			"     │                   ├─ right-key: ()\n" +
			"     │                   └─ SubqueryAlias\n" +
			"     │                       ├─ name: t1\n" +
			"     │                       ├─ outerVisibility: true\n" +
			"     │                       ├─ isLateral: false\n" +
			"     │                       ├─ cacheable: false\n" +
			"     │                       └─ Project\n" +
			"     │                           ├─ columns: [t2.y]\n" +
			"     │                           └─ Filter\n" +
			"     │                               ├─ EXISTS Subquery\n" +
			"     │                               │   ├─ cacheable: false\n" +
			"     │                               │   └─ Project\n" +
			"     │                               │       ├─ columns: [t3.y]\n" +
			"     │                               │       └─ Filter\n" +
			"     │                               │           ├─ (t3.y = xy.x)\n" +
			"     │                               │           └─ TableAlias(t3)\n" +
			"     │                               │               └─ IndexedTableAccess(xy)\n" +
			"     │                               │                   ├─ index: [xy.y]\n" +
			"     │                               │                   ├─ columns: [x y]\n" +
			"     │                               │                   └─ keys: xy.x\n" +
			"     │                               └─ TableAlias(t2)\n" +
			"     │                                   └─ Table\n" +
			"     │                                       └─ name: xy\n" +
			"     └─ Table\n" +
			"         └─ name: xy\n" +
			"",
	},
	{
		Query: `select count(i) from mytable`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(mytable.i):0!null as count(i)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [mytable.COUNT(mytable.i):0!null as COUNT(mytable.i)]\n" +
			"     └─ table_count(mytable) as COUNT(mytable.i)\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(mytable.i) as count(i)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [mytable.COUNT(mytable.i) as COUNT(mytable.i)]\n" +
			"     └─ table_count(mytable) as COUNT(mytable.i)\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(mytable.i) as count(i)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [mytable.COUNT(mytable.i) as COUNT(mytable.i)]\n" +
			"     └─ table_count(mytable) as COUNT(mytable.i)\n" +
			"",
	},
	{
		Query: `select count(pk1) from two_pk`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(two_pk.pk1):0!null as count(pk1)]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: COUNT(two_pk.pk1:0!null)\n" +
			"     ├─ group: \n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: two_pk\n" +
			"             └─ columns: [pk1]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(two_pk.pk1) as count(pk1)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(two_pk.pk1))\n" +
			"     ├─ Grouping()\n" +
			"     └─ Table\n" +
			"         ├─ name: two_pk\n" +
			"         └─ columns: [pk1]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(two_pk.pk1) as count(pk1)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(two_pk.pk1))\n" +
			"     ├─ Grouping()\n" +
			"     └─ Table\n" +
			"         ├─ name: two_pk\n" +
			"         └─ columns: [pk1]\n" +
			"",
	},
	{
		Query: `select x from xy where y in (select x from xy where x in (select y from xy));`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [xy.x:1!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ xy.y:2\n" +
			"     │   └─ xy_1.x:0!null\n" +
			"     ├─ Distinct\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [xy_1.x:0!null]\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [xy_1.x:0!null, xy_1.y:1]\n" +
			"     │           └─ MergeJoin\n" +
			"     │               ├─ cmp: Eq\n" +
			"     │               │   ├─ xy_1.x:0!null\n" +
			"     │               │   └─ xy_2.y:2\n" +
			"     │               ├─ TableAlias(xy_1)\n" +
			"     │               │   └─ IndexedTableAccess(xy)\n" +
			"     │               │       ├─ index: [xy.x]\n" +
			"     │               │       ├─ static: [{[NULL, ∞)}]\n" +
			"     │               │       ├─ colSet: (3,4)\n" +
			"     │               │       ├─ tableId: 2\n" +
			"     │               │       └─ Table\n" +
			"     │               │           ├─ name: xy\n" +
			"     │               │           └─ columns: [x y]\n" +
			"     │               └─ Project\n" +
			"     │                   ├─ columns: [xy_2.y:1]\n" +
			"     │                   └─ TableAlias(xy_2)\n" +
			"     │                       └─ IndexedTableAccess(xy)\n" +
			"     │                           ├─ index: [xy.y]\n" +
			"     │                           ├─ static: [{[NULL, ∞)}]\n" +
			"     │                           ├─ colSet: (5,6)\n" +
			"     │                           ├─ tableId: 3\n" +
			"     │                           └─ Table\n" +
			"     │                               ├─ name: xy\n" +
			"     │                               └─ columns: [x y]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.y]\n" +
			"         ├─ keys: [xy_1.x:0!null]\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [xy.x]\n" +
			" └─ LookupJoin (estimated cost=3300.000 rows=1000)\n" +
			"     ├─ (xy.y = xy_1.x)\n" +
			"     ├─ Distinct\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [xy_1.x]\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [xy_1.x, xy_1.y]\n" +
			"     │           └─ MergeJoin (estimated cost=2030.000 rows=1000)\n" +
			"     │               ├─ cmp: (xy_1.x = xy_2.y)\n" +
			"     │               ├─ TableAlias(xy_1)\n" +
			"     │               │   └─ IndexedTableAccess(xy)\n" +
			"     │               │       ├─ index: [xy.x]\n" +
			"     │               │       └─ filters: [{[NULL, ∞)}]\n" +
			"     │               └─ Project\n" +
			"     │                   ├─ columns: [xy_2.y]\n" +
			"     │                   └─ TableAlias(xy_2)\n" +
			"     │                       └─ IndexedTableAccess(xy)\n" +
			"     │                           ├─ index: [xy.y]\n" +
			"     │                           └─ filters: [{[NULL, ∞)}]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.y]\n" +
			"         └─ keys: xy_1.x\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [xy.x]\n" +
			" └─ LookupJoin (estimated cost=3300.000 rows=1000) (actual rows=4 loops=1)\n" +
			"     ├─ (xy.y = xy_1.x)\n" +
			"     ├─ Distinct\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [xy_1.x]\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [xy_1.x, xy_1.y]\n" +
			"     │           └─ MergeJoin (estimated cost=2030.000 rows=1000) (actual rows=4 loops=1)\n" +
			"     │               ├─ cmp: (xy_1.x = xy_2.y)\n" +
			"     │               ├─ TableAlias(xy_1)\n" +
			"     │               │   └─ IndexedTableAccess(xy)\n" +
			"     │               │       ├─ index: [xy.x]\n" +
			"     │               │       └─ filters: [{[NULL, ∞)}]\n" +
			"     │               └─ Project\n" +
			"     │                   ├─ columns: [xy_2.y]\n" +
			"     │                   └─ TableAlias(xy_2)\n" +
			"     │                       └─ IndexedTableAccess(xy)\n" +
			"     │                           ├─ index: [xy.y]\n" +
			"     │                           └─ filters: [{[NULL, ∞)}]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.y]\n" +
			"         └─ keys: xy_1.x\n" +
			"",
	},
	{
		Query: `select * from xy join uv on (x = u and u  > 0) where u < 2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [xy.x:2!null, xy.y:3, uv.u:0!null, uv.v:1]\n" +
			" └─ LookupJoin\n" +
			"     ├─ IndexedTableAccess(uv)\n" +
			"     │   ├─ index: [uv.u]\n" +
			"     │   ├─ static: [{(0, 2)}]\n" +
			"     │   ├─ colSet: (3,4)\n" +
			"     │   ├─ tableId: 2\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: uv\n" +
			"     │       └─ columns: [u v]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ keys: [uv.u:0!null]\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [xy.x, xy.y, uv.u, uv.v]\n" +
			" └─ LookupJoin (estimated cost=6.600 rows=2)\n" +
			"     ├─ IndexedTableAccess(uv)\n" +
			"     │   ├─ index: [uv.u]\n" +
			"     │   ├─ filters: [{(0, 2)}]\n" +
			"     │   └─ columns: [u v]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ columns: [x y]\n" +
			"         └─ keys: uv.u\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [xy.x, xy.y, uv.u, uv.v]\n" +
			" └─ LookupJoin (estimated cost=6.600 rows=2) (actual rows=1 loops=1)\n" +
			"     ├─ IndexedTableAccess(uv)\n" +
			"     │   ├─ index: [uv.u]\n" +
			"     │   ├─ filters: [{(0, 2)}]\n" +
			"     │   └─ columns: [u v]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ columns: [x y]\n" +
			"         └─ keys: uv.u\n" +
			"",
	},
	{
		Query: `
select
  case when x is null then 0
  when x in (select x from xy where not x in (select u from uv)) then 1
  else 2
  end as s
From xy;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [CASE  WHEN xy.x:0!null IS NULL THEN 0 (tinyint) WHEN InSubquery\n" +
			" │   ├─ left: xy.x:0!null\n" +
			" │   └─ right: Subquery\n" +
			" │       ├─ cacheable: true\n" +
			" │       ├─ alias-string: select x from xy where not x in (select u from uv)\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [xy.x:3!null]\n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [xy.x:3!null, xy.y:4]\n" +
			" │               └─ Filter\n" +
			" │                   ├─ uv.u:5!null IS NULL\n" +
			" │                   └─ LeftOuterMergeJoin\n" +
			" │                       ├─ cmp: Eq\n" +
			" │                       │   ├─ xy.x:3!null\n" +
			" │                       │   └─ uv.u:5!null\n" +
			" │                       ├─ IndexedTableAccess(xy)\n" +
			" │                       │   ├─ index: [xy.x]\n" +
			" │                       │   ├─ static: [{[NULL, ∞)}]\n" +
			" │                       │   ├─ colSet: (3,4)\n" +
			" │                       │   ├─ tableId: 2\n" +
			" │                       │   └─ Table\n" +
			" │                       │       ├─ name: xy\n" +
			" │                       │       └─ columns: [x y]\n" +
			" │                       └─ IndexedTableAccess(uv)\n" +
			" │                           ├─ index: [uv.u]\n" +
			" │                           ├─ static: [{[NULL, ∞)}]\n" +
			" │                           ├─ colSet: (5,6)\n" +
			" │                           ├─ tableId: 3\n" +
			" │                           └─ Table\n" +
			" │                               ├─ name: uv\n" +
			" │                               └─ columns: [u]\n" +
			" │   THEN 1 (tinyint) ELSE 2 (tinyint) END as s]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x:0!null, xy.y:1, CASE  WHEN xy.x:0!null IS NULL THEN 0 (tinyint) WHEN InSubquery\n" +
			"     │   ├─ left: xy.x:0!null\n" +
			"     │   └─ right: Subquery\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       ├─ alias-string: select x from xy where not x in (select u from uv)\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [xy.x:2!null]\n" +
			"     │           └─ Project\n" +
			"     │               ├─ columns: [xy.x:2!null, xy.y:3]\n" +
			"     │               └─ Filter\n" +
			"     │                   ├─ uv.u:4!null IS NULL\n" +
			"     │                   └─ LeftOuterMergeJoin\n" +
			"     │                       ├─ cmp: Eq\n" +
			"     │                       │   ├─ xy.x:2!null\n" +
			"     │                       │   └─ uv.u:4!null\n" +
			"     │                       ├─ IndexedTableAccess(xy)\n" +
			"     │                       │   ├─ index: [xy.x]\n" +
			"     │                       │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │                       │   ├─ colSet: (3,4)\n" +
			"     │                       │   ├─ tableId: 2\n" +
			"     │                       │   └─ Table\n" +
			"     │                       │       ├─ name: xy\n" +
			"     │                       │       └─ columns: [x y]\n" +
			"     │                       └─ IndexedTableAccess(uv)\n" +
			"     │                           ├─ index: [uv.u]\n" +
			"     │                           ├─ static: [{[NULL, ∞)}]\n" +
			"     │                           ├─ colSet: (5,6)\n" +
			"     │                           ├─ tableId: 3\n" +
			"     │                           └─ Table\n" +
			"     │                               ├─ name: uv\n" +
			"     │                               └─ columns: [u]\n" +
			"     │   THEN 1 (tinyint) ELSE 2 (tinyint) END as s]\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [CASE  WHEN xy.x IS NULL THEN 0 WHEN InSubquery\n" +
			" │   ├─ left: xy.x\n" +
			" │   └─ right: Subquery\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [xy.x]\n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [xy.x, xy.y]\n" +
			" │               └─ Filter\n" +
			" │                   ├─ uv.u IS NULL\n" +
			" │                   └─ LeftOuterMergeJoin\n" +
			" │                       ├─ cmp: (xy.x = uv.u)\n" +
			" │                       ├─ IndexedTableAccess(xy)\n" +
			" │                       │   ├─ index: [xy.x]\n" +
			" │                       │   └─ filters: [{[NULL, ∞)}]\n" +
			" │                       └─ IndexedTableAccess(uv)\n" +
			" │                           ├─ index: [uv.u]\n" +
			" │                           ├─ filters: [{[NULL, ∞)}]\n" +
			" │                           └─ columns: [u]\n" +
			" │   THEN 1 ELSE 2 END as s]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x, xy.y, CASE  WHEN xy.x IS NULL THEN 0 WHEN InSubquery\n" +
			"     │   ├─ left: xy.x\n" +
			"     │   └─ right: Subquery\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [xy.x]\n" +
			"     │           └─ Project\n" +
			"     │               ├─ columns: [xy.x, xy.y]\n" +
			"     │               └─ Filter\n" +
			"     │                   ├─ uv.u IS NULL\n" +
			"     │                   └─ LeftOuterMergeJoin\n" +
			"     │                       ├─ cmp: (xy.x = uv.u)\n" +
			"     │                       ├─ IndexedTableAccess(xy)\n" +
			"     │                       │   ├─ index: [xy.x]\n" +
			"     │                       │   └─ filters: [{[NULL, ∞)}]\n" +
			"     │                       └─ IndexedTableAccess(uv)\n" +
			"     │                           ├─ index: [uv.u]\n" +
			"     │                           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │                           └─ columns: [u]\n" +
			"     │   THEN 1 ELSE 2 END as s]\n" +
			"     └─ Table\n" +
			"         └─ name: xy\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [CASE  WHEN xy.x IS NULL THEN 0 WHEN InSubquery\n" +
			" │   ├─ left: xy.x\n" +
			" │   └─ right: Subquery\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [xy.x]\n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [xy.x, xy.y]\n" +
			" │               └─ Filter\n" +
			" │                   ├─ uv.u IS NULL\n" +
			" │                   └─ LeftOuterMergeJoin\n" +
			" │                       ├─ cmp: (xy.x = uv.u)\n" +
			" │                       ├─ IndexedTableAccess(xy)\n" +
			" │                       │   ├─ index: [xy.x]\n" +
			" │                       │   └─ filters: [{[NULL, ∞)}]\n" +
			" │                       └─ IndexedTableAccess(uv)\n" +
			" │                           ├─ index: [uv.u]\n" +
			" │                           ├─ filters: [{[NULL, ∞)}]\n" +
			" │                           └─ columns: [u]\n" +
			" │   THEN 1 ELSE 2 END as s]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x, xy.y, CASE  WHEN xy.x IS NULL THEN 0 WHEN InSubquery\n" +
			"     │   ├─ left: xy.x\n" +
			"     │   └─ right: Subquery\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [xy.x]\n" +
			"     │           └─ Project\n" +
			"     │               ├─ columns: [xy.x, xy.y]\n" +
			"     │               └─ Filter\n" +
			"     │                   ├─ uv.u IS NULL\n" +
			"     │                   └─ LeftOuterMergeJoin\n" +
			"     │                       ├─ cmp: (xy.x = uv.u)\n" +
			"     │                       ├─ IndexedTableAccess(xy)\n" +
			"     │                       │   ├─ index: [xy.x]\n" +
			"     │                       │   └─ filters: [{[NULL, ∞)}]\n" +
			"     │                       └─ IndexedTableAccess(uv)\n" +
			"     │                           ├─ index: [uv.u]\n" +
			"     │                           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │                           └─ columns: [u]\n" +
			"     │   THEN 1 ELSE 2 END as s]\n" +
			"     └─ Table\n" +
			"         └─ name: xy\n" +
			"",
	},
	{
		Query: `select * from MYTABLE where I = 2 and s = 'first row'`,
		ExpectedPlan: "Filter\n" +
			" ├─ Eq\n" +
			" │   ├─ mytable.s:1!null\n" +
			" │   └─ first row (longtext)\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i]\n" +
			"     ├─ static: [{[2, 2]}]\n" +
			"     ├─ colSet: (1,2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (mytable.s = 'first row')\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i]\n" +
			"     ├─ filters: [{[2, 2]}]\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (mytable.s = 'first row')\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i]\n" +
			"     ├─ filters: [{[2, 2]}]\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `select /*+ JOIN_ORDER(uv,xy) */ count(*) from xy where y in (select distinct v from uv);`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(1):0!null as count(*)]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: COUNT(1 (bigint))\n" +
			"     ├─ group: \n" +
			"     └─ Project\n" +
			"         ├─ columns: [xy.x:1!null, xy.y:2]\n" +
			"         └─ LookupJoin\n" +
			"             ├─ Distinct\n" +
			"             │   └─ Project\n" +
			"             │       ├─ columns: [uv.v:1]\n" +
			"             │       └─ ProcessTable\n" +
			"             │           └─ Table\n" +
			"             │               ├─ name: uv\n" +
			"             │               └─ columns: [u v]\n" +
			"             └─ IndexedTableAccess(xy)\n" +
			"                 ├─ index: [xy.y]\n" +
			"                 ├─ keys: [uv.v:0]\n" +
			"                 ├─ colSet: (1,2)\n" +
			"                 ├─ tableId: 1\n" +
			"                 └─ Table\n" +
			"                     ├─ name: xy\n" +
			"                     └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(1) as count(*)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1))\n" +
			"     ├─ Grouping()\n" +
			"     └─ Project\n" +
			"         ├─ columns: [xy.x, xy.y]\n" +
			"         └─ LookupJoin\n" +
			"             ├─ Distinct\n" +
			"             │   └─ Project\n" +
			"             │       ├─ columns: [uv.v]\n" +
			"             │       └─ Table\n" +
			"             │           └─ name: uv\n" +
			"             └─ IndexedTableAccess(xy)\n" +
			"                 ├─ index: [xy.y]\n" +
			"                 └─ keys: uv.v\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(1) as count(*)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1))\n" +
			"     ├─ Grouping()\n" +
			"     └─ Project\n" +
			"         ├─ columns: [xy.x, xy.y]\n" +
			"         └─ LookupJoin\n" +
			"             ├─ Distinct\n" +
			"             │   └─ Project\n" +
			"             │       ├─ columns: [uv.v]\n" +
			"             │       └─ Table\n" +
			"             │           └─ name: uv\n" +
			"             └─ IndexedTableAccess(xy)\n" +
			"                 ├─ index: [xy.y]\n" +
			"                 └─ keys: uv.v\n" +
			"",
	},
	{
		Query: `SELECT /*+ JOIN_ORDER(uv,xy) */ count(*) from xy where y in (select distinct u from uv);`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(1):0!null as count(*)]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: COUNT(1 (bigint))\n" +
			"     ├─ group: \n" +
			"     └─ LookupJoin\n" +
			"         ├─ Eq\n" +
			"         │   ├─ xy.y:2\n" +
			"         │   └─ uv.u:0!null\n" +
			"         ├─ OrderedDistinct\n" +
			"         │   └─ Project\n" +
			"         │       ├─ columns: [uv.u:0!null]\n" +
			"         │       └─ ProcessTable\n" +
			"         │           └─ Table\n" +
			"         │               ├─ name: uv\n" +
			"         │               └─ columns: [u v]\n" +
			"         └─ IndexedTableAccess(xy)\n" +
			"             ├─ index: [xy.y]\n" +
			"             ├─ keys: [uv.u:0!null]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             ├─ tableId: 1\n" +
			"             └─ Table\n" +
			"                 ├─ name: xy\n" +
			"                 └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(1) as count(*)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1))\n" +
			"     ├─ Grouping()\n" +
			"     └─ LookupJoin\n" +
			"         ├─ (xy.y = uv.u)\n" +
			"         ├─ OrderedDistinct\n" +
			"         │   └─ Project\n" +
			"         │       ├─ columns: [uv.u]\n" +
			"         │       └─ Table\n" +
			"         │           └─ name: uv\n" +
			"         └─ IndexedTableAccess(xy)\n" +
			"             ├─ index: [xy.y]\n" +
			"             └─ keys: uv.u\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(1) as count(*)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1))\n" +
			"     ├─ Grouping()\n" +
			"     └─ LookupJoin\n" +
			"         ├─ (xy.y = uv.u)\n" +
			"         ├─ OrderedDistinct\n" +
			"         │   └─ Project\n" +
			"         │       ├─ columns: [uv.u]\n" +
			"         │       └─ Table\n" +
			"         │           └─ name: uv\n" +
			"         └─ IndexedTableAccess(xy)\n" +
			"             ├─ index: [xy.y]\n" +
			"             └─ keys: uv.u\n" +
			"",
	},
	{
		Query: `select count(*) from mytable`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(1):0!null as count(*)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [mytable.COUNT(1):0!null as COUNT(1)]\n" +
			"     └─ table_count(mytable) as COUNT(1)\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(1) as count(*)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [mytable.COUNT(1) as COUNT(1)]\n" +
			"     └─ table_count(mytable) as COUNT(1)\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(1) as count(*)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [mytable.COUNT(1) as COUNT(1)]\n" +
			"     └─ table_count(mytable) as COUNT(1)\n" +
			"",
	},
	{
		Query: `select count(*) as cnt from mytable`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(1):0!null as cnt]\n" +
			" └─ Project\n" +
			"     ├─ columns: [mytable.COUNT(1):0!null as COUNT(1)]\n" +
			"     └─ table_count(mytable) as COUNT(1)\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(1) as cnt]\n" +
			" └─ Project\n" +
			"     ├─ columns: [mytable.COUNT(1) as COUNT(1)]\n" +
			"     └─ table_count(mytable) as COUNT(1)\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(1) as cnt]\n" +
			" └─ Project\n" +
			"     ├─ columns: [mytable.COUNT(1) as COUNT(1)]\n" +
			"     └─ table_count(mytable) as COUNT(1)\n" +
			"",
	},
	{
		Query: `select count(*) from keyless`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(1):0!null as count(*)]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: COUNT(1 (bigint))\n" +
			"     ├─ group: \n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: keyless\n" +
			"             └─ columns: []\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(1) as count(*)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1))\n" +
			"     ├─ Grouping()\n" +
			"     └─ Table\n" +
			"         ├─ name: keyless\n" +
			"         └─ columns: []\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(1) as count(*)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1))\n" +
			"     ├─ Grouping()\n" +
			"     └─ Table\n" +
			"         ├─ name: keyless\n" +
			"         └─ columns: []\n" +
			"",
	},
	{
		Query: `select count(*) from xy`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(1):0!null as count(*)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.COUNT(1):0!null as COUNT(1)]\n" +
			"     └─ table_count(xy) as COUNT(1)\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(1) as count(*)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.COUNT(1) as COUNT(1)]\n" +
			"     └─ table_count(xy) as COUNT(1)\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(1) as count(*)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.COUNT(1) as COUNT(1)]\n" +
			"     └─ table_count(xy) as COUNT(1)\n" +
			"",
	},
	{
		Query: `select count(1) from mytable`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(1):0!null]\n" +
			" └─ Project\n" +
			"     ├─ columns: [mytable.COUNT(1):0!null as COUNT(1)]\n" +
			"     └─ table_count(mytable) as COUNT(1)\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(1)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [mytable.COUNT(1) as COUNT(1)]\n" +
			"     └─ table_count(mytable) as COUNT(1)\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(1)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [mytable.COUNT(1) as COUNT(1)]\n" +
			"     └─ table_count(mytable) as COUNT(1)\n" +
			"",
	},
	{
		Query: `select count(1) from xy`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(1):0!null]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.COUNT(1):0!null as COUNT(1)]\n" +
			"     └─ table_count(xy) as COUNT(1)\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(1)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.COUNT(1) as COUNT(1)]\n" +
			"     └─ table_count(xy) as COUNT(1)\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(1)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.COUNT(1) as COUNT(1)]\n" +
			"     └─ table_count(xy) as COUNT(1)\n" +
			"",
	},
	{
		Query: `select count(1) from xy, uv`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(1):0!null]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: COUNT(1 (tinyint))\n" +
			"     ├─ group: \n" +
			"     └─ CrossJoin\n" +
			"         ├─ ProcessTable\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: uv\n" +
			"         │       └─ columns: []\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: xy\n" +
			"                 └─ columns: []\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(1)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1))\n" +
			"     ├─ Grouping()\n" +
			"     └─ CrossJoin\n" +
			"         ├─ Table\n" +
			"         │   ├─ name: uv\n" +
			"         │   └─ columns: []\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: []\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(1)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1))\n" +
			"     ├─ Grouping()\n" +
			"     └─ CrossJoin\n" +
			"         ├─ Table\n" +
			"         │   ├─ name: uv\n" +
			"         │   └─ columns: []\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: []\n" +
			"",
	},
	{
		Query: `select * from (select count(*) from xy) dt`,
		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: dt\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (4)\n" +
			" ├─ tableId: 2\n" +
			" └─ Project\n" +
			"     ├─ columns: [count(1):0!null as count(*)]\n" +
			"     └─ Project\n" +
			"         ├─ columns: [xy.COUNT(1):0!null as COUNT(1)]\n" +
			"         └─ table_count(xy) as COUNT(1)\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: dt\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Project\n" +
			"     ├─ columns: [count(1) as count(*)]\n" +
			"     └─ Project\n" +
			"         ├─ columns: [xy.COUNT(1) as COUNT(1)]\n" +
			"         └─ table_count(xy) as COUNT(1)\n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: dt\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Project\n" +
			"     ├─ columns: [count(1) as count(*)]\n" +
			"     └─ Project\n" +
			"         ├─ columns: [xy.COUNT(1) as COUNT(1)]\n" +
			"         └─ table_count(xy) as COUNT(1)\n" +
			"",
	},
	{
		Query: `select (select count(*) from xy), (select count(*) from uv)`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   ├─ alias-string: select count(*) from xy\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [count(1):1!null as count(*)]\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [xy.COUNT(1):1!null as COUNT(1)]\n" +
			" │           └─ table_count(xy) as COUNT(1)\n" +
			" │   as (select count(*) from xy), Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   ├─ alias-string: select count(*) from uv\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [count(1):1!null as count(*)]\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [uv.COUNT(1):1!null as COUNT(1)]\n" +
			" │           └─ table_count(uv) as COUNT(1)\n" +
			" │   as (select count(*) from uv)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [dual.:0!null]\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: \n" +
			"             └─ columns: []\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [count(1) as count(*)]\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [xy.COUNT(1) as COUNT(1)]\n" +
			" │           └─ table_count(xy) as COUNT(1)\n" +
			" │   as (select count(*) from xy), Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [count(1) as count(*)]\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [uv.COUNT(1) as COUNT(1)]\n" +
			" │           └─ table_count(uv) as COUNT(1)\n" +
			" │   as (select count(*) from uv)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [dual.]\n" +
			"     └─ Table\n" +
			"         └─ name: \n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [count(1) as count(*)]\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [xy.COUNT(1) as COUNT(1)]\n" +
			" │           └─ table_count(xy) as COUNT(1)\n" +
			" │   as (select count(*) from xy), Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [count(1) as count(*)]\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [uv.COUNT(1) as COUNT(1)]\n" +
			" │           └─ table_count(uv) as COUNT(1)\n" +
			" │   as (select count(*) from uv)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [dual.]\n" +
			"     └─ Table\n" +
			"         └─ name: \n" +
			"",
	},
	{
		Query: `select (select count(*) from xy), (select count(*) from uv), count(*) from ab`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   ├─ alias-string: select count(*) from xy\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [count(1):1!null as count(*)]\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [xy.COUNT(1):1!null as COUNT(1)]\n" +
			" │           └─ table_count(xy) as COUNT(1)\n" +
			" │   as (select count(*) from xy), Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   ├─ alias-string: select count(*) from uv\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [count(1):1!null as count(*)]\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [uv.COUNT(1):1!null as COUNT(1)]\n" +
			" │           └─ table_count(uv) as COUNT(1)\n" +
			" │   as (select count(*) from uv), count(1):0!null as count(*)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [ab.COUNT(1):0!null as COUNT(1)]\n" +
			"     └─ table_count(ab) as COUNT(1)\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [count(1) as count(*)]\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [xy.COUNT(1) as COUNT(1)]\n" +
			" │           └─ table_count(xy) as COUNT(1)\n" +
			" │   as (select count(*) from xy), Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [count(1) as count(*)]\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [uv.COUNT(1) as COUNT(1)]\n" +
			" │           └─ table_count(uv) as COUNT(1)\n" +
			" │   as (select count(*) from uv), count(1) as count(*)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [ab.COUNT(1) as COUNT(1)]\n" +
			"     └─ table_count(ab) as COUNT(1)\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [count(1) as count(*)]\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [xy.COUNT(1) as COUNT(1)]\n" +
			" │           └─ table_count(xy) as COUNT(1)\n" +
			" │   as (select count(*) from xy), Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [count(1) as count(*)]\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [uv.COUNT(1) as COUNT(1)]\n" +
			" │           └─ table_count(uv) as COUNT(1)\n" +
			" │   as (select count(*) from uv), count(1) as count(*)]\n" +
			" └─ Project\n" +
			"     ├─ columns: [ab.COUNT(1) as COUNT(1)]\n" +
			"     └─ table_count(ab) as COUNT(1)\n" +
			"",
	},
	{
		Query: `
SELECT COUNT(DISTINCT (s_i_id))
FROM order_line1, stock1
WHERE
  ol_w_id = 5 AND
  ol_d_id = 2 AND
  ol_o_id < 3001 AND
  ol_o_id >= 2981 AND
  s_w_id= 5 AND
  s_i_id=ol_i_id AND
  s_quantity < 15;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [countdistinct([stock1.s_i_id]):0!null as COUNT(DISTINCT (s_i_id))]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: COUNTDISTINCT([stock1.s_i_id])\n" +
			"     ├─ group: \n" +
			"     └─ HashJoin\n" +
			"         ├─ Eq\n" +
			"         │   ├─ stock1.s_i_id:4!null\n" +
			"         │   └─ order_line1.ol_i_id:3\n" +
			"         ├─ IndexedTableAccess(order_line1)\n" +
			"         │   ├─ index: [order_line1.ol_w_id,order_line1.ol_d_id,order_line1.ol_o_id,order_line1.ol_number]\n" +
			"         │   ├─ static: [{[5, 5], [2, 2], [2981, 3001), [NULL, ∞)}]\n" +
			"         │   ├─ colSet: (1-10)\n" +
			"         │   ├─ tableId: 1\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: order_line1\n" +
			"         │       └─ columns: [ol_o_id ol_d_id ol_w_id ol_i_id]\n" +
			"         └─ HashLookup\n" +
			"             ├─ left-key: TUPLE(order_line1.ol_i_id:3)\n" +
			"             ├─ right-key: TUPLE(stock1.s_i_id:0!null)\n" +
			"             └─ Filter\n" +
			"                 ├─ LessThan\n" +
			"                 │   ├─ stock1.s_quantity:2\n" +
			"                 │   └─ 15 (smallint)\n" +
			"                 └─ IndexedTableAccess(stock1)\n" +
			"                     ├─ index: [stock1.s_w_id,stock1.s_i_id]\n" +
			"                     ├─ static: [{[5, 5], [NULL, ∞)}]\n" +
			"                     ├─ colSet: (11-27)\n" +
			"                     ├─ tableId: 2\n" +
			"                     └─ Table\n" +
			"                         ├─ name: stock1\n" +
			"                         └─ columns: [s_i_id s_w_id s_quantity]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [countdistinct([stock1.s_i_id]) as COUNT(DISTINCT (s_i_id))]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNTDISTINCT([stock1.s_i_id]))\n" +
			"     ├─ Grouping()\n" +
			"     └─ HashJoin\n" +
			"         ├─ (stock1.s_i_id = order_line1.ol_i_id)\n" +
			"         ├─ IndexedTableAccess(order_line1)\n" +
			"         │   ├─ index: [order_line1.ol_w_id,order_line1.ol_d_id,order_line1.ol_o_id,order_line1.ol_number]\n" +
			"         │   ├─ filters: [{[5, 5], [2, 2], [2981, 3001), [NULL, ∞)}]\n" +
			"         │   └─ columns: [ol_o_id ol_d_id ol_w_id ol_i_id]\n" +
			"         └─ HashLookup\n" +
			"             ├─ left-key: (order_line1.ol_i_id)\n" +
			"             ├─ right-key: (stock1.s_i_id)\n" +
			"             └─ Filter\n" +
			"                 ├─ (stock1.s_quantity < 15)\n" +
			"                 └─ IndexedTableAccess(stock1)\n" +
			"                     ├─ index: [stock1.s_w_id,stock1.s_i_id]\n" +
			"                     ├─ filters: [{[5, 5], [NULL, ∞)}]\n" +
			"                     └─ columns: [s_i_id s_w_id s_quantity]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [countdistinct([stock1.s_i_id]) as COUNT(DISTINCT (s_i_id))]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNTDISTINCT([stock1.s_i_id]))\n" +
			"     ├─ Grouping()\n" +
			"     └─ HashJoin\n" +
			"         ├─ (stock1.s_i_id = order_line1.ol_i_id)\n" +
			"         ├─ IndexedTableAccess(order_line1)\n" +
			"         │   ├─ index: [order_line1.ol_w_id,order_line1.ol_d_id,order_line1.ol_o_id,order_line1.ol_number]\n" +
			"         │   ├─ filters: [{[5, 5], [2, 2], [2981, 3001), [NULL, ∞)}]\n" +
			"         │   └─ columns: [ol_o_id ol_d_id ol_w_id ol_i_id]\n" +
			"         └─ HashLookup\n" +
			"             ├─ left-key: (order_line1.ol_i_id)\n" +
			"             ├─ right-key: (stock1.s_i_id)\n" +
			"             └─ Filter\n" +
			"                 ├─ (stock1.s_quantity < 15)\n" +
			"                 └─ IndexedTableAccess(stock1)\n" +
			"                     ├─ index: [stock1.s_w_id,stock1.s_i_id]\n" +
			"                     ├─ filters: [{[5, 5], [NULL, ∞)}]\n" +
			"                     └─ columns: [s_i_id s_w_id s_quantity]\n" +
			"",
	},
	{
		Query: `
SELECT c_discount, c_last, c_credit, w_tax
FROM customer1, warehouse1
WHERE
  w_id = 1 AND
  c_w_id = w_id AND
  c_d_id = 2 AND
  c_id = 2327;
`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [customer1.c_discount:7, customer1.c_last:5, customer1.c_credit:6, warehouse1.w_tax:1]\n" +
			" └─ LookupJoin\n" +
			"     ├─ IndexedTableAccess(warehouse1)\n" +
			"     │   ├─ index: [warehouse1.w_id]\n" +
			"     │   ├─ static: [{[1, 1]}]\n" +
			"     │   ├─ colSet: (22-30)\n" +
			"     │   ├─ tableId: 2\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: warehouse1\n" +
			"     │       └─ columns: [w_id w_tax]\n" +
			"     └─ Filter\n" +
			"         ├─ AND\n" +
			"         │   ├─ Eq\n" +
			"         │   │   ├─ customer1.c_d_id:1!null\n" +
			"         │   │   └─ 2 (tinyint)\n" +
			"         │   └─ Eq\n" +
			"         │       ├─ customer1.c_id:0!null\n" +
			"         │       └─ 2327 (int)\n" +
			"         └─ IndexedTableAccess(customer1)\n" +
			"             ├─ index: [customer1.c_w_id,customer1.c_d_id,customer1.c_id]\n" +
			"             ├─ keys: [warehouse1.w_id:0!null 2 (tinyint) 2327 (int)]\n" +
			"             ├─ colSet: (1-21)\n" +
			"             ├─ tableId: 1\n" +
			"             └─ Table\n" +
			"                 ├─ name: customer1\n" +
			"                 └─ columns: [c_id c_d_id c_w_id c_last c_credit c_discount]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [customer1.c_discount, customer1.c_last, customer1.c_credit, warehouse1.w_tax]\n" +
			" └─ LookupJoin (estimated cost=16.500 rows=5)\n" +
			"     ├─ IndexedTableAccess(warehouse1)\n" +
			"     │   ├─ index: [warehouse1.w_id]\n" +
			"     │   ├─ filters: [{[1, 1]}]\n" +
			"     │   └─ columns: [w_id w_tax]\n" +
			"     └─ Filter\n" +
			"         ├─ ((customer1.c_d_id = 2) AND (customer1.c_id = 2327))\n" +
			"         └─ IndexedTableAccess(customer1)\n" +
			"             ├─ index: [customer1.c_w_id,customer1.c_d_id,customer1.c_id]\n" +
			"             ├─ columns: [c_id c_d_id c_w_id c_last c_credit c_discount]\n" +
			"             └─ keys: warehouse1.w_id, 2, 2327\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [customer1.c_discount, customer1.c_last, customer1.c_credit, warehouse1.w_tax]\n" +
			" └─ LookupJoin (estimated cost=16.500 rows=5) (actual rows=0 loops=1)\n" +
			"     ├─ IndexedTableAccess(warehouse1)\n" +
			"     │   ├─ index: [warehouse1.w_id]\n" +
			"     │   ├─ filters: [{[1, 1]}]\n" +
			"     │   └─ columns: [w_id w_tax]\n" +
			"     └─ Filter\n" +
			"         ├─ ((customer1.c_d_id = 2) AND (customer1.c_id = 2327))\n" +
			"         └─ IndexedTableAccess(customer1)\n" +
			"             ├─ index: [customer1.c_w_id,customer1.c_d_id,customer1.c_id]\n" +
			"             ├─ columns: [c_id c_d_id c_w_id c_last c_credit c_discount]\n" +
			"             └─ keys: warehouse1.w_id, 2, 2327\n" +
			"",
	},
	{
		Query: `select * from asset am join asset am2 on (am.orgId = am2.orgId and am.name = am2.name and am.val = am2.val);`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ TUPLE(am.orgId:1, am.name:3, am.val:4)\n" +
			" │   └─ TUPLE(am2.orgId:6, am2.name:8, am2.val:9)\n" +
			" ├─ TableAlias(am)\n" +
			" │   └─ IndexedTableAccess(asset)\n" +
			" │       ├─ index: [asset.orgId,asset.name,asset.val]\n" +
			" │       ├─ static: [{[NULL, ∞), [NULL, ∞), [NULL, ∞)}]\n" +
			" │       ├─ colSet: (1-5)\n" +
			" │       ├─ tableId: 1\n" +
			" │       └─ Table\n" +
			" │           ├─ name: asset\n" +
			" │           └─ columns: [id orgid assetid name val]\n" +
			" └─ TableAlias(am2)\n" +
			"     └─ IndexedTableAccess(asset)\n" +
			"         ├─ index: [asset.orgId,asset.name,asset.val]\n" +
			"         ├─ static: [{[NULL, ∞), [NULL, ∞), [NULL, ∞)}]\n" +
			"         ├─ colSet: (6-10)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: asset\n" +
			"             └─ columns: [id orgid assetid name val]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=24.390 rows=14)\n" +
			" ├─ cmp: ((am.orgId, am.name, am.val) = (am2.orgId, am2.name, am2.val))\n" +
			" ├─ TableAlias(am)\n" +
			" │   └─ IndexedTableAccess(asset)\n" +
			" │       ├─ index: [asset.orgId,asset.name,asset.val]\n" +
			" │       ├─ filters: [{[NULL, ∞), [NULL, ∞), [NULL, ∞)}]\n" +
			" │       └─ columns: [id orgid assetid name val]\n" +
			" └─ TableAlias(am2)\n" +
			"     └─ IndexedTableAccess(asset)\n" +
			"         ├─ index: [asset.orgId,asset.name,asset.val]\n" +
			"         ├─ filters: [{[NULL, ∞), [NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ columns: [id orgid assetid name val]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=24.390 rows=14) (actual rows=12 loops=1)\n" +
			" ├─ cmp: ((am.orgId, am.name, am.val) = (am2.orgId, am2.name, am2.val))\n" +
			" ├─ TableAlias(am)\n" +
			" │   └─ IndexedTableAccess(asset)\n" +
			" │       ├─ index: [asset.orgId,asset.name,asset.val]\n" +
			" │       ├─ filters: [{[NULL, ∞), [NULL, ∞), [NULL, ∞)}]\n" +
			" │       └─ columns: [id orgid assetid name val]\n" +
			" └─ TableAlias(am2)\n" +
			"     └─ IndexedTableAccess(asset)\n" +
			"         ├─ index: [asset.orgId,asset.name,asset.val]\n" +
			"         ├─ filters: [{[NULL, ∞), [NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ columns: [id orgid assetid name val]\n" +
			"",
	},
	{
		Query: `
select /*+ LOOKUP_JOIN(style, dimension) LOOKUP_JOIN(dimension, color) */ style.assetId
from asset style
join asset dimension
  on style.assetId = dimension.assetId
join asset color
  on style.assetId = color.assetId
where
  dimension.val = 'wide' and
  style.val = 'curve' and
  color.val = 'blue' and
  dimension.name = 'dimension' and
  style.name = 'style' and
  color.name = 'color' and
  dimension.orgId = 'org1' and
  style.orgId = 'org1' and
  color.orgId = 'org1';
`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [style.assetId:1]\n" +
			" └─ LookupJoin\n" +
			"     ├─ LookupJoin\n" +
			"     │   ├─ Filter\n" +
			"     │   │   ├─ AND\n" +
			"     │   │   │   ├─ AND\n" +
			"     │   │   │   │   ├─ Eq\n" +
			"     │   │   │   │   │   ├─ style.val:3\n" +
			"     │   │   │   │   │   └─ curve (longtext)\n" +
			"     │   │   │   │   └─ Eq\n" +
			"     │   │   │   │       ├─ style.name:2\n" +
			"     │   │   │   │       └─ style (longtext)\n" +
			"     │   │   │   └─ Eq\n" +
			"     │   │   │       ├─ style.orgId:0\n" +
			"     │   │   │       └─ org1 (longtext)\n" +
			"     │   │   └─ TableAlias(style)\n" +
			"     │   │       └─ IndexedTableAccess(asset)\n" +
			"     │   │           ├─ index: [asset.orgId,asset.name,asset.assetId]\n" +
			"     │   │           ├─ static: [{[org1, org1], [style, style], [NULL, ∞)}]\n" +
			"     │   │           ├─ colSet: (1-5)\n" +
			"     │   │           ├─ tableId: 1\n" +
			"     │   │           └─ Table\n" +
			"     │   │               ├─ name: asset\n" +
			"     │   │               └─ columns: [orgid assetid name val]\n" +
			"     │   └─ Filter\n" +
			"     │       ├─ AND\n" +
			"     │       │   ├─ AND\n" +
			"     │       │   │   ├─ Eq\n" +
			"     │       │   │   │   ├─ dimension.val:3\n" +
			"     │       │   │   │   └─ wide (longtext)\n" +
			"     │       │   │   └─ Eq\n" +
			"     │       │   │       ├─ dimension.name:2\n" +
			"     │       │   │       └─ dimension (longtext)\n" +
			"     │       │   └─ Eq\n" +
			"     │       │       ├─ dimension.orgId:0\n" +
			"     │       │       └─ org1 (longtext)\n" +
			"     │       └─ TableAlias(dimension)\n" +
			"     │           └─ IndexedTableAccess(asset)\n" +
			"     │               ├─ index: [asset.orgId,asset.name,asset.assetId]\n" +
			"     │               ├─ keys: [org1 (longtext) dimension (longtext) style.assetId:1]\n" +
			"     │               ├─ colSet: (6-10)\n" +
			"     │               ├─ tableId: 2\n" +
			"     │               └─ Table\n" +
			"     │                   ├─ name: asset\n" +
			"     │                   └─ columns: [orgid assetid name val]\n" +
			"     └─ Filter\n" +
			"         ├─ AND\n" +
			"         │   ├─ AND\n" +
			"         │   │   ├─ Eq\n" +
			"         │   │   │   ├─ color.val:3\n" +
			"         │   │   │   └─ blue (longtext)\n" +
			"         │   │   └─ Eq\n" +
			"         │   │       ├─ color.name:2\n" +
			"         │   │       └─ color (longtext)\n" +
			"         │   └─ Eq\n" +
			"         │       ├─ color.orgId:0\n" +
			"         │       └─ org1 (longtext)\n" +
			"         └─ TableAlias(color)\n" +
			"             └─ IndexedTableAccess(asset)\n" +
			"                 ├─ index: [asset.orgId,asset.name,asset.assetId]\n" +
			"                 ├─ keys: [org1 (longtext) color (longtext) style.assetId:1]\n" +
			"                 ├─ colSet: (11-15)\n" +
			"                 ├─ tableId: 3\n" +
			"                 └─ Table\n" +
			"                     ├─ name: asset\n" +
			"                     └─ columns: [orgid assetid name val]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [style.assetId]\n" +
			" └─ LookupJoin (estimated cost=16.500 rows=5)\n" +
			"     ├─ LookupJoin (estimated cost=16.500 rows=5)\n" +
			"     │   ├─ Filter\n" +
			"     │   │   ├─ (((style.val = 'curve') AND (style.name = 'style')) AND (style.orgId = 'org1'))\n" +
			"     │   │   └─ TableAlias(style)\n" +
			"     │   │       └─ IndexedTableAccess(asset)\n" +
			"     │   │           ├─ index: [asset.orgId,asset.name,asset.assetId]\n" +
			"     │   │           ├─ filters: [{[org1, org1], [style, style], [NULL, ∞)}]\n" +
			"     │   │           └─ columns: [orgid assetid name val]\n" +
			"     │   └─ Filter\n" +
			"     │       ├─ (((dimension.val = 'wide') AND (dimension.name = 'dimension')) AND (dimension.orgId = 'org1'))\n" +
			"     │       └─ TableAlias(dimension)\n" +
			"     │           └─ IndexedTableAccess(asset)\n" +
			"     │               ├─ index: [asset.orgId,asset.name,asset.assetId]\n" +
			"     │               ├─ columns: [orgid assetid name val]\n" +
			"     │               └─ keys: 'org1', 'dimension', style.assetId\n" +
			"     └─ Filter\n" +
			"         ├─ (((color.val = 'blue') AND (color.name = 'color')) AND (color.orgId = 'org1'))\n" +
			"         └─ TableAlias(color)\n" +
			"             └─ IndexedTableAccess(asset)\n" +
			"                 ├─ index: [asset.orgId,asset.name,asset.assetId]\n" +
			"                 ├─ columns: [orgid assetid name val]\n" +
			"                 └─ keys: 'org1', 'color', style.assetId\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [style.assetId]\n" +
			" └─ LookupJoin (estimated cost=16.500 rows=5) (actual rows=1 loops=1)\n" +
			"     ├─ LookupJoin (estimated cost=16.500 rows=5) (actual rows=1 loops=1)\n" +
			"     │   ├─ Filter\n" +
			"     │   │   ├─ (((style.val = 'curve') AND (style.name = 'style')) AND (style.orgId = 'org1'))\n" +
			"     │   │   └─ TableAlias(style)\n" +
			"     │   │       └─ IndexedTableAccess(asset)\n" +
			"     │   │           ├─ index: [asset.orgId,asset.name,asset.assetId]\n" +
			"     │   │           ├─ filters: [{[org1, org1], [style, style], [NULL, ∞)}]\n" +
			"     │   │           └─ columns: [orgid assetid name val]\n" +
			"     │   └─ Filter\n" +
			"     │       ├─ (((dimension.val = 'wide') AND (dimension.name = 'dimension')) AND (dimension.orgId = 'org1'))\n" +
			"     │       └─ TableAlias(dimension)\n" +
			"     │           └─ IndexedTableAccess(asset)\n" +
			"     │               ├─ index: [asset.orgId,asset.name,asset.assetId]\n" +
			"     │               ├─ columns: [orgid assetid name val]\n" +
			"     │               └─ keys: 'org1', 'dimension', style.assetId\n" +
			"     └─ Filter\n" +
			"         ├─ (((color.val = 'blue') AND (color.name = 'color')) AND (color.orgId = 'org1'))\n" +
			"         └─ TableAlias(color)\n" +
			"             └─ IndexedTableAccess(asset)\n" +
			"                 ├─ index: [asset.orgId,asset.name,asset.assetId]\n" +
			"                 ├─ columns: [orgid assetid name val]\n" +
			"                 └─ keys: 'org1', 'color', style.assetId\n" +
			"",
	},
	{
		Query: `select * from mytable alias where i = 1 and s = 'first row'`,
		ExpectedPlan: "Filter\n" +
			" ├─ Eq\n" +
			" │   ├─ alias.s:1!null\n" +
			" │   └─ first row (longtext)\n" +
			" └─ TableAlias(alias)\n" +
			"     └─ IndexedTableAccess(mytable)\n" +
			"         ├─ index: [mytable.i]\n" +
			"         ├─ static: [{[1, 1]}]\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (alias.s = 'first row')\n" +
			" └─ TableAlias(alias)\n" +
			"     └─ IndexedTableAccess(mytable)\n" +
			"         ├─ index: [mytable.i]\n" +
			"         ├─ filters: [{[1, 1]}]\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (alias.s = 'first row')\n" +
			" └─ TableAlias(alias)\n" +
			"     └─ IndexedTableAccess(mytable)\n" +
			"         ├─ index: [mytable.i]\n" +
			"         ├─ filters: [{[1, 1]}]\n" +
			"         └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT col1->'$.key1' from (SELECT JSON_OBJECT('key1', 1, 'key2', 'abc')) as dt(col1);`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [json_extract(dt.col1, '$.key1') as col1->'$.key1']\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: dt\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (1)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Project\n" +
			"         ├─ columns: [json_object('key1',1,'key2','abc') as JSON_OBJECT('key1', 1, 'key2', 'abc')]\n" +
			"         └─ Table\n" +
			"             ├─ name: \n" +
			"             ├─ columns: []\n" +
			"             ├─ colSet: ()\n" +
			"             └─ tableId: 0\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [json_extract(dt.col1, '$.key1') as col1->'$.key1']\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: dt\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Project\n" +
			"         ├─ columns: [json_object('key1',1,'key2','abc') as JSON_OBJECT('key1', 1, 'key2', 'abc')]\n" +
			"         └─ Table\n" +
			"             └─ name: \n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [json_extract(dt.col1, '$.key1') as col1->'$.key1']\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: dt\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Project\n" +
			"         ├─ columns: [json_object('key1',1,'key2','abc') as JSON_OBJECT('key1', 1, 'key2', 'abc')]\n" +
			"         └─ Table\n" +
			"             └─ name: \n" +
			"",
	},
	{
		Query: `SELECT col1->>'$.key1' from (SELECT JSON_OBJECT('key1', 1, 'key2', 'abc')) as dt(col1);`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [json_unquote(json_extract(dt.col1, '$.key1')) as col1->>'$.key1']\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: dt\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (1)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Project\n" +
			"         ├─ columns: [json_object('key1',1,'key2','abc') as JSON_OBJECT('key1', 1, 'key2', 'abc')]\n" +
			"         └─ Table\n" +
			"             ├─ name: \n" +
			"             ├─ columns: []\n" +
			"             ├─ colSet: ()\n" +
			"             └─ tableId: 0\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [json_unquote(json_extract(dt.col1, '$.key1')) as col1->>'$.key1']\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: dt\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Project\n" +
			"         ├─ columns: [json_object('key1',1,'key2','abc') as JSON_OBJECT('key1', 1, 'key2', 'abc')]\n" +
			"         └─ Table\n" +
			"             └─ name: \n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [json_unquote(json_extract(dt.col1, '$.key1')) as col1->>'$.key1']\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: dt\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Project\n" +
			"         ├─ columns: [json_object('key1',1,'key2','abc') as JSON_OBJECT('key1', 1, 'key2', 'abc')]\n" +
			"         └─ Table\n" +
			"             └─ name: \n" +
			"",
	},
	{
		Query: `
			WITH RECURSIVE included_parts(sub_part, part, quantity) AS (
				SELECT sub_part, part, quantity FROM parts WHERE part = (select part from parts where part = 'pie' and sub_part = 'crust')
			  UNION ALL
				SELECT p.sub_part, p.part, p.quantity
				FROM included_parts AS pr, parts AS p
				WHERE p.part = pr.sub_part
			)
			SELECT sub_part, sum(quantity) as total_quantity
			FROM included_parts
			GROUP BY sub_part`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [included_parts.sub_part:1!null, sum(included_parts.quantity):0!null as total_quantity]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: SUM(included_parts.quantity:2!null), included_parts.sub_part:0!null\n" +
			"     ├─ group: included_parts.sub_part:0!null\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: included_parts\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (7-9)\n" +
			"         ├─ tableId: 3\n" +
			"         └─ RecursiveCTE\n" +
			"             └─ Union all\n" +
			"                 ├─ Project\n" +
			"                 │   ├─ columns: [parts.sub_part:1!null, parts.part:0!null, parts.quantity:2!null]\n" +
			"                 │   └─ Project\n" +
			"                 │       ├─ columns: [parts.part:0!null, parts.sub_part:1!null, parts.quantity:2!null]\n" +
			"                 │       └─ MergeJoin\n" +
			"                 │           ├─ cmp: Eq\n" +
			"                 │           │   ├─ parts.part:0!null\n" +
			"                 │           │   └─ parts_1.part:3!null\n" +
			"                 │           ├─ IndexedTableAccess(parts)\n" +
			"                 │           │   ├─ index: [parts.part,parts.sub_part]\n" +
			"                 │           │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 │           │   ├─ colSet: (1-3)\n" +
			"                 │           │   ├─ tableId: 1\n" +
			"                 │           │   └─ Table\n" +
			"                 │           │       ├─ name: parts\n" +
			"                 │           │       └─ columns: [part sub_part quantity]\n" +
			"                 │           └─ Project\n" +
			"                 │               ├─ columns: [parts_1.part:0!null]\n" +
			"                 │               └─ Filter\n" +
			"                 │                   ├─ AND\n" +
			"                 │                   │   ├─ Eq\n" +
			"                 │                   │   │   ├─ parts_1.part:0!null\n" +
			"                 │                   │   │   └─ pie (longtext)\n" +
			"                 │                   │   └─ Eq\n" +
			"                 │                   │       ├─ parts_1.sub_part:1!null\n" +
			"                 │                   │       └─ crust (longtext)\n" +
			"                 │                   └─ TableAlias(parts_1)\n" +
			"                 │                       └─ IndexedTableAccess(parts)\n" +
			"                 │                           ├─ index: [parts.part,parts.sub_part]\n" +
			"                 │                           ├─ static: [{[pie, pie], [NULL, ∞)}]\n" +
			"                 │                           ├─ colSet: (4-6)\n" +
			"                 │                           ├─ tableId: 2\n" +
			"                 │                           └─ Table\n" +
			"                 │                               ├─ name: parts\n" +
			"                 │                               └─ columns: [part sub_part quantity]\n" +
			"                 └─ Project\n" +
			"                     ├─ columns: [p.sub_part:4!null, p.part:3!null, p.quantity:5!null]\n" +
			"                     └─ LookupJoin\n" +
			"                         ├─ TableAlias(pr)\n" +
			"                         │   └─ RecursiveTable(included_parts)\n" +
			"                         └─ TableAlias(p)\n" +
			"                             └─ IndexedTableAccess(parts)\n" +
			"                                 ├─ index: [parts.part,parts.sub_part]\n" +
			"                                 ├─ keys: [pr.sub_part:0!null]\n" +
			"                                 ├─ colSet: (13-15)\n" +
			"                                 ├─ tableId: 6\n" +
			"                                 └─ Table\n" +
			"                                     ├─ name: parts\n" +
			"                                     └─ columns: [part sub_part quantity]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [included_parts.sub_part, sum(included_parts.quantity) as total_quantity]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(SUM(included_parts.quantity), included_parts.sub_part)\n" +
			"     ├─ Grouping(included_parts.sub_part)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: included_parts\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ RecursiveCTE\n" +
			"             └─ Union all\n" +
			"                 ├─ Project\n" +
			"                 │   ├─ columns: [parts.sub_part, parts.part, parts.quantity]\n" +
			"                 │   └─ Project\n" +
			"                 │       ├─ columns: [parts.part, parts.sub_part, parts.quantity]\n" +
			"                 │       └─ MergeJoin\n" +
			"                 │           ├─ cmp: (parts.part = parts_1.part)\n" +
			"                 │           ├─ IndexedTableAccess(parts)\n" +
			"                 │           │   ├─ index: [parts.part,parts.sub_part]\n" +
			"                 │           │   └─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 │           └─ Project\n" +
			"                 │               ├─ columns: [parts_1.part]\n" +
			"                 │               └─ Filter\n" +
			"                 │                   ├─ ((parts_1.part = 'pie') AND (parts_1.sub_part = 'crust'))\n" +
			"                 │                   └─ TableAlias(parts_1)\n" +
			"                 │                       └─ IndexedTableAccess(parts)\n" +
			"                 │                           ├─ index: [parts.part,parts.sub_part]\n" +
			"                 │                           └─ filters: [{[pie, pie], [NULL, ∞)}]\n" +
			"                 └─ Project\n" +
			"                     ├─ columns: [p.sub_part, p.part, p.quantity]\n" +
			"                     └─ LookupJoin\n" +
			"                         ├─ TableAlias(pr)\n" +
			"                         │   └─ RecursiveTable(included_parts)\n" +
			"                         └─ TableAlias(p)\n" +
			"                             └─ IndexedTableAccess(parts)\n" +
			"                                 ├─ index: [parts.part,parts.sub_part]\n" +
			"                                 ├─ columns: [part sub_part quantity]\n" +
			"                                 └─ keys: pr.sub_part\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [included_parts.sub_part, sum(included_parts.quantity) as total_quantity]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(SUM(included_parts.quantity), included_parts.sub_part)\n" +
			"     ├─ Grouping(included_parts.sub_part)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: included_parts\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ RecursiveCTE\n" +
			"             └─ Union all\n" +
			"                 ├─ Project\n" +
			"                 │   ├─ columns: [parts.sub_part, parts.part, parts.quantity]\n" +
			"                 │   └─ Project\n" +
			"                 │       ├─ columns: [parts.part, parts.sub_part, parts.quantity]\n" +
			"                 │       └─ MergeJoin\n" +
			"                 │           ├─ cmp: (parts.part = parts_1.part)\n" +
			"                 │           ├─ IndexedTableAccess(parts)\n" +
			"                 │           │   ├─ index: [parts.part,parts.sub_part]\n" +
			"                 │           │   └─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 │           └─ Project\n" +
			"                 │               ├─ columns: [parts_1.part]\n" +
			"                 │               └─ Filter\n" +
			"                 │                   ├─ ((parts_1.part = 'pie') AND (parts_1.sub_part = 'crust'))\n" +
			"                 │                   └─ TableAlias(parts_1)\n" +
			"                 │                       └─ IndexedTableAccess(parts)\n" +
			"                 │                           ├─ index: [parts.part,parts.sub_part]\n" +
			"                 │                           └─ filters: [{[pie, pie], [NULL, ∞)}]\n" +
			"                 └─ Project\n" +
			"                     ├─ columns: [p.sub_part, p.part, p.quantity]\n" +
			"                     └─ LookupJoin\n" +
			"                         ├─ TableAlias(pr)\n" +
			"                         │   └─ RecursiveTable(included_parts)\n" +
			"                         └─ TableAlias(p)\n" +
			"                             └─ IndexedTableAccess(parts)\n" +
			"                                 ├─ index: [parts.part,parts.sub_part]\n" +
			"                                 ├─ columns: [part sub_part quantity]\n" +
			"                                 └─ keys: pr.sub_part\n" +
			"",
	},
	{
		Query: `
Select x
from (select * from xy) sq1
union all
select u
from (select * from uv) sq2
limit 1
offset 2;`,
		ExpectedPlan: "Union all\n" +
			" ├─ limit: 1\n" +
			" ├─ offset: 2\n" +
			" ├─ Project\n" +
			" │   ├─ columns: [sq1.x:0!null]\n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: sq1\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       ├─ colSet: (3,4)\n" +
			" │       ├─ tableId: 2\n" +
			" │       └─ Table\n" +
			" │           ├─ name: xy\n" +
			" │           ├─ columns: [x y]\n" +
			" │           ├─ colSet: (1,2)\n" +
			" │           └─ tableId: 1\n" +
			" └─ Project\n" +
			"     ├─ columns: [sq2.u:0!null]\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: sq2\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (7,8)\n" +
			"         ├─ tableId: 4\n" +
			"         └─ Table\n" +
			"             ├─ name: uv\n" +
			"             ├─ columns: [u v]\n" +
			"             ├─ colSet: (5,6)\n" +
			"             └─ tableId: 3\n" +
			"",
		ExpectedEstimates: "Union all\n" +
			" ├─ limit: 1\n" +
			" ├─ offset: 2\n" +
			" ├─ Project\n" +
			" │   ├─ columns: [sq1.x]\n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: sq1\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Table\n" +
			" │           ├─ name: xy\n" +
			" │           └─ columns: [x y]\n" +
			" └─ Project\n" +
			"     ├─ columns: [sq2.u]\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: sq2\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Table\n" +
			"             ├─ name: uv\n" +
			"             └─ columns: [u v]\n" +
			"",
		ExpectedAnalysis: "Union all\n" +
			" ├─ limit: 1\n" +
			" ├─ offset: 2\n" +
			" ├─ Project\n" +
			" │   ├─ columns: [sq1.x]\n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: sq1\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Table\n" +
			" │           ├─ name: xy\n" +
			" │           └─ columns: [x y]\n" +
			" └─ Project\n" +
			"     ├─ columns: [sq2.u]\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: sq2\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Table\n" +
			"             ├─ name: uv\n" +
			"             └─ columns: [u v]\n" +
			"",
	},
	{
		Query: `
Select * from (
  With recursive cte(s) as (select 1 union select x from xy join cte on x = s)
  Select * from cte
  Union
  Select x from xy where x in (select * from cte where x = 1)
 ) dt;`,
		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: dt\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (7)\n" +
			" ├─ tableId: 7\n" +
			" └─ Union distinct\n" +
			"     ├─ Project\n" +
			"     │   ├─ columns: [cte.s:0!null as s]\n" +
			"     │   └─ SubqueryAlias\n" +
			"     │       ├─ name: cte\n" +
			"     │       ├─ outerVisibility: false\n" +
			"     │       ├─ isLateral: false\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       ├─ colSet: (2)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ RecursiveCTE\n" +
			"     │           └─ Union distinct\n" +
			"     │               ├─ Project\n" +
			"     │               │   ├─ columns: [1 (tinyint)]\n" +
			"     │               │   └─ Table\n" +
			"     │               │       ├─ name: \n" +
			"     │               │       ├─ columns: []\n" +
			"     │               │       ├─ colSet: ()\n" +
			"     │               │       └─ tableId: 0\n" +
			"     │               └─ Project\n" +
			"     │                   ├─ columns: [xy.x:1!null]\n" +
			"     │                   └─ LookupJoin\n" +
			"     │                       ├─ RecursiveTable(cte)\n" +
			"     │                       └─ IndexedTableAccess(xy)\n" +
			"     │                           ├─ index: [xy.x]\n" +
			"     │                           ├─ keys: [cte.s:0!null]\n" +
			"     │                           ├─ colSet: (3,4)\n" +
			"     │                           ├─ tableId: 3\n" +
			"     │                           └─ Table\n" +
			"     │                               ├─ name: xy\n" +
			"     │                               └─ columns: [x]\n" +
			"     └─ Project\n" +
			"         ├─ columns: [convert\n" +
			"         │   ├─ type: signed\n" +
			"         │   └─ xy.x:0!null\n" +
			"         │   as x]\n" +
			"         └─ Project\n" +
			"             ├─ columns: [xy.x:0!null]\n" +
			"             └─ Filter\n" +
			"                 ├─ InSubquery\n" +
			"                 │   ├─ left: xy.x:0!null\n" +
			"                 │   └─ right: Subquery\n" +
			"                 │       ├─ cacheable: false\n" +
			"                 │       ├─ alias-string: select * from cte where x = 1\n" +
			"                 │       └─ Filter\n" +
			"                 │           ├─ Eq\n" +
			"                 │           │   ├─ xy.x:0!null\n" +
			"                 │           │   └─ 1 (int)\n" +
			"                 │           └─ SubqueryAlias\n" +
			"                 │               ├─ name: cte\n" +
			"                 │               ├─ outerVisibility: true\n" +
			"                 │               ├─ isLateral: false\n" +
			"                 │               ├─ cacheable: true\n" +
			"                 │               ├─ colSet: (2)\n" +
			"                 │               ├─ tableId: 1\n" +
			"                 │               └─ RecursiveCTE\n" +
			"                 │                   └─ Union distinct\n" +
			"                 │                       ├─ Project\n" +
			"                 │                       │   ├─ columns: [1 (tinyint)]\n" +
			"                 │                       │   └─ Table\n" +
			"                 │                       │       ├─ name: \n" +
			"                 │                       │       ├─ columns: []\n" +
			"                 │                       │       ├─ colSet: ()\n" +
			"                 │                       │       └─ tableId: 0\n" +
			"                 │                       └─ Project\n" +
			"                 │                           ├─ columns: [xy.x:3!null]\n" +
			"                 │                           └─ LookupJoin\n" +
			"                 │                               ├─ RecursiveTable(cte)\n" +
			"                 │                               └─ IndexedTableAccess(xy)\n" +
			"                 │                                   ├─ index: [xy.x]\n" +
			"                 │                                   ├─ keys: [cte.s:2!null]\n" +
			"                 │                                   ├─ colSet: (3,4)\n" +
			"                 │                                   ├─ tableId: 3\n" +
			"                 │                                   └─ Table\n" +
			"                 │                                       ├─ name: xy\n" +
			"                 │                                       └─ columns: [x]\n" +
			"                 └─ Table\n" +
			"                     ├─ name: xy\n" +
			"                     ├─ columns: [x y]\n" +
			"                     ├─ colSet: (5,6)\n" +
			"                     └─ tableId: 5\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: dt\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Union distinct\n" +
			"     ├─ Project\n" +
			"     │   ├─ columns: [cte.s as s]\n" +
			"     │   └─ SubqueryAlias\n" +
			"     │       ├─ name: cte\n" +
			"     │       ├─ outerVisibility: false\n" +
			"     │       ├─ isLateral: false\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       └─ RecursiveCTE\n" +
			"     │           └─ Union distinct\n" +
			"     │               ├─ Project\n" +
			"     │               │   ├─ columns: [1]\n" +
			"     │               │   └─ Table\n" +
			"     │               │       └─ name: \n" +
			"     │               └─ Project\n" +
			"     │                   ├─ columns: [xy.x]\n" +
			"     │                   └─ LookupJoin\n" +
			"     │                       ├─ RecursiveTable(cte)\n" +
			"     │                       └─ IndexedTableAccess(xy)\n" +
			"     │                           ├─ index: [xy.x]\n" +
			"     │                           ├─ columns: [x]\n" +
			"     │                           └─ keys: cte.s\n" +
			"     └─ Project\n" +
			"         ├─ columns: [convert(xy.x, signed) as x]\n" +
			"         └─ Project\n" +
			"             ├─ columns: [xy.x]\n" +
			"             └─ Filter\n" +
			"                 ├─ InSubquery\n" +
			"                 │   ├─ left: xy.x\n" +
			"                 │   └─ right: Subquery\n" +
			"                 │       ├─ cacheable: false\n" +
			"                 │       └─ Filter\n" +
			"                 │           ├─ (xy.x = 1)\n" +
			"                 │           └─ SubqueryAlias\n" +
			"                 │               ├─ name: cte\n" +
			"                 │               ├─ outerVisibility: true\n" +
			"                 │               ├─ isLateral: false\n" +
			"                 │               ├─ cacheable: true\n" +
			"                 │               └─ RecursiveCTE\n" +
			"                 │                   └─ Union distinct\n" +
			"                 │                       ├─ Project\n" +
			"                 │                       │   ├─ columns: [1]\n" +
			"                 │                       │   └─ Table\n" +
			"                 │                       │       └─ name: \n" +
			"                 │                       └─ Project\n" +
			"                 │                           ├─ columns: [xy.x]\n" +
			"                 │                           └─ LookupJoin\n" +
			"                 │                               ├─ RecursiveTable(cte)\n" +
			"                 │                               └─ IndexedTableAccess(xy)\n" +
			"                 │                                   ├─ index: [xy.x]\n" +
			"                 │                                   ├─ columns: [x]\n" +
			"                 │                                   └─ keys: cte.s\n" +
			"                 └─ Table\n" +
			"                     └─ name: xy\n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: dt\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Union distinct\n" +
			"     ├─ Project\n" +
			"     │   ├─ columns: [cte.s as s]\n" +
			"     │   └─ SubqueryAlias\n" +
			"     │       ├─ name: cte\n" +
			"     │       ├─ outerVisibility: false\n" +
			"     │       ├─ isLateral: false\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       └─ RecursiveCTE\n" +
			"     │           └─ Union distinct\n" +
			"     │               ├─ Project\n" +
			"     │               │   ├─ columns: [1]\n" +
			"     │               │   └─ Table\n" +
			"     │               │       └─ name: \n" +
			"     │               └─ Project\n" +
			"     │                   ├─ columns: [xy.x]\n" +
			"     │                   └─ LookupJoin\n" +
			"     │                       ├─ RecursiveTable(cte)\n" +
			"     │                       └─ IndexedTableAccess(xy)\n" +
			"     │                           ├─ index: [xy.x]\n" +
			"     │                           ├─ columns: [x]\n" +
			"     │                           └─ keys: cte.s\n" +
			"     └─ Project\n" +
			"         ├─ columns: [convert(xy.x, signed) as x]\n" +
			"         └─ Project\n" +
			"             ├─ columns: [xy.x]\n" +
			"             └─ Filter\n" +
			"                 ├─ InSubquery\n" +
			"                 │   ├─ left: xy.x\n" +
			"                 │   └─ right: Subquery\n" +
			"                 │       ├─ cacheable: false\n" +
			"                 │       └─ Filter\n" +
			"                 │           ├─ (xy.x = 1)\n" +
			"                 │           └─ SubqueryAlias\n" +
			"                 │               ├─ name: cte\n" +
			"                 │               ├─ outerVisibility: true\n" +
			"                 │               ├─ isLateral: false\n" +
			"                 │               ├─ cacheable: true\n" +
			"                 │               └─ RecursiveCTE\n" +
			"                 │                   └─ Union distinct\n" +
			"                 │                       ├─ Project\n" +
			"                 │                       │   ├─ columns: [1]\n" +
			"                 │                       │   └─ Table\n" +
			"                 │                       │       └─ name: \n" +
			"                 │                       └─ Project\n" +
			"                 │                           ├─ columns: [xy.x]\n" +
			"                 │                           └─ LookupJoin\n" +
			"                 │                               ├─ RecursiveTable(cte)\n" +
			"                 │                               └─ IndexedTableAccess(xy)\n" +
			"                 │                                   ├─ index: [xy.x]\n" +
			"                 │                                   ├─ columns: [x]\n" +
			"                 │                                   └─ keys: cte.s\n" +
			"                 └─ Table\n" +
			"                     └─ name: xy\n" +
			"",
	},
	{
		Query: `
Select * from (
  With recursive cte(s) as (select 1 union select x from xy join cte on x = s)
  Select * from cte
  Union
  Select x from xy where x in (select * from cte)
 ) dt;`,
		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: dt\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (7)\n" +
			" ├─ tableId: 7\n" +
			" └─ Union distinct\n" +
			"     ├─ Project\n" +
			"     │   ├─ columns: [cte.s:0!null as s]\n" +
			"     │   └─ SubqueryAlias\n" +
			"     │       ├─ name: cte\n" +
			"     │       ├─ outerVisibility: false\n" +
			"     │       ├─ isLateral: false\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       ├─ colSet: (2)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ RecursiveCTE\n" +
			"     │           └─ Union distinct\n" +
			"     │               ├─ Project\n" +
			"     │               │   ├─ columns: [1 (tinyint)]\n" +
			"     │               │   └─ Table\n" +
			"     │               │       ├─ name: \n" +
			"     │               │       ├─ columns: []\n" +
			"     │               │       ├─ colSet: ()\n" +
			"     │               │       └─ tableId: 0\n" +
			"     │               └─ Project\n" +
			"     │                   ├─ columns: [xy.x:1!null]\n" +
			"     │                   └─ LookupJoin\n" +
			"     │                       ├─ RecursiveTable(cte)\n" +
			"     │                       └─ IndexedTableAccess(xy)\n" +
			"     │                           ├─ index: [xy.x]\n" +
			"     │                           ├─ keys: [cte.s:0!null]\n" +
			"     │                           ├─ colSet: (3,4)\n" +
			"     │                           ├─ tableId: 3\n" +
			"     │                           └─ Table\n" +
			"     │                               ├─ name: xy\n" +
			"     │                               └─ columns: [x]\n" +
			"     └─ Project\n" +
			"         ├─ columns: [convert\n" +
			"         │   ├─ type: signed\n" +
			"         │   └─ xy.x:0!null\n" +
			"         │   as x]\n" +
			"         └─ Project\n" +
			"             ├─ columns: [xy.x:1!null]\n" +
			"             └─ LookupJoin\n" +
			"                 ├─ Eq\n" +
			"                 │   ├─ xy.x:1!null\n" +
			"                 │   └─ cte.s:0!null\n" +
			"                 ├─ Distinct\n" +
			"                 │   └─ SubqueryAlias\n" +
			"                 │       ├─ name: cte\n" +
			"                 │       ├─ outerVisibility: false\n" +
			"                 │       ├─ isLateral: false\n" +
			"                 │       ├─ cacheable: true\n" +
			"                 │       ├─ colSet: (2)\n" +
			"                 │       ├─ tableId: 1\n" +
			"                 │       └─ RecursiveCTE\n" +
			"                 │           └─ Union distinct\n" +
			"                 │               ├─ Project\n" +
			"                 │               │   ├─ columns: [1 (tinyint)]\n" +
			"                 │               │   └─ Table\n" +
			"                 │               │       ├─ name: \n" +
			"                 │               │       ├─ columns: []\n" +
			"                 │               │       ├─ colSet: ()\n" +
			"                 │               │       └─ tableId: 0\n" +
			"                 │               └─ Project\n" +
			"                 │                   ├─ columns: [xy.x:1!null]\n" +
			"                 │                   └─ LookupJoin\n" +
			"                 │                       ├─ RecursiveTable(cte)\n" +
			"                 │                       └─ IndexedTableAccess(xy)\n" +
			"                 │                           ├─ index: [xy.x]\n" +
			"                 │                           ├─ keys: [cte.s:0!null]\n" +
			"                 │                           ├─ colSet: (3,4)\n" +
			"                 │                           ├─ tableId: 3\n" +
			"                 │                           └─ Table\n" +
			"                 │                               ├─ name: xy\n" +
			"                 │                               └─ columns: [x]\n" +
			"                 └─ IndexedTableAccess(xy)\n" +
			"                     ├─ index: [xy.x]\n" +
			"                     ├─ keys: [cte.s:0!null]\n" +
			"                     ├─ colSet: (5,6)\n" +
			"                     ├─ tableId: 5\n" +
			"                     └─ Table\n" +
			"                         ├─ name: xy\n" +
			"                         └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: dt\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Union distinct\n" +
			"     ├─ Project\n" +
			"     │   ├─ columns: [cte.s as s]\n" +
			"     │   └─ SubqueryAlias\n" +
			"     │       ├─ name: cte\n" +
			"     │       ├─ outerVisibility: false\n" +
			"     │       ├─ isLateral: false\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       └─ RecursiveCTE\n" +
			"     │           └─ Union distinct\n" +
			"     │               ├─ Project\n" +
			"     │               │   ├─ columns: [1]\n" +
			"     │               │   └─ Table\n" +
			"     │               │       └─ name: \n" +
			"     │               └─ Project\n" +
			"     │                   ├─ columns: [xy.x]\n" +
			"     │                   └─ LookupJoin\n" +
			"     │                       ├─ RecursiveTable(cte)\n" +
			"     │                       └─ IndexedTableAccess(xy)\n" +
			"     │                           ├─ index: [xy.x]\n" +
			"     │                           ├─ columns: [x]\n" +
			"     │                           └─ keys: cte.s\n" +
			"     └─ Project\n" +
			"         ├─ columns: [convert(xy.x, signed) as x]\n" +
			"         └─ Project\n" +
			"             ├─ columns: [xy.x]\n" +
			"             └─ LookupJoin\n" +
			"                 ├─ (xy.x = cte.s)\n" +
			"                 ├─ Distinct\n" +
			"                 │   └─ SubqueryAlias\n" +
			"                 │       ├─ name: cte\n" +
			"                 │       ├─ outerVisibility: false\n" +
			"                 │       ├─ isLateral: false\n" +
			"                 │       ├─ cacheable: true\n" +
			"                 │       └─ RecursiveCTE\n" +
			"                 │           └─ Union distinct\n" +
			"                 │               ├─ Project\n" +
			"                 │               │   ├─ columns: [1]\n" +
			"                 │               │   └─ Table\n" +
			"                 │               │       └─ name: \n" +
			"                 │               └─ Project\n" +
			"                 │                   ├─ columns: [xy.x]\n" +
			"                 │                   └─ LookupJoin\n" +
			"                 │                       ├─ RecursiveTable(cte)\n" +
			"                 │                       └─ IndexedTableAccess(xy)\n" +
			"                 │                           ├─ index: [xy.x]\n" +
			"                 │                           ├─ columns: [x]\n" +
			"                 │                           └─ keys: cte.s\n" +
			"                 └─ IndexedTableAccess(xy)\n" +
			"                     ├─ index: [xy.x]\n" +
			"                     └─ keys: cte.s\n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: dt\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Union distinct\n" +
			"     ├─ Project\n" +
			"     │   ├─ columns: [cte.s as s]\n" +
			"     │   └─ SubqueryAlias\n" +
			"     │       ├─ name: cte\n" +
			"     │       ├─ outerVisibility: false\n" +
			"     │       ├─ isLateral: false\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       └─ RecursiveCTE\n" +
			"     │           └─ Union distinct\n" +
			"     │               ├─ Project\n" +
			"     │               │   ├─ columns: [1]\n" +
			"     │               │   └─ Table\n" +
			"     │               │       └─ name: \n" +
			"     │               └─ Project\n" +
			"     │                   ├─ columns: [xy.x]\n" +
			"     │                   └─ LookupJoin\n" +
			"     │                       ├─ RecursiveTable(cte)\n" +
			"     │                       └─ IndexedTableAccess(xy)\n" +
			"     │                           ├─ index: [xy.x]\n" +
			"     │                           ├─ columns: [x]\n" +
			"     │                           └─ keys: cte.s\n" +
			"     └─ Project\n" +
			"         ├─ columns: [convert(xy.x, signed) as x]\n" +
			"         └─ Project\n" +
			"             ├─ columns: [xy.x]\n" +
			"             └─ LookupJoin\n" +
			"                 ├─ (xy.x = cte.s)\n" +
			"                 ├─ Distinct\n" +
			"                 │   └─ SubqueryAlias\n" +
			"                 │       ├─ name: cte\n" +
			"                 │       ├─ outerVisibility: false\n" +
			"                 │       ├─ isLateral: false\n" +
			"                 │       ├─ cacheable: true\n" +
			"                 │       └─ RecursiveCTE\n" +
			"                 │           └─ Union distinct\n" +
			"                 │               ├─ Project\n" +
			"                 │               │   ├─ columns: [1]\n" +
			"                 │               │   └─ Table\n" +
			"                 │               │       └─ name: \n" +
			"                 │               └─ Project\n" +
			"                 │                   ├─ columns: [xy.x]\n" +
			"                 │                   └─ LookupJoin\n" +
			"                 │                       ├─ RecursiveTable(cte)\n" +
			"                 │                       └─ IndexedTableAccess(xy)\n" +
			"                 │                           ├─ index: [xy.x]\n" +
			"                 │                           ├─ columns: [x]\n" +
			"                 │                           └─ keys: cte.s\n" +
			"                 └─ IndexedTableAccess(xy)\n" +
			"                     ├─ index: [xy.x]\n" +
			"                     └─ keys: cte.s\n" +
			"",
	},
	{
		Query: `select /*+ LOOKUP_JOIN(xy,scalarSubq0) */ * from xy where x in (select a from ab);`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [xy.x:0!null, xy.y:1]\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ xy.x:0!null\n" +
			"     │   └─ ab.a:2!null\n" +
			"     ├─ IndexedTableAccess(xy)\n" +
			"     │   ├─ index: [xy.x]\n" +
			"     │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │   ├─ colSet: (1,2)\n" +
			"     │   ├─ tableId: 1\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: xy\n" +
			"     │       └─ columns: [x y]\n" +
			"     └─ Project\n" +
			"         ├─ columns: [ab.a:0!null]\n" +
			"         └─ IndexedTableAccess(ab)\n" +
			"             ├─ index: [ab.a]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (3,4)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: ab\n" +
			"                 └─ columns: [a b]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [xy.x, xy.y]\n" +
			" └─ MergeJoin (estimated cost=2030.000 rows=1000)\n" +
			"     ├─ cmp: (xy.x = ab.a)\n" +
			"     ├─ IndexedTableAccess(xy)\n" +
			"     │   ├─ index: [xy.x]\n" +
			"     │   └─ filters: [{[NULL, ∞)}]\n" +
			"     └─ Project\n" +
			"         ├─ columns: [ab.a]\n" +
			"         └─ IndexedTableAccess(ab)\n" +
			"             ├─ index: [ab.a]\n" +
			"             └─ filters: [{[NULL, ∞)}]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [xy.x, xy.y]\n" +
			" └─ MergeJoin (estimated cost=2030.000 rows=1000) (actual rows=4 loops=1)\n" +
			"     ├─ cmp: (xy.x = ab.a)\n" +
			"     ├─ IndexedTableAccess(xy)\n" +
			"     │   ├─ index: [xy.x]\n" +
			"     │   └─ filters: [{[NULL, ∞)}]\n" +
			"     └─ Project\n" +
			"         ├─ columns: [ab.a]\n" +
			"         └─ IndexedTableAccess(ab)\n" +
			"             ├─ index: [ab.a]\n" +
			"             └─ filters: [{[NULL, ∞)}]\n" +
			"",
	},
	{
		Query: `select /*+ LOOKUP_JOIN(xy,ab) MERGE_JOIN(ab,uv) JOIN_ORDER(ab,uv,xy) */ * from xy where EXISTS (select 1 from ab join uv on a = u where x = a);`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [xy.x:1!null, xy.y:2]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ xy.x:1!null\n" +
			"     │   └─ ab.a:0!null\n" +
			"     ├─ OrderedDistinct\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [ab.a:0!null]\n" +
			"     │       └─ MergeJoin\n" +
			"     │           ├─ cmp: Eq\n" +
			"     │           │   ├─ ab.a:0!null\n" +
			"     │           │   └─ uv.u:1!null\n" +
			"     │           ├─ IndexedTableAccess(ab)\n" +
			"     │           │   ├─ index: [ab.a]\n" +
			"     │           │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │           │   ├─ colSet: (3,4)\n" +
			"     │           │   ├─ tableId: 2\n" +
			"     │           │   └─ Table\n" +
			"     │           │       ├─ name: ab\n" +
			"     │           │       └─ columns: [a]\n" +
			"     │           └─ IndexedTableAccess(uv)\n" +
			"     │               ├─ index: [uv.u]\n" +
			"     │               ├─ static: [{[NULL, ∞)}]\n" +
			"     │               ├─ colSet: (5,6)\n" +
			"     │               ├─ tableId: 3\n" +
			"     │               └─ Table\n" +
			"     │                   ├─ name: uv\n" +
			"     │                   └─ columns: [u]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ keys: [ab.a:0!null]\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [xy.x, xy.y]\n" +
			" └─ LookupJoin (estimated cost=13.200 rows=4)\n" +
			"     ├─ (xy.x = ab.a)\n" +
			"     ├─ OrderedDistinct\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [ab.a]\n" +
			"     │       └─ MergeJoin\n" +
			"     │           ├─ cmp: (ab.a = uv.u)\n" +
			"     │           ├─ IndexedTableAccess(ab)\n" +
			"     │           │   ├─ index: [ab.a]\n" +
			"     │           │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           │   └─ columns: [a]\n" +
			"     │           └─ IndexedTableAccess(uv)\n" +
			"     │               ├─ index: [uv.u]\n" +
			"     │               ├─ filters: [{[NULL, ∞)}]\n" +
			"     │               └─ columns: [u]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         └─ keys: ab.a\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [xy.x, xy.y]\n" +
			" └─ LookupJoin (estimated cost=13.200 rows=4) (actual rows=4 loops=1)\n" +
			"     ├─ (xy.x = ab.a)\n" +
			"     ├─ OrderedDistinct\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [ab.a]\n" +
			"     │       └─ MergeJoin\n" +
			"     │           ├─ cmp: (ab.a = uv.u)\n" +
			"     │           ├─ IndexedTableAccess(ab)\n" +
			"     │           │   ├─ index: [ab.a]\n" +
			"     │           │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           │   └─ columns: [a]\n" +
			"     │           └─ IndexedTableAccess(uv)\n" +
			"     │               ├─ index: [uv.u]\n" +
			"     │               ├─ filters: [{[NULL, ∞)}]\n" +
			"     │               └─ columns: [u]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         └─ keys: ab.a\n" +
			"",
	},
	{
		Query: `select * from uv where not exists (select * from xy where not exists (select * from xy where not(u = 1)))`,
		ExpectedPlan: "AntiJoin\n" +
			" ├─ Or\n" +
			" │   ├─ NOT\n" +
			" │   │   └─ EXISTS Subquery\n" +
			" │   │       ├─ cacheable: true\n" +
			" │   │       ├─ alias-string: select * from xy where not (u = 1)\n" +
			" │   │       └─ Table\n" +
			" │   │           ├─ name: xy\n" +
			" │   │           ├─ columns: [x y]\n" +
			" │   │           ├─ colSet: (5,6)\n" +
			" │   │           └─ tableId: 3\n" +
			" │   └─ Eq\n" +
			" │       ├─ uv.u:0!null\n" +
			" │       └─ 1 (int)\n" +
			" ├─ ProcessTable\n" +
			" │   └─ Table\n" +
			" │       ├─ name: uv\n" +
			" │       └─ columns: [u v]\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: xy\n" +
			"         └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "AntiJoin (estimated cost=2024.000 rows=5)\n" +
			" ├─ ((NOT(EXISTS Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Table\n" +
			" │       ├─ name: xy\n" +
			" │       └─ columns: [x y]\n" +
			" │  )) OR (uv.u = 1))\n" +
			" ├─ Table\n" +
			" │   └─ name: uv\n" +
			" └─ Table\n" +
			"     └─ name: xy\n" +
			"",
		ExpectedAnalysis: "AntiJoin (estimated cost=2024.000 rows=5) (actual rows=3 loops=1)\n" +
			" ├─ ((NOT(EXISTS Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Table\n" +
			" │       ├─ name: xy\n" +
			" │       └─ columns: [x y]\n" +
			" │  )) OR (uv.u = 1))\n" +
			" ├─ Table\n" +
			" │   └─ name: uv\n" +
			" └─ Table\n" +
			"     └─ name: xy\n" +
			"",
	},
	{
		Query: `select x from xy where x in (
	select (select u from uv where u = sq.p)
    from (select p from pq) sq);
`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [xy.x:0!null]\n" +
			" └─ Filter\n" +
			"     ├─ InSubquery\n" +
			"     │   ├─ left: xy.x:0!null\n" +
			"     │   └─ right: Subquery\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       ├─ alias-string: select (select u from uv where u = sq.p) from (select p from pq) as sq\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [Subquery\n" +
			"     │           │   ├─ cacheable: false\n" +
			"     │           │   ├─ alias-string: select u from uv where u = sq.p\n" +
			"     │           │   └─ Filter\n" +
			"     │           │       ├─ Eq\n" +
			"     │           │       │   ├─ uv.u:3!null\n" +
			"     │           │       │   └─ sq.p:2!null\n" +
			"     │           │       └─ IndexedTableAccess(uv)\n" +
			"     │           │           ├─ index: [uv.u]\n" +
			"     │           │           ├─ keys: [sq.p:2!null]\n" +
			"     │           │           ├─ colSet: (6,7)\n" +
			"     │           │           ├─ tableId: 4\n" +
			"     │           │           └─ Table\n" +
			"     │           │               ├─ name: uv\n" +
			"     │           │               └─ columns: [u]\n" +
			"     │           │   as (select u from uv where u = sq.p)]\n" +
			"     │           └─ SubqueryAlias\n" +
			"     │               ├─ name: sq\n" +
			"     │               ├─ outerVisibility: true\n" +
			"     │               ├─ isLateral: false\n" +
			"     │               ├─ cacheable: true\n" +
			"     │               ├─ colSet: (5)\n" +
			"     │               ├─ tableId: 3\n" +
			"     │               └─ Table\n" +
			"     │                   ├─ name: pq\n" +
			"     │                   ├─ columns: [p]\n" +
			"     │                   ├─ colSet: (3,4)\n" +
			"     │                   └─ tableId: 2\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [xy.x]\n" +
			" └─ Filter\n" +
			"     ├─ InSubquery\n" +
			"     │   ├─ left: xy.x\n" +
			"     │   └─ right: Subquery\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [Subquery\n" +
			"     │           │   ├─ cacheable: false\n" +
			"     │           │   └─ Filter\n" +
			"     │           │       ├─ (uv.u = sq.p)\n" +
			"     │           │       └─ IndexedTableAccess(uv)\n" +
			"     │           │           ├─ index: [uv.u]\n" +
			"     │           │           ├─ columns: [u]\n" +
			"     │           │           └─ keys: sq.p\n" +
			"     │           │   as (select u from uv where u = sq.p)]\n" +
			"     │           └─ SubqueryAlias\n" +
			"     │               ├─ name: sq\n" +
			"     │               ├─ outerVisibility: true\n" +
			"     │               ├─ isLateral: false\n" +
			"     │               ├─ cacheable: true\n" +
			"     │               └─ Table\n" +
			"     │                   ├─ name: pq\n" +
			"     │                   └─ columns: [p]\n" +
			"     └─ Table\n" +
			"         └─ name: xy\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [xy.x]\n" +
			" └─ Filter\n" +
			"     ├─ InSubquery\n" +
			"     │   ├─ left: xy.x\n" +
			"     │   └─ right: Subquery\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [Subquery\n" +
			"     │           │   ├─ cacheable: false\n" +
			"     │           │   └─ Filter\n" +
			"     │           │       ├─ (uv.u = sq.p)\n" +
			"     │           │       └─ IndexedTableAccess(uv)\n" +
			"     │           │           ├─ index: [uv.u]\n" +
			"     │           │           ├─ columns: [u]\n" +
			"     │           │           └─ keys: sq.p\n" +
			"     │           │   as (select u from uv where u = sq.p)]\n" +
			"     │           └─ SubqueryAlias\n" +
			"     │               ├─ name: sq\n" +
			"     │               ├─ outerVisibility: true\n" +
			"     │               ├─ isLateral: false\n" +
			"     │               ├─ cacheable: true\n" +
			"     │               └─ Table\n" +
			"     │                   ├─ name: pq\n" +
			"     │                   └─ columns: [p]\n" +
			"     └─ Table\n" +
			"         └─ name: xy\n" +
			"",
	},
	{
		Query: `SELECT mytable.s FROM mytable WHERE mytable.i = (SELECT othertable.i2 FROM othertable WHERE othertable.s2 = 'second')`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mytable.s:2!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ mytable.i:1!null\n" +
			"     │   └─ othertable.i2:0!null\n" +
			"     ├─ Distinct\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [othertable.i2:1!null]\n" +
			"     │       └─ Filter\n" +
			"     │           ├─ Eq\n" +
			"     │           │   ├─ othertable.s2:0!null\n" +
			"     │           │   └─ second (longtext)\n" +
			"     │           └─ IndexedTableAccess(othertable)\n" +
			"     │               ├─ index: [othertable.s2]\n" +
			"     │               ├─ static: [{[second, second]}]\n" +
			"     │               ├─ colSet: (3,4)\n" +
			"     │               ├─ tableId: 2\n" +
			"     │               └─ Table\n" +
			"     │                   ├─ name: othertable\n" +
			"     │                   └─ columns: [s2 i2]\n" +
			"     └─ IndexedTableAccess(mytable)\n" +
			"         ├─ index: [mytable.i]\n" +
			"         ├─ keys: [othertable.i2:0!null]\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mytable.s]\n" +
			" └─ LookupJoin (estimated cost=3.300 rows=0)\n" +
			"     ├─ (mytable.i = othertable.i2)\n" +
			"     ├─ Distinct\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [othertable.i2]\n" +
			"     │       └─ Filter\n" +
			"     │           ├─ (othertable.s2 = 'second')\n" +
			"     │           └─ IndexedTableAccess(othertable)\n" +
			"     │               ├─ index: [othertable.s2]\n" +
			"     │               └─ filters: [{[second, second]}]\n" +
			"     └─ IndexedTableAccess(mytable)\n" +
			"         ├─ index: [mytable.i]\n" +
			"         └─ keys: othertable.i2\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mytable.s]\n" +
			" └─ LookupJoin (estimated cost=3.300 rows=0) (actual rows=1 loops=1)\n" +
			"     ├─ (mytable.i = othertable.i2)\n" +
			"     ├─ Distinct\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [othertable.i2]\n" +
			"     │       └─ Filter\n" +
			"     │           ├─ (othertable.s2 = 'second')\n" +
			"     │           └─ IndexedTableAccess(othertable)\n" +
			"     │               ├─ index: [othertable.s2]\n" +
			"     │               └─ filters: [{[second, second]}]\n" +
			"     └─ IndexedTableAccess(mytable)\n" +
			"         ├─ index: [mytable.i]\n" +
			"         └─ keys: othertable.i2\n" +
			"",
	},
	{
		Query: `SELECT mytable.s FROM mytable WHERE mytable.i IN (SELECT othertable.i2 FROM othertable) ORDER BY mytable.i ASC`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mytable.s:1!null]\n" +
			" └─ Sort(mytable.i:0!null ASC nullsFirst)\n" +
			"     └─ SemiJoin\n" +
			"         ├─ Eq\n" +
			"         │   ├─ mytable.i:0!null\n" +
			"         │   └─ othertable.i2:2!null\n" +
			"         ├─ ProcessTable\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: mytable\n" +
			"         │       └─ columns: [i s]\n" +
			"         └─ Project\n" +
			"             ├─ columns: [othertable.i2:1!null]\n" +
			"             └─ ProcessTable\n" +
			"                 └─ Table\n" +
			"                     ├─ name: othertable\n" +
			"                     └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mytable.s]\n" +
			" └─ Sort(mytable.i ASC)\n" +
			"     └─ SemiJoin\n" +
			"         ├─ (mytable.i = othertable.i2)\n" +
			"         ├─ Table\n" +
			"         │   └─ name: mytable\n" +
			"         └─ Project\n" +
			"             ├─ columns: [othertable.i2]\n" +
			"             └─ Table\n" +
			"                 └─ name: othertable\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mytable.s]\n" +
			" └─ Sort(mytable.i ASC)\n" +
			"     └─ SemiJoin\n" +
			"         ├─ (mytable.i = othertable.i2)\n" +
			"         ├─ Table\n" +
			"         │   └─ name: mytable\n" +
			"         └─ Project\n" +
			"             ├─ columns: [othertable.i2]\n" +
			"             └─ Table\n" +
			"                 └─ name: othertable\n" +
			"",
	},
	{
		Query: `select /*+ JOIN_ORDER(rs, xy) */ * from rs left join xy on y = s order by 1, 3`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [rs.r:0!null, rs.s:1, xy.x:2!null, xy.y:3]\n" +
			" └─ Sort(rs.r:0!null ASC nullsFirst, xy.x:2!null ASC nullsFirst)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ rs.s:1\n" +
			"         │   └─ xy.y:3\n" +
			"         ├─ IndexedTableAccess(rs)\n" +
			"         │   ├─ index: [rs.s]\n" +
			"         │   ├─ static: [{[NULL, ∞)}]\n" +
			"         │   ├─ colSet: (1,2)\n" +
			"         │   ├─ tableId: 1\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: rs\n" +
			"         │       └─ columns: [r s]\n" +
			"         └─ IndexedTableAccess(xy)\n" +
			"             ├─ index: [xy.y]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (3,4)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: xy\n" +
			"                 └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [rs.r, rs.s, xy.x, xy.y]\n" +
			" └─ Sort(rs.r ASC, xy.x ASC)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: (rs.s = xy.y)\n" +
			"         ├─ IndexedTableAccess(rs)\n" +
			"         │   ├─ index: [rs.s]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [r s]\n" +
			"         └─ IndexedTableAccess(xy)\n" +
			"             ├─ index: [xy.y]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [x y]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [rs.r, rs.s, xy.x, xy.y]\n" +
			" └─ Sort(rs.r ASC, xy.x ASC)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: (rs.s = xy.y)\n" +
			"         ├─ IndexedTableAccess(rs)\n" +
			"         │   ├─ index: [rs.s]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [r s]\n" +
			"         └─ IndexedTableAccess(xy)\n" +
			"             ├─ index: [xy.y]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [x y]\n" +
			"",
	},
	{
		Query: `select * from uv join (select /*+ JOIN_ORDER(ab, xy) */ * from ab join xy on y = a) r on u = r.a`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [uv.u:4!null, uv.v:5, r.a:0!null, r.b:1, r.x:2!null, r.y:3]\n" +
			" └─ HashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ uv.u:4!null\n" +
			"     │   └─ r.a:0!null\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: r\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   ├─ colSet: (7-10)\n" +
			"     │   ├─ tableId: 4\n" +
			"     │   └─ MergeJoin\n" +
			"     │       ├─ cmp: Eq\n" +
			"     │       │   ├─ ab.a:0!null\n" +
			"     │       │   └─ xy.y:3\n" +
			"     │       ├─ IndexedTableAccess(ab)\n" +
			"     │       │   ├─ index: [ab.a]\n" +
			"     │       │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │       │   ├─ colSet: (3,4)\n" +
			"     │       │   ├─ tableId: 2\n" +
			"     │       │   └─ Table\n" +
			"     │       │       ├─ name: ab\n" +
			"     │       │       └─ columns: [a b]\n" +
			"     │       └─ IndexedTableAccess(xy)\n" +
			"     │           ├─ index: [xy.y]\n" +
			"     │           ├─ static: [{[NULL, ∞)}]\n" +
			"     │           ├─ colSet: (5,6)\n" +
			"     │           ├─ tableId: 3\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: xy\n" +
			"     │               └─ columns: [x y]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(r.a:0!null)\n" +
			"         ├─ right-key: TUPLE(uv.u:0!null)\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: uv\n" +
			"                 └─ columns: [u v]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [uv.u, uv.v, r.a, r.b, r.x, r.y]\n" +
			" └─ HashJoin (estimated cost=114.000 rows=100)\n" +
			"     ├─ (uv.u = r.a)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: r\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ MergeJoin\n" +
			"     │       ├─ cmp: (ab.a = xy.y)\n" +
			"     │       ├─ IndexedTableAccess(ab)\n" +
			"     │       │   ├─ index: [ab.a]\n" +
			"     │       │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │       │   └─ columns: [a b]\n" +
			"     │       └─ IndexedTableAccess(xy)\n" +
			"     │           ├─ index: [xy.y]\n" +
			"     │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           └─ columns: [x y]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (r.a)\n" +
			"         ├─ right-key: (uv.u)\n" +
			"         └─ Table\n" +
			"             ├─ name: uv\n" +
			"             └─ columns: [u v]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [uv.u, uv.v, r.a, r.b, r.x, r.y]\n" +
			" └─ HashJoin (estimated cost=114.000 rows=100) (actual rows=4 loops=1)\n" +
			"     ├─ (uv.u = r.a)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: r\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ MergeJoin\n" +
			"     │       ├─ cmp: (ab.a = xy.y)\n" +
			"     │       ├─ IndexedTableAccess(ab)\n" +
			"     │       │   ├─ index: [ab.a]\n" +
			"     │       │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │       │   └─ columns: [a b]\n" +
			"     │       └─ IndexedTableAccess(xy)\n" +
			"     │           ├─ index: [xy.y]\n" +
			"     │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           └─ columns: [x y]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (r.a)\n" +
			"         ├─ right-key: (uv.u)\n" +
			"         └─ Table\n" +
			"             ├─ name: uv\n" +
			"             └─ columns: [u v]\n" +
			"",
	},
	{
		Query: `select /*+ JOIN_ORDER(ab, xy) */ * from ab join xy on y = a`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ ab.a:0!null\n" +
			" │   └─ xy.y:3\n" +
			" ├─ IndexedTableAccess(ab)\n" +
			" │   ├─ index: [ab.a]\n" +
			" │   ├─ static: [{[NULL, ∞)}]\n" +
			" │   ├─ colSet: (1,2)\n" +
			" │   ├─ tableId: 1\n" +
			" │   └─ Table\n" +
			" │       ├─ name: ab\n" +
			" │       └─ columns: [a b]\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.y]\n" +
			"     ├─ static: [{[NULL, ∞)}]\n" +
			"     ├─ colSet: (3,4)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Table\n" +
			"         ├─ name: xy\n" +
			"         └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=2030.000 rows=1000)\n" +
			" ├─ cmp: (ab.a = xy.y)\n" +
			" ├─ IndexedTableAccess(ab)\n" +
			" │   ├─ index: [ab.a]\n" +
			" │   ├─ filters: [{[NULL, ∞)}]\n" +
			" │   └─ columns: [a b]\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.y]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [x y]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=2030.000 rows=1000) (actual rows=4 loops=1)\n" +
			" ├─ cmp: (ab.a = xy.y)\n" +
			" ├─ IndexedTableAccess(ab)\n" +
			" │   ├─ index: [ab.a]\n" +
			" │   ├─ filters: [{[NULL, ∞)}]\n" +
			" │   └─ columns: [a b]\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.y]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [x y]\n" +
			"",
	},
	{
		Query: `select /*+ JOIN_ORDER(rs, xy) */ * from rs join xy on y = s order by 1, 3`,
		ExpectedPlan: "Sort(rs.r:0!null ASC nullsFirst, xy.x:2!null ASC nullsFirst)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ rs.s:1\n" +
			"     │   └─ xy.y:3\n" +
			"     ├─ IndexedTableAccess(rs)\n" +
			"     │   ├─ index: [rs.s]\n" +
			"     │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │   ├─ colSet: (1,2)\n" +
			"     │   ├─ tableId: 1\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: rs\n" +
			"     │       └─ columns: [r s]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.y]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (3,4)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Sort(rs.r ASC, xy.x ASC)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: (rs.s = xy.y)\n" +
			"     ├─ IndexedTableAccess(rs)\n" +
			"     │   ├─ index: [rs.s]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [r s]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.y]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [x y]\n" +
			"",
		ExpectedAnalysis: "Sort(rs.r ASC, xy.x ASC)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: (rs.s = xy.y)\n" +
			"     ├─ IndexedTableAccess(rs)\n" +
			"     │   ├─ index: [rs.s]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [r s]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.y]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [x y]\n" +
			"",
	},
	{
		Query: `select /*+ JOIN_ORDER(rs, xy) */ * from rs join xy on y = s`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ rs.s:1\n" +
			" │   └─ xy.y:3\n" +
			" ├─ IndexedTableAccess(rs)\n" +
			" │   ├─ index: [rs.s]\n" +
			" │   ├─ static: [{[NULL, ∞)}]\n" +
			" │   ├─ colSet: (1,2)\n" +
			" │   ├─ tableId: 1\n" +
			" │   └─ Table\n" +
			" │       ├─ name: rs\n" +
			" │       └─ columns: [r s]\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.y]\n" +
			"     ├─ static: [{[NULL, ∞)}]\n" +
			"     ├─ colSet: (3,4)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Table\n" +
			"         ├─ name: xy\n" +
			"         └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=2030.000 rows=1000)\n" +
			" ├─ cmp: (rs.s = xy.y)\n" +
			" ├─ IndexedTableAccess(rs)\n" +
			" │   ├─ index: [rs.s]\n" +
			" │   ├─ filters: [{[NULL, ∞)}]\n" +
			" │   └─ columns: [r s]\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.y]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [x y]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=2030.000 rows=1000) (actual rows=3 loops=1)\n" +
			" ├─ cmp: (rs.s = xy.y)\n" +
			" ├─ IndexedTableAccess(rs)\n" +
			" │   ├─ index: [rs.s]\n" +
			" │   ├─ filters: [{[NULL, ∞)}]\n" +
			" │   └─ columns: [r s]\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.y]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [x y]\n" +
			"",
	},
	{
		Query: `select /*+ JOIN_ORDER(rs, xy) */ * from rs join xy on y+10 = s`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ rs.s:1\n" +
			" │   └─ (xy.y:3 + 10 (tinyint))\n" +
			" ├─ IndexedTableAccess(rs)\n" +
			" │   ├─ index: [rs.s]\n" +
			" │   ├─ static: [{[NULL, ∞)}]\n" +
			" │   ├─ colSet: (1,2)\n" +
			" │   ├─ tableId: 1\n" +
			" │   └─ Table\n" +
			" │       ├─ name: rs\n" +
			" │       └─ columns: [r s]\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.y]\n" +
			"     ├─ static: [{[NULL, ∞)}]\n" +
			"     ├─ colSet: (3,4)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Table\n" +
			"         ├─ name: xy\n" +
			"         └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=2032.530 rows=1250)\n" +
			" ├─ cmp: (rs.s = (xy.y + 10))\n" +
			" ├─ IndexedTableAccess(rs)\n" +
			" │   ├─ index: [rs.s]\n" +
			" │   ├─ filters: [{[NULL, ∞)}]\n" +
			" │   └─ columns: [r s]\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.y]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [x y]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=2032.530 rows=1250) (actual rows=0 loops=1)\n" +
			" ├─ cmp: (rs.s = (xy.y + 10))\n" +
			" ├─ IndexedTableAccess(rs)\n" +
			" │   ├─ index: [rs.s]\n" +
			" │   ├─ filters: [{[NULL, ∞)}]\n" +
			" │   └─ columns: [r s]\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.y]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [x y]\n" +
			"",
	},
	{
		Query: `select /*+ JOIN_ORDER(rs, xy) */ * from rs join xy on 10 = s+y`,
		ExpectedPlan: "InnerJoin\n" +
			" ├─ Eq\n" +
			" │   ├─ 10 (tinyint)\n" +
			" │   └─ (rs.s:1 + xy.y:3)\n" +
			" ├─ ProcessTable\n" +
			" │   └─ Table\n" +
			" │       ├─ name: rs\n" +
			" │       └─ columns: [r s]\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: xy\n" +
			"         └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "InnerJoin (estimated cost=1010001.000 rows=1250)\n" +
			" ├─ (10 = (rs.s + xy.y))\n" +
			" ├─ Table\n" +
			" │   ├─ name: rs\n" +
			" │   └─ columns: [r s]\n" +
			" └─ Table\n" +
			"     ├─ name: xy\n" +
			"     └─ columns: [x y]\n" +
			"",
		ExpectedAnalysis: "InnerJoin (estimated cost=1010001.000 rows=1250) (actual rows=0 loops=1)\n" +
			" ├─ (10 = (rs.s + xy.y))\n" +
			" ├─ Table\n" +
			" │   ├─ name: rs\n" +
			" │   └─ columns: [r s]\n" +
			" └─ Table\n" +
			"     ├─ name: xy\n" +
			"     └─ columns: [x y]\n" +
			"",
	},
	{
		Query: `select * from ab where a in (select x from xy where x in (select u from uv where u = a));`,
		ExpectedPlan: "Filter\n" +
			" ├─ InSubquery\n" +
			" │   ├─ left: ab.a:0!null\n" +
			" │   └─ right: Subquery\n" +
			" │       ├─ cacheable: false\n" +
			" │       ├─ alias-string: select x from xy where x in (select u from uv where u = a)\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [xy.x:2!null]\n" +
			" │           └─ Filter\n" +
			" │               ├─ InSubquery\n" +
			" │               │   ├─ left: xy.x:2!null\n" +
			" │               │   └─ right: Subquery\n" +
			" │               │       ├─ cacheable: false\n" +
			" │               │       ├─ alias-string: select u from uv where u = a\n" +
			" │               │       └─ Filter\n" +
			" │               │           ├─ Eq\n" +
			" │               │           │   ├─ uv.u:4!null\n" +
			" │               │           │   └─ ab.a:0!null\n" +
			" │               │           └─ IndexedTableAccess(uv)\n" +
			" │               │               ├─ index: [uv.u]\n" +
			" │               │               ├─ keys: [ab.a:0!null]\n" +
			" │               │               ├─ colSet: (5,6)\n" +
			" │               │               ├─ tableId: 3\n" +
			" │               │               └─ Table\n" +
			" │               │                   ├─ name: uv\n" +
			" │               │                   └─ columns: [u]\n" +
			" │               └─ Table\n" +
			" │                   ├─ name: xy\n" +
			" │                   ├─ columns: [x y]\n" +
			" │                   ├─ colSet: (3,4)\n" +
			" │                   └─ tableId: 2\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: ab\n" +
			"         └─ columns: [a b]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ InSubquery\n" +
			" │   ├─ left: ab.a\n" +
			" │   └─ right: Subquery\n" +
			" │       ├─ cacheable: false\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [xy.x]\n" +
			" │           └─ Filter\n" +
			" │               ├─ InSubquery\n" +
			" │               │   ├─ left: xy.x\n" +
			" │               │   └─ right: Subquery\n" +
			" │               │       ├─ cacheable: false\n" +
			" │               │       └─ Filter\n" +
			" │               │           ├─ (uv.u = ab.a)\n" +
			" │               │           └─ IndexedTableAccess(uv)\n" +
			" │               │               ├─ index: [uv.u]\n" +
			" │               │               ├─ columns: [u]\n" +
			" │               │               └─ keys: ab.a\n" +
			" │               └─ Table\n" +
			" │                   └─ name: xy\n" +
			" └─ Table\n" +
			"     └─ name: ab\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ InSubquery\n" +
			" │   ├─ left: ab.a\n" +
			" │   └─ right: Subquery\n" +
			" │       ├─ cacheable: false\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [xy.x]\n" +
			" │           └─ Filter\n" +
			" │               ├─ InSubquery\n" +
			" │               │   ├─ left: xy.x\n" +
			" │               │   └─ right: Subquery\n" +
			" │               │       ├─ cacheable: false\n" +
			" │               │       └─ Filter\n" +
			" │               │           ├─ (uv.u = ab.a)\n" +
			" │               │           └─ IndexedTableAccess(uv)\n" +
			" │               │               ├─ index: [uv.u]\n" +
			" │               │               ├─ columns: [u]\n" +
			" │               │               └─ keys: ab.a\n" +
			" │               └─ Table\n" +
			" │                   └─ name: xy\n" +
			" └─ Table\n" +
			"     └─ name: ab\n" +
			"",
	},
	{
		Query: `select * from ab where a in (select y from xy where y in (select v from uv where v = a));`,
		ExpectedPlan: "Filter\n" +
			" ├─ InSubquery\n" +
			" │   ├─ left: ab.a:0!null\n" +
			" │   └─ right: Subquery\n" +
			" │       ├─ cacheable: false\n" +
			" │       ├─ alias-string: select y from xy where y in (select v from uv where v = a)\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [xy.y:3]\n" +
			" │           └─ Filter\n" +
			" │               ├─ InSubquery\n" +
			" │               │   ├─ left: xy.y:3\n" +
			" │               │   └─ right: Subquery\n" +
			" │               │       ├─ cacheable: false\n" +
			" │               │       ├─ alias-string: select v from uv where v = a\n" +
			" │               │       └─ Filter\n" +
			" │               │           ├─ Eq\n" +
			" │               │           │   ├─ uv.v:4\n" +
			" │               │           │   └─ ab.a:0!null\n" +
			" │               │           └─ Table\n" +
			" │               │               ├─ name: uv\n" +
			" │               │               ├─ columns: [v]\n" +
			" │               │               ├─ colSet: (5,6)\n" +
			" │               │               └─ tableId: 3\n" +
			" │               └─ Table\n" +
			" │                   ├─ name: xy\n" +
			" │                   ├─ columns: [x y]\n" +
			" │                   ├─ colSet: (3,4)\n" +
			" │                   └─ tableId: 2\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: ab\n" +
			"         └─ columns: [a b]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ InSubquery\n" +
			" │   ├─ left: ab.a\n" +
			" │   └─ right: Subquery\n" +
			" │       ├─ cacheable: false\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [xy.y]\n" +
			" │           └─ Filter\n" +
			" │               ├─ InSubquery\n" +
			" │               │   ├─ left: xy.y\n" +
			" │               │   └─ right: Subquery\n" +
			" │               │       ├─ cacheable: false\n" +
			" │               │       └─ Filter\n" +
			" │               │           ├─ (uv.v = ab.a)\n" +
			" │               │           └─ Table\n" +
			" │               │               ├─ name: uv\n" +
			" │               │               └─ columns: [v]\n" +
			" │               └─ Table\n" +
			" │                   └─ name: xy\n" +
			" └─ Table\n" +
			"     └─ name: ab\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ InSubquery\n" +
			" │   ├─ left: ab.a\n" +
			" │   └─ right: Subquery\n" +
			" │       ├─ cacheable: false\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [xy.y]\n" +
			" │           └─ Filter\n" +
			" │               ├─ InSubquery\n" +
			" │               │   ├─ left: xy.y\n" +
			" │               │   └─ right: Subquery\n" +
			" │               │       ├─ cacheable: false\n" +
			" │               │       └─ Filter\n" +
			" │               │           ├─ (uv.v = ab.a)\n" +
			" │               │           └─ Table\n" +
			" │               │               ├─ name: uv\n" +
			" │               │               └─ columns: [v]\n" +
			" │               └─ Table\n" +
			" │                   └─ name: xy\n" +
			" └─ Table\n" +
			"     └─ name: ab\n" +
			"",
	},
	{
		Query: `select * from ab where b in (select y from xy where y in (select v from uv where v = b));`,
		ExpectedPlan: "Filter\n" +
			" ├─ InSubquery\n" +
			" │   ├─ left: ab.b:1\n" +
			" │   └─ right: Subquery\n" +
			" │       ├─ cacheable: false\n" +
			" │       ├─ alias-string: select y from xy where y in (select v from uv where v = b)\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [xy.y:3]\n" +
			" │           └─ Filter\n" +
			" │               ├─ InSubquery\n" +
			" │               │   ├─ left: xy.y:3\n" +
			" │               │   └─ right: Subquery\n" +
			" │               │       ├─ cacheable: false\n" +
			" │               │       ├─ alias-string: select v from uv where v = b\n" +
			" │               │       └─ Filter\n" +
			" │               │           ├─ Eq\n" +
			" │               │           │   ├─ uv.v:4\n" +
			" │               │           │   └─ ab.b:1\n" +
			" │               │           └─ Table\n" +
			" │               │               ├─ name: uv\n" +
			" │               │               ├─ columns: [v]\n" +
			" │               │               ├─ colSet: (5,6)\n" +
			" │               │               └─ tableId: 3\n" +
			" │               └─ Table\n" +
			" │                   ├─ name: xy\n" +
			" │                   ├─ columns: [x y]\n" +
			" │                   ├─ colSet: (3,4)\n" +
			" │                   └─ tableId: 2\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: ab\n" +
			"         └─ columns: [a b]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ InSubquery\n" +
			" │   ├─ left: ab.b\n" +
			" │   └─ right: Subquery\n" +
			" │       ├─ cacheable: false\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [xy.y]\n" +
			" │           └─ Filter\n" +
			" │               ├─ InSubquery\n" +
			" │               │   ├─ left: xy.y\n" +
			" │               │   └─ right: Subquery\n" +
			" │               │       ├─ cacheable: false\n" +
			" │               │       └─ Filter\n" +
			" │               │           ├─ (uv.v = ab.b)\n" +
			" │               │           └─ Table\n" +
			" │               │               ├─ name: uv\n" +
			" │               │               └─ columns: [v]\n" +
			" │               └─ Table\n" +
			" │                   └─ name: xy\n" +
			" └─ Table\n" +
			"     └─ name: ab\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ InSubquery\n" +
			" │   ├─ left: ab.b\n" +
			" │   └─ right: Subquery\n" +
			" │       ├─ cacheable: false\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [xy.y]\n" +
			" │           └─ Filter\n" +
			" │               ├─ InSubquery\n" +
			" │               │   ├─ left: xy.y\n" +
			" │               │   └─ right: Subquery\n" +
			" │               │       ├─ cacheable: false\n" +
			" │               │       └─ Filter\n" +
			" │               │           ├─ (uv.v = ab.b)\n" +
			" │               │           └─ Table\n" +
			" │               │               ├─ name: uv\n" +
			" │               │               └─ columns: [v]\n" +
			" │               └─ Table\n" +
			" │                   └─ name: xy\n" +
			" └─ Table\n" +
			"     └─ name: ab\n" +
			"",
	},
	{
		Query: `select ab.* from ab join pq on a = p where b = (select y from xy where y in (select v from uv where v = b)) order by a;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [ab.a:2!null, ab.b:3]\n" +
			" └─ Sort(ab.a:2!null ASC nullsFirst)\n" +
			"     └─ Filter\n" +
			"         ├─ Eq\n" +
			"         │   ├─ ab.b:3\n" +
			"         │   └─ Subquery\n" +
			"         │       ├─ cacheable: false\n" +
			"         │       ├─ alias-string: select y from xy where y in (select v from uv where v = b)\n" +
			"         │       └─ Project\n" +
			"         │           ├─ columns: [xy.y:5]\n" +
			"         │           └─ Filter\n" +
			"         │               ├─ InSubquery\n" +
			"         │               │   ├─ left: xy.y:5\n" +
			"         │               │   └─ right: Subquery\n" +
			"         │               │       ├─ cacheable: false\n" +
			"         │               │       ├─ alias-string: select v from uv where v = b\n" +
			"         │               │       └─ Filter\n" +
			"         │               │           ├─ Eq\n" +
			"         │               │           │   ├─ uv.v:6\n" +
			"         │               │           │   └─ ab.b:3\n" +
			"         │               │           └─ Table\n" +
			"         │               │               ├─ name: uv\n" +
			"         │               │               ├─ columns: [v]\n" +
			"         │               │               ├─ colSet: (7,8)\n" +
			"         │               │               └─ tableId: 4\n" +
			"         │               └─ Table\n" +
			"         │                   ├─ name: xy\n" +
			"         │                   ├─ columns: [x y]\n" +
			"         │                   ├─ colSet: (5,6)\n" +
			"         │                   └─ tableId: 3\n" +
			"         └─ LookupJoin\n" +
			"             ├─ ProcessTable\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: pq\n" +
			"             │       └─ columns: [p q]\n" +
			"             └─ IndexedTableAccess(ab)\n" +
			"                 ├─ index: [ab.a]\n" +
			"                 ├─ keys: [pq.p:0!null]\n" +
			"                 ├─ colSet: (1,2)\n" +
			"                 ├─ tableId: 1\n" +
			"                 └─ Table\n" +
			"                     ├─ name: ab\n" +
			"                     └─ columns: [a b]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [ab.a, ab.b]\n" +
			" └─ Sort(ab.a ASC)\n" +
			"     └─ Filter\n" +
			"         ├─ (ab.b = Subquery\n" +
			"         │   ├─ cacheable: false\n" +
			"         │   └─ Project\n" +
			"         │       ├─ columns: [xy.y]\n" +
			"         │       └─ Filter\n" +
			"         │           ├─ InSubquery\n" +
			"         │           │   ├─ left: xy.y\n" +
			"         │           │   └─ right: Subquery\n" +
			"         │           │       ├─ cacheable: false\n" +
			"         │           │       └─ Filter\n" +
			"         │           │           ├─ (uv.v = ab.b)\n" +
			"         │           │           └─ Table\n" +
			"         │           │               ├─ name: uv\n" +
			"         │           │               └─ columns: [v]\n" +
			"         │           └─ Table\n" +
			"         │               └─ name: xy\n" +
			"         │  )\n" +
			"         └─ LookupJoin\n" +
			"             ├─ Table\n" +
			"             │   └─ name: pq\n" +
			"             └─ IndexedTableAccess(ab)\n" +
			"                 ├─ index: [ab.a]\n" +
			"                 └─ keys: pq.p\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [ab.a, ab.b]\n" +
			" └─ Sort(ab.a ASC)\n" +
			"     └─ Filter\n" +
			"         ├─ (ab.b = Subquery\n" +
			"         │   ├─ cacheable: false\n" +
			"         │   └─ Project\n" +
			"         │       ├─ columns: [xy.y]\n" +
			"         │       └─ Filter\n" +
			"         │           ├─ InSubquery\n" +
			"         │           │   ├─ left: xy.y\n" +
			"         │           │   └─ right: Subquery\n" +
			"         │           │       ├─ cacheable: false\n" +
			"         │           │       └─ Filter\n" +
			"         │           │           ├─ (uv.v = ab.b)\n" +
			"         │           │           └─ Table\n" +
			"         │           │               ├─ name: uv\n" +
			"         │           │               └─ columns: [v]\n" +
			"         │           └─ Table\n" +
			"         │               └─ name: xy\n" +
			"         │  )\n" +
			"         └─ LookupJoin\n" +
			"             ├─ Table\n" +
			"             │   └─ name: pq\n" +
			"             └─ IndexedTableAccess(ab)\n" +
			"                 ├─ index: [ab.a]\n" +
			"                 └─ keys: pq.p\n" +
			"",
	},
	{
		Query: `select y, (select 1 from uv where y = 1 and u = x) is_one from xy join uv on x = v order by y;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [xy.y:1, Subquery\n" +
			" │   ├─ cacheable: false\n" +
			" │   ├─ alias-string: select 1 from uv where y = 1 and u = x\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [1 (tinyint)]\n" +
			" │       └─ Filter\n" +
			" │           ├─ AND\n" +
			" │           │   ├─ Eq\n" +
			" │           │   │   ├─ xy.y:1\n" +
			" │           │   │   └─ 1 (int)\n" +
			" │           │   └─ Eq\n" +
			" │           │       ├─ uv.u:5!null\n" +
			" │           │       └─ xy.x:0!null\n" +
			" │           └─ IndexedTableAccess(uv)\n" +
			" │               ├─ index: [uv.u]\n" +
			" │               ├─ keys: [xy.x:0!null]\n" +
			" │               ├─ colSet: (5,6)\n" +
			" │               ├─ tableId: 3\n" +
			" │               └─ Table\n" +
			" │                   ├─ name: uv\n" +
			" │                   └─ columns: [u]\n" +
			" │   as is_one]\n" +
			" └─ Sort(xy.y:1 ASC nullsFirst)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [xy.x:2!null, xy.y:3, uv.u:0!null, uv.v:1, Subquery\n" +
			"         │   ├─ cacheable: false\n" +
			"         │   ├─ alias-string: select 1 from uv where y = 1 and u = x\n" +
			"         │   └─ Project\n" +
			"         │       ├─ columns: [1 (tinyint)]\n" +
			"         │       └─ Filter\n" +
			"         │           ├─ AND\n" +
			"         │           │   ├─ Eq\n" +
			"         │           │   │   ├─ xy.y:3\n" +
			"         │           │   │   └─ 1 (int)\n" +
			"         │           │   └─ Eq\n" +
			"         │           │       ├─ uv.u:4!null\n" +
			"         │           │       └─ xy.x:2!null\n" +
			"         │           └─ IndexedTableAccess(uv)\n" +
			"         │               ├─ index: [uv.u]\n" +
			"         │               ├─ keys: [xy.x:2!null]\n" +
			"         │               ├─ colSet: (5,6)\n" +
			"         │               ├─ tableId: 3\n" +
			"         │               └─ Table\n" +
			"         │                   ├─ name: uv\n" +
			"         │                   └─ columns: [u]\n" +
			"         │   as is_one]\n" +
			"         └─ LookupJoin\n" +
			"             ├─ ProcessTable\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: uv\n" +
			"             │       └─ columns: [u v]\n" +
			"             └─ IndexedTableAccess(xy)\n" +
			"                 ├─ index: [xy.x]\n" +
			"                 ├─ keys: [uv.v:1]\n" +
			"                 ├─ colSet: (1,2)\n" +
			"                 ├─ tableId: 1\n" +
			"                 └─ Table\n" +
			"                     ├─ name: xy\n" +
			"                     └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [xy.y, Subquery\n" +
			" │   ├─ cacheable: false\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [1]\n" +
			" │       └─ Filter\n" +
			" │           ├─ ((xy.y = 1) AND (uv.u = xy.x))\n" +
			" │           └─ IndexedTableAccess(uv)\n" +
			" │               ├─ index: [uv.u]\n" +
			" │               ├─ columns: [u]\n" +
			" │               └─ keys: xy.x\n" +
			" │   as is_one]\n" +
			" └─ Sort(xy.y ASC)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [xy.x, xy.y, uv.u, uv.v, Subquery\n" +
			"         │   ├─ cacheable: false\n" +
			"         │   └─ Project\n" +
			"         │       ├─ columns: [1]\n" +
			"         │       └─ Filter\n" +
			"         │           ├─ ((xy.y = 1) AND (uv.u = xy.x))\n" +
			"         │           └─ IndexedTableAccess(uv)\n" +
			"         │               ├─ index: [uv.u]\n" +
			"         │               ├─ columns: [u]\n" +
			"         │               └─ keys: xy.x\n" +
			"         │   as is_one]\n" +
			"         └─ LookupJoin\n" +
			"             ├─ Table\n" +
			"             │   └─ name: uv\n" +
			"             └─ IndexedTableAccess(xy)\n" +
			"                 ├─ index: [xy.x]\n" +
			"                 └─ keys: uv.v\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [xy.y, Subquery\n" +
			" │   ├─ cacheable: false\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [1]\n" +
			" │       └─ Filter\n" +
			" │           ├─ ((xy.y = 1) AND (uv.u = xy.x))\n" +
			" │           └─ IndexedTableAccess(uv)\n" +
			" │               ├─ index: [uv.u]\n" +
			" │               ├─ columns: [u]\n" +
			" │               └─ keys: xy.x\n" +
			" │   as is_one]\n" +
			" └─ Sort(xy.y ASC)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [xy.x, xy.y, uv.u, uv.v, Subquery\n" +
			"         │   ├─ cacheable: false\n" +
			"         │   └─ Project\n" +
			"         │       ├─ columns: [1]\n" +
			"         │       └─ Filter\n" +
			"         │           ├─ ((xy.y = 1) AND (uv.u = xy.x))\n" +
			"         │           └─ IndexedTableAccess(uv)\n" +
			"         │               ├─ index: [uv.u]\n" +
			"         │               ├─ columns: [u]\n" +
			"         │               └─ keys: xy.x\n" +
			"         │   as is_one]\n" +
			"         └─ LookupJoin\n" +
			"             ├─ Table\n" +
			"             │   └─ name: uv\n" +
			"             └─ IndexedTableAccess(xy)\n" +
			"                 ├─ index: [xy.x]\n" +
			"                 └─ keys: uv.v\n" +
			"",
	},
	{
		Query: `select * from (select y, (select 1 where y = 1) is_one from xy join uv on x = v) sq order by y`,
		ExpectedPlan: "Sort(sq.y:0 ASC nullsFirst)\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (7,8)\n" +
			"     ├─ tableId: 3\n" +
			"     └─ Project\n" +
			"         ├─ columns: [xy.y:1, Subquery\n" +
			"         │   ├─ cacheable: false\n" +
			"         │   ├─ alias-string: select 1 where y = 1\n" +
			"         │   └─ Project\n" +
			"         │       ├─ columns: [1 (tinyint)]\n" +
			"         │       └─ Filter\n" +
			"         │           ├─ Eq\n" +
			"         │           │   ├─ xy.y:1\n" +
			"         │           │   └─ 1 (int)\n" +
			"         │           └─ Table\n" +
			"         │               ├─ name: \n" +
			"         │               ├─ columns: []\n" +
			"         │               ├─ colSet: ()\n" +
			"         │               └─ tableId: 0\n" +
			"         │   as is_one]\n" +
			"         └─ Project\n" +
			"             ├─ columns: [xy.x:2!null, xy.y:3, uv.u:0!null, uv.v:1, Subquery\n" +
			"             │   ├─ cacheable: false\n" +
			"             │   ├─ alias-string: select 1 where y = 1\n" +
			"             │   └─ Project\n" +
			"             │       ├─ columns: [1 (tinyint)]\n" +
			"             │       └─ Filter\n" +
			"             │           ├─ Eq\n" +
			"             │           │   ├─ xy.y:3\n" +
			"             │           │   └─ 1 (int)\n" +
			"             │           └─ Table\n" +
			"             │               ├─ name: \n" +
			"             │               ├─ columns: []\n" +
			"             │               ├─ colSet: ()\n" +
			"             │               └─ tableId: 0\n" +
			"             │   as is_one]\n" +
			"             └─ LookupJoin\n" +
			"                 ├─ Table\n" +
			"                 │   ├─ name: uv\n" +
			"                 │   ├─ columns: [u v]\n" +
			"                 │   ├─ colSet: (3,4)\n" +
			"                 │   └─ tableId: 2\n" +
			"                 └─ IndexedTableAccess(xy)\n" +
			"                     ├─ index: [xy.x]\n" +
			"                     ├─ keys: [uv.v:1]\n" +
			"                     ├─ colSet: (1,2)\n" +
			"                     ├─ tableId: 1\n" +
			"                     └─ Table\n" +
			"                         ├─ name: xy\n" +
			"                         └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Sort(sq.y ASC)\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Project\n" +
			"         ├─ columns: [xy.y, Subquery\n" +
			"         │   ├─ cacheable: false\n" +
			"         │   └─ Project\n" +
			"         │       ├─ columns: [1]\n" +
			"         │       └─ Filter\n" +
			"         │           ├─ (xy.y = 1)\n" +
			"         │           └─ Table\n" +
			"         │               └─ name: \n" +
			"         │   as is_one]\n" +
			"         └─ Project\n" +
			"             ├─ columns: [xy.x, xy.y, uv.u, uv.v, Subquery\n" +
			"             │   ├─ cacheable: false\n" +
			"             │   └─ Project\n" +
			"             │       ├─ columns: [1]\n" +
			"             │       └─ Filter\n" +
			"             │           ├─ (xy.y = 1)\n" +
			"             │           └─ Table\n" +
			"             │               └─ name: \n" +
			"             │   as is_one]\n" +
			"             └─ LookupJoin\n" +
			"                 ├─ Table\n" +
			"                 │   └─ name: uv\n" +
			"                 └─ IndexedTableAccess(xy)\n" +
			"                     ├─ index: [xy.x]\n" +
			"                     └─ keys: uv.v\n" +
			"",
		ExpectedAnalysis: "Sort(sq.y ASC)\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Project\n" +
			"         ├─ columns: [xy.y, Subquery\n" +
			"         │   ├─ cacheable: false\n" +
			"         │   └─ Project\n" +
			"         │       ├─ columns: [1]\n" +
			"         │       └─ Filter\n" +
			"         │           ├─ (xy.y = 1)\n" +
			"         │           └─ Table\n" +
			"         │               └─ name: \n" +
			"         │   as is_one]\n" +
			"         └─ Project\n" +
			"             ├─ columns: [xy.x, xy.y, uv.u, uv.v, Subquery\n" +
			"             │   ├─ cacheable: false\n" +
			"             │   └─ Project\n" +
			"             │       ├─ columns: [1]\n" +
			"             │       └─ Filter\n" +
			"             │           ├─ (xy.y = 1)\n" +
			"             │           └─ Table\n" +
			"             │               └─ name: \n" +
			"             │   as is_one]\n" +
			"             └─ LookupJoin\n" +
			"                 ├─ Table\n" +
			"                 │   └─ name: uv\n" +
			"                 └─ IndexedTableAccess(xy)\n" +
			"                     ├─ index: [xy.x]\n" +
			"                     └─ keys: uv.v\n" +
			"",
	},
	{
		Query: `select y,(select 1 where y = 1) is_one from xy join uv on x = v;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [xy.y:1, Subquery\n" +
			" │   ├─ cacheable: false\n" +
			" │   ├─ alias-string: select 1 where y = 1\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [1 (tinyint)]\n" +
			" │       └─ Filter\n" +
			" │           ├─ Eq\n" +
			" │           │   ├─ xy.y:1\n" +
			" │           │   └─ 1 (int)\n" +
			" │           └─ Table\n" +
			" │               ├─ name: \n" +
			" │               ├─ columns: []\n" +
			" │               ├─ colSet: ()\n" +
			" │               └─ tableId: 0\n" +
			" │   as is_one]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x:2!null, xy.y:3, uv.u:0!null, uv.v:1, Subquery\n" +
			"     │   ├─ cacheable: false\n" +
			"     │   ├─ alias-string: select 1 where y = 1\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [1 (tinyint)]\n" +
			"     │       └─ Filter\n" +
			"     │           ├─ Eq\n" +
			"     │           │   ├─ xy.y:3\n" +
			"     │           │   └─ 1 (int)\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: \n" +
			"     │               ├─ columns: []\n" +
			"     │               ├─ colSet: ()\n" +
			"     │               └─ tableId: 0\n" +
			"     │   as is_one]\n" +
			"     └─ LookupJoin\n" +
			"         ├─ ProcessTable\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: uv\n" +
			"         │       └─ columns: [u v]\n" +
			"         └─ IndexedTableAccess(xy)\n" +
			"             ├─ index: [xy.x]\n" +
			"             ├─ keys: [uv.v:1]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             ├─ tableId: 1\n" +
			"             └─ Table\n" +
			"                 ├─ name: xy\n" +
			"                 └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [xy.y, Subquery\n" +
			" │   ├─ cacheable: false\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [1]\n" +
			" │       └─ Filter\n" +
			" │           ├─ (xy.y = 1)\n" +
			" │           └─ Table\n" +
			" │               └─ name: \n" +
			" │   as is_one]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x, xy.y, uv.u, uv.v, Subquery\n" +
			"     │   ├─ cacheable: false\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [1]\n" +
			"     │       └─ Filter\n" +
			"     │           ├─ (xy.y = 1)\n" +
			"     │           └─ Table\n" +
			"     │               └─ name: \n" +
			"     │   as is_one]\n" +
			"     └─ LookupJoin (estimated cost=13.200 rows=4)\n" +
			"         ├─ Table\n" +
			"         │   └─ name: uv\n" +
			"         └─ IndexedTableAccess(xy)\n" +
			"             ├─ index: [xy.x]\n" +
			"             └─ keys: uv.v\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [xy.y, Subquery\n" +
			" │   ├─ cacheable: false\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [1]\n" +
			" │       └─ Filter\n" +
			" │           ├─ (xy.y = 1)\n" +
			" │           └─ Table\n" +
			" │               └─ name: \n" +
			" │   as is_one]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x, xy.y, uv.u, uv.v, Subquery\n" +
			"     │   ├─ cacheable: false\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [1]\n" +
			"     │       └─ Filter\n" +
			"     │           ├─ (xy.y = 1)\n" +
			"     │           └─ Table\n" +
			"     │               └─ name: \n" +
			"     │   as is_one]\n" +
			"     └─ LookupJoin (estimated cost=13.200 rows=4) (actual rows=4 loops=1)\n" +
			"         ├─ Table\n" +
			"         │   └─ name: uv\n" +
			"         └─ IndexedTableAccess(xy)\n" +
			"             ├─ index: [xy.x]\n" +
			"             └─ keys: uv.v\n" +
			"",
	},
	{
		Query: `SELECT a FROM (select i,s FROM mytable) mt (a,b) order by 1;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mt.a:0!null]\n" +
			" └─ Sort(mt.a:0!null ASC nullsFirst)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: mt\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (3,4)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             ├─ columns: [i s]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mt.a]\n" +
			" └─ Sort(mt.a ASC)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: mt\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mt.a]\n" +
			" └─ Sort(mt.a ASC)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: mt\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `
			WITH RECURSIVE bus_dst as (
				SELECT origin as dst FROM bus_routes WHERE origin='New York'
				UNION
				SELECT bus_routes.dst FROM bus_routes JOIN bus_dst ON concat(bus_dst.dst, 'aa') = concat(bus_routes.origin, 'aa')
			)
			SELECT * FROM bus_dst
			ORDER BY dst`,
		ExpectedPlan: "Sort(bus_dst.dst:0!null ASC nullsFirst)\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: bus_dst\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (4)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ RecursiveCTE\n" +
			"         └─ Union distinct\n" +
			"             ├─ Project\n" +
			"             │   ├─ columns: [bus_routes.origin:0!null as dst]\n" +
			"             │   └─ Filter\n" +
			"             │       ├─ Eq\n" +
			"             │       │   ├─ bus_routes.origin:0!null\n" +
			"             │       │   └─ New York (longtext)\n" +
			"             │       └─ IndexedTableAccess(bus_routes)\n" +
			"             │           ├─ index: [bus_routes.origin,bus_routes.dst]\n" +
			"             │           ├─ static: [{[New York, New York], [NULL, ∞)}]\n" +
			"             │           ├─ colSet: (1,2)\n" +
			"             │           ├─ tableId: 1\n" +
			"             │           └─ Table\n" +
			"             │               ├─ name: bus_routes\n" +
			"             │               └─ columns: [origin]\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [bus_routes.dst:2!null]\n" +
			"                 └─ HashJoin\n" +
			"                     ├─ Eq\n" +
			"                     │   ├─ concat(bus_dst.dst:0!null,aa (longtext))\n" +
			"                     │   └─ concat(bus_routes.origin:1!null,aa (longtext))\n" +
			"                     ├─ RecursiveTable(bus_dst)\n" +
			"                     └─ HashLookup\n" +
			"                         ├─ left-key: TUPLE(concat(bus_dst.dst:0!null,aa (longtext)))\n" +
			"                         ├─ right-key: TUPLE(concat(bus_routes.origin:0!null,aa (longtext)))\n" +
			"                         └─ Table\n" +
			"                             ├─ name: bus_routes\n" +
			"                             ├─ columns: [origin dst]\n" +
			"                             ├─ colSet: (5,6)\n" +
			"                             └─ tableId: 4\n" +
			"",
		ExpectedEstimates: "Sort(bus_dst.dst ASC)\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: bus_dst\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ RecursiveCTE\n" +
			"         └─ Union distinct\n" +
			"             ├─ Project\n" +
			"             │   ├─ columns: [bus_routes.origin as dst]\n" +
			"             │   └─ Filter\n" +
			"             │       ├─ (bus_routes.origin = 'New York')\n" +
			"             │       └─ IndexedTableAccess(bus_routes)\n" +
			"             │           ├─ index: [bus_routes.origin,bus_routes.dst]\n" +
			"             │           ├─ filters: [{[New York, New York], [NULL, ∞)}]\n" +
			"             │           └─ columns: [origin]\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [bus_routes.dst]\n" +
			"                 └─ HashJoin\n" +
			"                     ├─ (concat(bus_dst.dst,'aa') = concat(bus_routes.origin,'aa'))\n" +
			"                     ├─ RecursiveTable(bus_dst)\n" +
			"                     └─ HashLookup\n" +
			"                         ├─ left-key: (concat(bus_dst.dst,'aa'))\n" +
			"                         ├─ right-key: (concat(bus_routes.origin,'aa'))\n" +
			"                         └─ Table\n" +
			"                             ├─ name: bus_routes\n" +
			"                             └─ columns: [origin dst]\n" +
			"",
		ExpectedAnalysis: "Sort(bus_dst.dst ASC)\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: bus_dst\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ RecursiveCTE\n" +
			"         └─ Union distinct\n" +
			"             ├─ Project\n" +
			"             │   ├─ columns: [bus_routes.origin as dst]\n" +
			"             │   └─ Filter\n" +
			"             │       ├─ (bus_routes.origin = 'New York')\n" +
			"             │       └─ IndexedTableAccess(bus_routes)\n" +
			"             │           ├─ index: [bus_routes.origin,bus_routes.dst]\n" +
			"             │           ├─ filters: [{[New York, New York], [NULL, ∞)}]\n" +
			"             │           └─ columns: [origin]\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [bus_routes.dst]\n" +
			"                 └─ HashJoin\n" +
			"                     ├─ (concat(bus_dst.dst,'aa') = concat(bus_routes.origin,'aa'))\n" +
			"                     ├─ RecursiveTable(bus_dst)\n" +
			"                     └─ HashLookup\n" +
			"                         ├─ left-key: (concat(bus_dst.dst,'aa'))\n" +
			"                         ├─ right-key: (concat(bus_routes.origin,'aa'))\n" +
			"                         └─ Table\n" +
			"                             ├─ name: bus_routes\n" +
			"                             └─ columns: [origin dst]\n" +
			"",
	},
	{
		Query: `with cte2 as (select u,v from uv join ab on u = b where u in (2,3)), cte1 as (select u, v from cte2 join ab on cte2.u = b) select * from xy where (x) not in (select u from cte1) order by 1`,
		ExpectedPlan: "Sort(xy.x:0!null ASC nullsFirst)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x:0!null, xy.y:1]\n" +
			"     └─ Filter\n" +
			"         ├─ cte1.u:2!null IS NULL\n" +
			"         └─ LeftOuterHashJoinExcludeNulls\n" +
			"             ├─ Eq\n" +
			"             │   ├─ xy.x:0!null\n" +
			"             │   └─ cte1.u:2!null\n" +
			"             ├─ ProcessTable\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: xy\n" +
			"             │       └─ columns: [x y]\n" +
			"             └─ HashLookup\n" +
			"                 ├─ left-key: TUPLE(xy.x:0!null)\n" +
			"                 ├─ right-key: TUPLE(cte1.u:0!null)\n" +
			"                 └─ Project\n" +
			"                     ├─ columns: [cte1.u:0!null]\n" +
			"                     └─ SubqueryAlias\n" +
			"                         ├─ name: cte1\n" +
			"                         ├─ outerVisibility: false\n" +
			"                         ├─ isLateral: false\n" +
			"                         ├─ cacheable: true\n" +
			"                         ├─ colSet: (9,10)\n" +
			"                         ├─ tableId: 6\n" +
			"                         └─ Project\n" +
			"                             ├─ columns: [cte2.u:1!null, cte2.v:2]\n" +
			"                             └─ HashJoin\n" +
			"                                 ├─ Eq\n" +
			"                                 │   ├─ cte2.u:1!null\n" +
			"                                 │   └─ ab.b:0\n" +
			"                                 ├─ Table\n" +
			"                                 │   ├─ name: ab\n" +
			"                                 │   ├─ columns: [b]\n" +
			"                                 │   ├─ colSet: (7,8)\n" +
			"                                 │   └─ tableId: 5\n" +
			"                                 └─ HashLookup\n" +
			"                                     ├─ left-key: TUPLE(ab.b:0)\n" +
			"                                     ├─ right-key: TUPLE(cte2.u:0!null)\n" +
			"                                     └─ SubqueryAlias\n" +
			"                                         ├─ name: cte2\n" +
			"                                         ├─ outerVisibility: false\n" +
			"                                         ├─ isLateral: false\n" +
			"                                         ├─ cacheable: true\n" +
			"                                         ├─ colSet: (5,6)\n" +
			"                                         ├─ tableId: 3\n" +
			"                                         └─ Project\n" +
			"                                             ├─ columns: [uv.u:1!null, uv.v:2]\n" +
			"                                             └─ HashJoin\n" +
			"                                                 ├─ Eq\n" +
			"                                                 │   ├─ uv.u:1!null\n" +
			"                                                 │   └─ ab.b:0\n" +
			"                                                 ├─ Table\n" +
			"                                                 │   ├─ name: ab\n" +
			"                                                 │   ├─ columns: [b]\n" +
			"                                                 │   ├─ colSet: (3,4)\n" +
			"                                                 │   └─ tableId: 2\n" +
			"                                                 └─ HashLookup\n" +
			"                                                     ├─ left-key: TUPLE(ab.b:0)\n" +
			"                                                     ├─ right-key: TUPLE(uv.u:0!null)\n" +
			"                                                     └─ Filter\n" +
			"                                                         ├─ HashIn\n" +
			"                                                         │   ├─ uv.u:0!null\n" +
			"                                                         │   └─ TUPLE(2 (tinyint), 3 (tinyint))\n" +
			"                                                         └─ IndexedTableAccess(uv)\n" +
			"                                                             ├─ index: [uv.u]\n" +
			"                                                             ├─ static: [{[2, 2]}, {[3, 3]}]\n" +
			"                                                             ├─ colSet: (1,2)\n" +
			"                                                             ├─ tableId: 1\n" +
			"                                                             └─ Table\n" +
			"                                                                 ├─ name: uv\n" +
			"                                                                 └─ columns: [u v]\n" +
			"",
		ExpectedEstimates: "Sort(xy.x ASC)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x, xy.y]\n" +
			"     └─ Filter\n" +
			"         ├─ cte1.u IS NULL\n" +
			"         └─ LeftOuterHashJoinExcludeNulls\n" +
			"             ├─ (xy.x = cte1.u)\n" +
			"             ├─ Table\n" +
			"             │   └─ name: xy\n" +
			"             └─ HashLookup\n" +
			"                 ├─ left-key: (xy.x)\n" +
			"                 ├─ right-key: (cte1.u)\n" +
			"                 └─ Project\n" +
			"                     ├─ columns: [cte1.u]\n" +
			"                     └─ SubqueryAlias\n" +
			"                         ├─ name: cte1\n" +
			"                         ├─ outerVisibility: false\n" +
			"                         ├─ isLateral: false\n" +
			"                         ├─ cacheable: true\n" +
			"                         └─ Project\n" +
			"                             ├─ columns: [cte2.u, cte2.v]\n" +
			"                             └─ HashJoin\n" +
			"                                 ├─ (cte2.u = ab.b)\n" +
			"                                 ├─ Table\n" +
			"                                 │   ├─ name: ab\n" +
			"                                 │   └─ columns: [b]\n" +
			"                                 └─ HashLookup\n" +
			"                                     ├─ left-key: (ab.b)\n" +
			"                                     ├─ right-key: (cte2.u)\n" +
			"                                     └─ SubqueryAlias\n" +
			"                                         ├─ name: cte2\n" +
			"                                         ├─ outerVisibility: false\n" +
			"                                         ├─ isLateral: false\n" +
			"                                         ├─ cacheable: true\n" +
			"                                         └─ Project\n" +
			"                                             ├─ columns: [uv.u, uv.v]\n" +
			"                                             └─ HashJoin\n" +
			"                                                 ├─ (uv.u = ab.b)\n" +
			"                                                 ├─ Table\n" +
			"                                                 │   ├─ name: ab\n" +
			"                                                 │   └─ columns: [b]\n" +
			"                                                 └─ HashLookup\n" +
			"                                                     ├─ left-key: (ab.b)\n" +
			"                                                     ├─ right-key: (uv.u)\n" +
			"                                                     └─ Filter\n" +
			"                                                         ├─ (uv.u HASH IN (2, 3))\n" +
			"                                                         └─ IndexedTableAccess(uv)\n" +
			"                                                             ├─ index: [uv.u]\n" +
			"                                                             ├─ filters: [{[2, 2]}, {[3, 3]}]\n" +
			"                                                             └─ columns: [u v]\n" +
			"",
		ExpectedAnalysis: "Sort(xy.x ASC)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x, xy.y]\n" +
			"     └─ Filter\n" +
			"         ├─ cte1.u IS NULL\n" +
			"         └─ LeftOuterHashJoinExcludeNulls\n" +
			"             ├─ (xy.x = cte1.u)\n" +
			"             ├─ Table\n" +
			"             │   └─ name: xy\n" +
			"             └─ HashLookup\n" +
			"                 ├─ left-key: (xy.x)\n" +
			"                 ├─ right-key: (cte1.u)\n" +
			"                 └─ Project\n" +
			"                     ├─ columns: [cte1.u]\n" +
			"                     └─ SubqueryAlias\n" +
			"                         ├─ name: cte1\n" +
			"                         ├─ outerVisibility: false\n" +
			"                         ├─ isLateral: false\n" +
			"                         ├─ cacheable: true\n" +
			"                         └─ Project\n" +
			"                             ├─ columns: [cte2.u, cte2.v]\n" +
			"                             └─ HashJoin\n" +
			"                                 ├─ (cte2.u = ab.b)\n" +
			"                                 ├─ Table\n" +
			"                                 │   ├─ name: ab\n" +
			"                                 │   └─ columns: [b]\n" +
			"                                 └─ HashLookup\n" +
			"                                     ├─ left-key: (ab.b)\n" +
			"                                     ├─ right-key: (cte2.u)\n" +
			"                                     └─ SubqueryAlias\n" +
			"                                         ├─ name: cte2\n" +
			"                                         ├─ outerVisibility: false\n" +
			"                                         ├─ isLateral: false\n" +
			"                                         ├─ cacheable: true\n" +
			"                                         └─ Project\n" +
			"                                             ├─ columns: [uv.u, uv.v]\n" +
			"                                             └─ HashJoin\n" +
			"                                                 ├─ (uv.u = ab.b)\n" +
			"                                                 ├─ Table\n" +
			"                                                 │   ├─ name: ab\n" +
			"                                                 │   └─ columns: [b]\n" +
			"                                                 └─ HashLookup\n" +
			"                                                     ├─ left-key: (ab.b)\n" +
			"                                                     ├─ right-key: (uv.u)\n" +
			"                                                     └─ Filter\n" +
			"                                                         ├─ (uv.u HASH IN (2, 3))\n" +
			"                                                         └─ IndexedTableAccess(uv)\n" +
			"                                                             ├─ index: [uv.u]\n" +
			"                                                             ├─ filters: [{[2, 2]}, {[3, 3]}]\n" +
			"                                                             └─ columns: [u v]\n" +
			"",
	},
	{
		Query: `select i+0.0/(lag(i) over (order by s)) from mytable order by 1;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [(mytable.i:1!null + (0 (decimal(2,1)) / lag(mytable.i, 1) over ( order by mytable.s asc):0)) as i+0.0/(lag(i) over (order by s))]\n" +
			" └─ Sort((mytable.i:1!null + (0 (decimal(2,1)) / lag(mytable.i, 1) over ( order by mytable.s asc):0)) as i+0.0/(lag(i) over (order by s)) ASC nullsFirst)\n" +
			"     └─ Window\n" +
			"         ├─ lag(mytable.i, 1) over ( order by mytable.s ASC)\n" +
			"         ├─ mytable.i:0!null\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [(mytable.i + (0.0 / lag(mytable.i, 1) over ( order by mytable.s asc))) as i+0.0/(lag(i) over (order by s))]\n" +
			" └─ Sort((mytable.i + (0.0 / lag(mytable.i, 1) over ( order by mytable.s asc))) as i+0.0/(lag(i) over (order by s)) ASC)\n" +
			"     └─ Window(lag(mytable.i, 1) over ( order by mytable.s ASC), mytable.i)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [(mytable.i + (0.0 / lag(mytable.i, 1) over ( order by mytable.s asc))) as i+0.0/(lag(i) over (order by s))]\n" +
			" └─ Sort((mytable.i + (0.0 / lag(mytable.i, 1) over ( order by mytable.s asc))) as i+0.0/(lag(i) over (order by s)) ASC)\n" +
			"     └─ Window(lag(mytable.i, 1) over ( order by mytable.s ASC), mytable.i)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `select f64/f32, f32/(lag(i) over (order by f64)) from floattable order by 1,2;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [(floattable.f64:1!null / floattable.f32:2!null) as f64/f32, (floattable.f32:2!null / lag(floattable.i, 1) over ( order by floattable.f64 asc):0) as f32/(lag(i) over (order by f64))]\n" +
			" └─ Sort((floattable.f64:1!null / floattable.f32:2!null) as f64/f32 ASC nullsFirst, (floattable.f32:2!null / lag(floattable.i, 1) over ( order by floattable.f64 asc):0) as f32/(lag(i) over (order by f64)) ASC nullsFirst)\n" +
			"     └─ Window\n" +
			"         ├─ lag(floattable.i, 1) over ( order by floattable.f64 ASC)\n" +
			"         ├─ floattable.f64:2!null\n" +
			"         ├─ floattable.f32:1!null\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: floattable\n" +
			"                 └─ columns: [i f32 f64]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [(floattable.f64 / floattable.f32) as f64/f32, (floattable.f32 / lag(floattable.i, 1) over ( order by floattable.f64 asc)) as f32/(lag(i) over (order by f64))]\n" +
			" └─ Sort((floattable.f64 / floattable.f32) as f64/f32 ASC, (floattable.f32 / lag(floattable.i, 1) over ( order by floattable.f64 asc)) as f32/(lag(i) over (order by f64)) ASC)\n" +
			"     └─ Window(lag(floattable.i, 1) over ( order by floattable.f64 ASC), floattable.f64, floattable.f32)\n" +
			"         └─ Table\n" +
			"             ├─ name: floattable\n" +
			"             └─ columns: [i f32 f64]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [(floattable.f64 / floattable.f32) as f64/f32, (floattable.f32 / lag(floattable.i, 1) over ( order by floattable.f64 asc)) as f32/(lag(i) over (order by f64))]\n" +
			" └─ Sort((floattable.f64 / floattable.f32) as f64/f32 ASC, (floattable.f32 / lag(floattable.i, 1) over ( order by floattable.f64 asc)) as f32/(lag(i) over (order by f64)) ASC)\n" +
			"     └─ Window(lag(floattable.i, 1) over ( order by floattable.f64 ASC), floattable.f64, floattable.f32)\n" +
			"         └─ Table\n" +
			"             ├─ name: floattable\n" +
			"             └─ columns: [i f32 f64]\n" +
			"",
	},
	{
		Query: `select x from xy join uv on y = v join ab on y = b and u = -1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [xy.x:3!null]\n" +
			" └─ HashJoin\n" +
			"     ├─ AND\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ xy.y:4\n" +
			"     │   │   └─ ab.b:0\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ uv.v:2\n" +
			"     │       └─ ab.b:0\n" +
			"     ├─ ProcessTable\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: ab\n" +
			"     │       └─ columns: [b]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(ab.b:0, ab.b:0)\n" +
			"         ├─ right-key: TUPLE(xy.y:3, uv.v:1)\n" +
			"         └─ LookupJoin\n" +
			"             ├─ IndexedTableAccess(uv)\n" +
			"             │   ├─ index: [uv.u]\n" +
			"             │   ├─ static: [{[-1, -1]}]\n" +
			"             │   ├─ colSet: (3,4)\n" +
			"             │   ├─ tableId: 2\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: uv\n" +
			"             │       └─ columns: [u v]\n" +
			"             └─ IndexedTableAccess(xy)\n" +
			"                 ├─ index: [xy.y]\n" +
			"                 ├─ keys: [uv.v:2]\n" +
			"                 ├─ colSet: (1,2)\n" +
			"                 ├─ tableId: 1\n" +
			"                 └─ Table\n" +
			"                     ├─ name: xy\n" +
			"                     └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [xy.x]\n" +
			" └─ HashJoin (estimated cost=1032.000 rows=1000)\n" +
			"     ├─ ((xy.y = ab.b) AND (uv.v = ab.b))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: ab\n" +
			"     │   └─ columns: [b]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (ab.b, ab.b)\n" +
			"         ├─ right-key: (xy.y, uv.v)\n" +
			"         └─ LookupJoin\n" +
			"             ├─ IndexedTableAccess(uv)\n" +
			"             │   ├─ index: [uv.u]\n" +
			"             │   ├─ filters: [{[-1, -1]}]\n" +
			"             │   └─ columns: [u v]\n" +
			"             └─ IndexedTableAccess(xy)\n" +
			"                 ├─ index: [xy.y]\n" +
			"                 ├─ columns: [x y]\n" +
			"                 └─ keys: uv.v\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [xy.x]\n" +
			" └─ HashJoin (estimated cost=1032.000 rows=1000) (actual rows=0 loops=1)\n" +
			"     ├─ ((xy.y = ab.b) AND (uv.v = ab.b))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: ab\n" +
			"     │   └─ columns: [b]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (ab.b, ab.b)\n" +
			"         ├─ right-key: (xy.y, uv.v)\n" +
			"         └─ LookupJoin\n" +
			"             ├─ IndexedTableAccess(uv)\n" +
			"             │   ├─ index: [uv.u]\n" +
			"             │   ├─ filters: [{[-1, -1]}]\n" +
			"             │   └─ columns: [u v]\n" +
			"             └─ IndexedTableAccess(xy)\n" +
			"                 ├─ index: [xy.y]\n" +
			"                 ├─ columns: [x y]\n" +
			"                 └─ keys: uv.v\n" +
			"",
	},
	{
		Query: `select * from (select a,v from ab join uv on a=u) av join (select x,q from xy join pq on x = p) xq on av.v = xq.x`,
		ExpectedPlan: "HashJoin\n" +
			" ├─ Eq\n" +
			" │   ├─ av.v:1\n" +
			" │   └─ xq.x:2!null\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: av\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   ├─ colSet: (5,6)\n" +
			" │   ├─ tableId: 3\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [ab.a:2!null, uv.v:1]\n" +
			" │       └─ LookupJoin\n" +
			" │           ├─ Table\n" +
			" │           │   ├─ name: uv\n" +
			" │           │   ├─ columns: [u v]\n" +
			" │           │   ├─ colSet: (3,4)\n" +
			" │           │   └─ tableId: 2\n" +
			" │           └─ IndexedTableAccess(ab)\n" +
			" │               ├─ index: [ab.a]\n" +
			" │               ├─ keys: [uv.u:0!null]\n" +
			" │               ├─ colSet: (1,2)\n" +
			" │               ├─ tableId: 1\n" +
			" │               └─ Table\n" +
			" │                   ├─ name: ab\n" +
			" │                   └─ columns: [a]\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: TUPLE(av.v:1)\n" +
			"     ├─ right-key: TUPLE(xq.x:0!null)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: xq\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (11,12)\n" +
			"         ├─ tableId: 6\n" +
			"         └─ Project\n" +
			"             ├─ columns: [xy.x:2!null, pq.q:1]\n" +
			"             └─ LookupJoin\n" +
			"                 ├─ Table\n" +
			"                 │   ├─ name: pq\n" +
			"                 │   ├─ columns: [p q]\n" +
			"                 │   ├─ colSet: (9,10)\n" +
			"                 │   └─ tableId: 5\n" +
			"                 └─ IndexedTableAccess(xy)\n" +
			"                     ├─ index: [xy.x]\n" +
			"                     ├─ keys: [pq.p:0!null]\n" +
			"                     ├─ colSet: (7,8)\n" +
			"                     ├─ tableId: 4\n" +
			"                     └─ Table\n" +
			"                         ├─ name: xy\n" +
			"                         └─ columns: [x]\n" +
			"",
		ExpectedEstimates: "HashJoin (estimated cost=402.250 rows=125)\n" +
			" ├─ (av.v = xq.x)\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: av\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [ab.a, uv.v]\n" +
			" │       └─ LookupJoin\n" +
			" │           ├─ Table\n" +
			" │           │   ├─ name: uv\n" +
			" │           │   └─ columns: [u v]\n" +
			" │           └─ IndexedTableAccess(ab)\n" +
			" │               ├─ index: [ab.a]\n" +
			" │               ├─ columns: [a]\n" +
			" │               └─ keys: uv.u\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: (av.v)\n" +
			"     ├─ right-key: (xq.x)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: xq\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Project\n" +
			"             ├─ columns: [xy.x, pq.q]\n" +
			"             └─ LookupJoin\n" +
			"                 ├─ Table\n" +
			"                 │   ├─ name: pq\n" +
			"                 │   └─ columns: [p q]\n" +
			"                 └─ IndexedTableAccess(xy)\n" +
			"                     ├─ index: [xy.x]\n" +
			"                     ├─ columns: [x]\n" +
			"                     └─ keys: pq.p\n" +
			"",
		ExpectedAnalysis: "HashJoin (estimated cost=402.250 rows=125) (actual rows=4 loops=1)\n" +
			" ├─ (av.v = xq.x)\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: av\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [ab.a, uv.v]\n" +
			" │       └─ LookupJoin\n" +
			" │           ├─ Table\n" +
			" │           │   ├─ name: uv\n" +
			" │           │   └─ columns: [u v]\n" +
			" │           └─ IndexedTableAccess(ab)\n" +
			" │               ├─ index: [ab.a]\n" +
			" │               ├─ columns: [a]\n" +
			" │               └─ keys: uv.u\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: (av.v)\n" +
			"     ├─ right-key: (xq.x)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: xq\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Project\n" +
			"             ├─ columns: [xy.x, pq.q]\n" +
			"             └─ LookupJoin\n" +
			"                 ├─ Table\n" +
			"                 │   ├─ name: pq\n" +
			"                 │   └─ columns: [p q]\n" +
			"                 └─ IndexedTableAccess(xy)\n" +
			"                     ├─ index: [xy.x]\n" +
			"                     ├─ columns: [x]\n" +
			"                     └─ keys: pq.p\n" +
			"",
	},
	{
		Query: `select * from mytable t1 natural join mytable t2 join othertable t3 on t2.i = t3.i2;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [t1.i:0!null, t1.s:1!null, t3.s2:4!null, t3.i2:5!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ MergeJoin\n" +
			"     │   ├─ cmp: Eq\n" +
			"     │   │   ├─ t1.s:1!null\n" +
			"     │   │   └─ t2.s:3!null\n" +
			"     │   ├─ sel: Eq\n" +
			"     │   │   ├─ t1.i:0!null\n" +
			"     │   │   └─ t2.i:2!null\n" +
			"     │   ├─ TableAlias(t1)\n" +
			"     │   │   └─ IndexedTableAccess(mytable)\n" +
			"     │   │       ├─ index: [mytable.s]\n" +
			"     │   │       ├─ static: [{[NULL, ∞)}]\n" +
			"     │   │       ├─ colSet: (1,2)\n" +
			"     │   │       ├─ tableId: 1\n" +
			"     │   │       └─ Table\n" +
			"     │   │           ├─ name: mytable\n" +
			"     │   │           └─ columns: [i s]\n" +
			"     │   └─ TableAlias(t2)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.s]\n" +
			"     │           ├─ static: [{[NULL, ∞)}]\n" +
			"     │           ├─ colSet: (3,4)\n" +
			"     │           ├─ tableId: 2\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: mytable\n" +
			"     │               └─ columns: [i s]\n" +
			"     └─ TableAlias(t3)\n" +
			"         └─ IndexedTableAccess(othertable)\n" +
			"             ├─ index: [othertable.i2]\n" +
			"             ├─ keys: [t2.i:2!null]\n" +
			"             ├─ colSet: (5,6)\n" +
			"             ├─ tableId: 3\n" +
			"             └─ Table\n" +
			"                 ├─ name: othertable\n" +
			"                 └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [t1.i, t1.s, t3.s2, t3.i2]\n" +
			" └─ LookupJoin (estimated cost=9.900 rows=3)\n" +
			"     ├─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"     │   ├─ cmp: (t1.s = t2.s)\n" +
			"     │   ├─ sel: (t1.i = t2.i)\n" +
			"     │   ├─ TableAlias(t1)\n" +
			"     │   │   └─ IndexedTableAccess(mytable)\n" +
			"     │   │       ├─ index: [mytable.s]\n" +
			"     │   │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │       └─ columns: [i s]\n" +
			"     │   └─ TableAlias(t2)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.s]\n" +
			"     │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ TableAlias(t3)\n" +
			"         └─ IndexedTableAccess(othertable)\n" +
			"             ├─ index: [othertable.i2]\n" +
			"             ├─ columns: [s2 i2]\n" +
			"             └─ keys: t2.i\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [t1.i, t1.s, t3.s2, t3.i2]\n" +
			" └─ LookupJoin (estimated cost=9.900 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=1)\n" +
			"     │   ├─ cmp: (t1.s = t2.s)\n" +
			"     │   ├─ sel: (t1.i = t2.i)\n" +
			"     │   ├─ TableAlias(t1)\n" +
			"     │   │   └─ IndexedTableAccess(mytable)\n" +
			"     │   │       ├─ index: [mytable.s]\n" +
			"     │   │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │       └─ columns: [i s]\n" +
			"     │   └─ TableAlias(t2)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.s]\n" +
			"     │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ TableAlias(t3)\n" +
			"         └─ IndexedTableAccess(othertable)\n" +
			"             ├─ index: [othertable.i2]\n" +
			"             ├─ columns: [s2 i2]\n" +
			"             └─ keys: t2.i\n" +
			"",
	},
	{
		Query: `select x, a from xy inner join ab on a+1 = x OR a+2 = x OR a+3 = x `,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [xy.x:1!null, ab.a:0!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Or\n" +
			"     │   ├─ Or\n" +
			"     │   │   ├─ Eq\n" +
			"     │   │   │   ├─ (ab.a:0!null + 1 (tinyint))\n" +
			"     │   │   │   └─ xy.x:1!null\n" +
			"     │   │   └─ Eq\n" +
			"     │   │       ├─ (ab.a:0!null + 2 (tinyint))\n" +
			"     │   │       └─ xy.x:1!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ (ab.a:0!null + 3 (tinyint))\n" +
			"     │       └─ xy.x:1!null\n" +
			"     ├─ ProcessTable\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: ab\n" +
			"     │       └─ columns: [a]\n" +
			"     └─ Concat\n" +
			"         ├─ IndexedTableAccess(xy)\n" +
			"         │   ├─ index: [xy.x]\n" +
			"         │   ├─ keys: [(ab.a:0!null + 3 (tinyint))]\n" +
			"         │   ├─ colSet: (1,2)\n" +
			"         │   ├─ tableId: 1\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: xy\n" +
			"         │       └─ columns: [x]\n" +
			"         └─ Concat\n" +
			"             ├─ IndexedTableAccess(xy)\n" +
			"             │   ├─ index: [xy.x]\n" +
			"             │   ├─ keys: [(ab.a:0!null + 2 (tinyint))]\n" +
			"             │   ├─ colSet: (1,2)\n" +
			"             │   ├─ tableId: 1\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: xy\n" +
			"             │       └─ columns: [x]\n" +
			"             └─ IndexedTableAccess(xy)\n" +
			"                 ├─ index: [xy.x]\n" +
			"                 ├─ keys: [(ab.a:0!null + 1 (tinyint))]\n" +
			"                 ├─ colSet: (1,2)\n" +
			"                 ├─ tableId: 1\n" +
			"                 └─ Table\n" +
			"                     ├─ name: xy\n" +
			"                     └─ columns: [x]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [xy.x, ab.a]\n" +
			" └─ LookupJoin (estimated cost=-852.625 rows=1250)\n" +
			"     ├─ ((((ab.a + 1) = xy.x) OR ((ab.a + 2) = xy.x)) OR ((ab.a + 3) = xy.x))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: ab\n" +
			"     │   └─ columns: [a]\n" +
			"     └─ Concat\n" +
			"         ├─ IndexedTableAccess(xy)\n" +
			"         │   ├─ index: [xy.x]\n" +
			"         │   ├─ columns: [x]\n" +
			"         │   └─ keys: (ab.a + 3)\n" +
			"         └─ Concat\n" +
			"             ├─ IndexedTableAccess(xy)\n" +
			"             │   ├─ index: [xy.x]\n" +
			"             │   ├─ columns: [x]\n" +
			"             │   └─ keys: (ab.a + 2)\n" +
			"             └─ IndexedTableAccess(xy)\n" +
			"                 ├─ index: [xy.x]\n" +
			"                 ├─ columns: [x]\n" +
			"                 └─ keys: (ab.a + 1)\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [xy.x, ab.a]\n" +
			" └─ LookupJoin (estimated cost=-852.625 rows=1250) (actual rows=6 loops=1)\n" +
			"     ├─ ((((ab.a + 1) = xy.x) OR ((ab.a + 2) = xy.x)) OR ((ab.a + 3) = xy.x))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: ab\n" +
			"     │   └─ columns: [a]\n" +
			"     └─ Concat\n" +
			"         ├─ IndexedTableAccess(xy)\n" +
			"         │   ├─ index: [xy.x]\n" +
			"         │   ├─ columns: [x]\n" +
			"         │   └─ keys: (ab.a + 3)\n" +
			"         └─ Concat\n" +
			"             ├─ IndexedTableAccess(xy)\n" +
			"             │   ├─ index: [xy.x]\n" +
			"             │   ├─ columns: [x]\n" +
			"             │   └─ keys: (ab.a + 2)\n" +
			"             └─ IndexedTableAccess(xy)\n" +
			"                 ├─ index: [xy.x]\n" +
			"                 ├─ columns: [x]\n" +
			"                 └─ keys: (ab.a + 1)\n" +
			"",
	},
	{
		Query: `select x, 1 in (select a from ab where exists (select * from uv where a = u)) s from xy`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [xy.x:0!null, InSubquery\n" +
			" │   ├─ left: 1 (tinyint)\n" +
			" │   └─ right: Subquery\n" +
			" │       ├─ cacheable: true\n" +
			" │       ├─ alias-string: select a from ab where exists (select * from uv where a = u)\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [ab.a:4!null]\n" +
			" │           └─ LookupJoin\n" +
			" │               ├─ Eq\n" +
			" │               │   ├─ ab.a:4!null\n" +
			" │               │   └─ uv.u:3!null\n" +
			" │               ├─ OrderedDistinct\n" +
			" │               │   └─ Project\n" +
			" │               │       ├─ columns: [uv.u:3!null]\n" +
			" │               │       └─ Table\n" +
			" │               │           ├─ name: uv\n" +
			" │               │           ├─ columns: [u v]\n" +
			" │               │           ├─ colSet: (5,6)\n" +
			" │               │           └─ tableId: 3\n" +
			" │               └─ IndexedTableAccess(ab)\n" +
			" │                   ├─ index: [ab.a]\n" +
			" │                   ├─ keys: [uv.u:3!null]\n" +
			" │                   ├─ colSet: (3,4)\n" +
			" │                   ├─ tableId: 2\n" +
			" │                   └─ Table\n" +
			" │                       ├─ name: ab\n" +
			" │                       └─ columns: [a b]\n" +
			" │   as s]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x:0!null, xy.y:1, InSubquery\n" +
			"     │   ├─ left: 1 (tinyint)\n" +
			"     │   └─ right: Subquery\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       ├─ alias-string: select a from ab where exists (select * from uv where a = u)\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [ab.a:3!null]\n" +
			"     │           └─ LookupJoin\n" +
			"     │               ├─ Eq\n" +
			"     │               │   ├─ ab.a:3!null\n" +
			"     │               │   └─ uv.u:2!null\n" +
			"     │               ├─ OrderedDistinct\n" +
			"     │               │   └─ Project\n" +
			"     │               │       ├─ columns: [uv.u:2!null]\n" +
			"     │               │       └─ Table\n" +
			"     │               │           ├─ name: uv\n" +
			"     │               │           ├─ columns: [u v]\n" +
			"     │               │           ├─ colSet: (5,6)\n" +
			"     │               │           └─ tableId: 3\n" +
			"     │               └─ IndexedTableAccess(ab)\n" +
			"     │                   ├─ index: [ab.a]\n" +
			"     │                   ├─ keys: [uv.u:2!null]\n" +
			"     │                   ├─ colSet: (3,4)\n" +
			"     │                   ├─ tableId: 2\n" +
			"     │                   └─ Table\n" +
			"     │                       ├─ name: ab\n" +
			"     │                       └─ columns: [a b]\n" +
			"     │   as s]\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [xy.x, InSubquery\n" +
			" │   ├─ left: 1\n" +
			" │   └─ right: Subquery\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [ab.a]\n" +
			" │           └─ LookupJoin\n" +
			" │               ├─ (ab.a = uv.u)\n" +
			" │               ├─ OrderedDistinct\n" +
			" │               │   └─ Project\n" +
			" │               │       ├─ columns: [uv.u]\n" +
			" │               │       └─ Table\n" +
			" │               │           ├─ name: uv\n" +
			" │               │           └─ columns: [u v]\n" +
			" │               └─ IndexedTableAccess(ab)\n" +
			" │                   ├─ index: [ab.a]\n" +
			" │                   └─ keys: uv.u\n" +
			" │   as s]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x, xy.y, InSubquery\n" +
			"     │   ├─ left: 1\n" +
			"     │   └─ right: Subquery\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [ab.a]\n" +
			"     │           └─ LookupJoin\n" +
			"     │               ├─ (ab.a = uv.u)\n" +
			"     │               ├─ OrderedDistinct\n" +
			"     │               │   └─ Project\n" +
			"     │               │       ├─ columns: [uv.u]\n" +
			"     │               │       └─ Table\n" +
			"     │               │           ├─ name: uv\n" +
			"     │               │           └─ columns: [u v]\n" +
			"     │               └─ IndexedTableAccess(ab)\n" +
			"     │                   ├─ index: [ab.a]\n" +
			"     │                   └─ keys: uv.u\n" +
			"     │   as s]\n" +
			"     └─ Table\n" +
			"         └─ name: xy\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [xy.x, InSubquery\n" +
			" │   ├─ left: 1\n" +
			" │   └─ right: Subquery\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [ab.a]\n" +
			" │           └─ LookupJoin\n" +
			" │               ├─ (ab.a = uv.u)\n" +
			" │               ├─ OrderedDistinct\n" +
			" │               │   └─ Project\n" +
			" │               │       ├─ columns: [uv.u]\n" +
			" │               │       └─ Table\n" +
			" │               │           ├─ name: uv\n" +
			" │               │           └─ columns: [u v]\n" +
			" │               └─ IndexedTableAccess(ab)\n" +
			" │                   ├─ index: [ab.a]\n" +
			" │                   └─ keys: uv.u\n" +
			" │   as s]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x, xy.y, InSubquery\n" +
			"     │   ├─ left: 1\n" +
			"     │   └─ right: Subquery\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [ab.a]\n" +
			"     │           └─ LookupJoin\n" +
			"     │               ├─ (ab.a = uv.u)\n" +
			"     │               ├─ OrderedDistinct\n" +
			"     │               │   └─ Project\n" +
			"     │               │       ├─ columns: [uv.u]\n" +
			"     │               │       └─ Table\n" +
			"     │               │           ├─ name: uv\n" +
			"     │               │           └─ columns: [u v]\n" +
			"     │               └─ IndexedTableAccess(ab)\n" +
			"     │                   ├─ index: [ab.a]\n" +
			"     │                   └─ keys: uv.u\n" +
			"     │   as s]\n" +
			"     └─ Table\n" +
			"         └─ name: xy\n" +
			"",
	},
	{
		Query: `with cte (a,b) as (select * from ab) select * from cte`,
		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: cte\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (3,4)\n" +
			" ├─ tableId: 2\n" +
			" └─ Table\n" +
			"     ├─ name: ab\n" +
			"     ├─ columns: [a b]\n" +
			"     ├─ colSet: (1,2)\n" +
			"     └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: cte\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Table\n" +
			"     ├─ name: ab\n" +
			"     └─ columns: [a b]\n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: cte\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Table\n" +
			"     ├─ name: ab\n" +
			"     └─ columns: [a b]\n" +
			"",
	},
	{
		Query: `select * from ab where exists (select * from uv where a = 1)`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [ab.a:2!null, ab.b:3]\n" +
			" └─ CrossJoin\n" +
			"     ├─ Limit(1)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: uv\n" +
			"     │           └─ columns: [u v]\n" +
			"     └─ IndexedTableAccess(ab)\n" +
			"         ├─ index: [ab.a]\n" +
			"         ├─ static: [{[1, 1]}]\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: ab\n" +
			"             └─ columns: [a b]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [ab.a, ab.b]\n" +
			" └─ CrossJoin (estimated cost=2021.000 rows=2000)\n" +
			"     ├─ Limit(1)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: uv\n" +
			"     │       └─ columns: [u v]\n" +
			"     └─ IndexedTableAccess(ab)\n" +
			"         ├─ index: [ab.a]\n" +
			"         └─ filters: [{[1, 1]}]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [ab.a, ab.b]\n" +
			" └─ CrossJoin (estimated cost=2021.000 rows=2000) (actual rows=1 loops=1)\n" +
			"     ├─ Limit(1)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: uv\n" +
			"     │       └─ columns: [u v]\n" +
			"     └─ IndexedTableAccess(ab)\n" +
			"         ├─ index: [ab.a]\n" +
			"         └─ filters: [{[1, 1]}]\n" +
			"",
	},
	{
		Query: `select * from ab where exists (select * from ab where a = 1)`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [ab.a:2!null, ab.b:3]\n" +
			" └─ CrossJoin\n" +
			"     ├─ Limit(1)\n" +
			"     │   └─ TableAlias(ab_1)\n" +
			"     │       └─ IndexedTableAccess(ab)\n" +
			"     │           ├─ index: [ab.a]\n" +
			"     │           ├─ static: [{[1, 1]}]\n" +
			"     │           ├─ colSet: (3,4)\n" +
			"     │           ├─ tableId: 2\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: ab\n" +
			"     │               └─ columns: [a b]\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: ab\n" +
			"             └─ columns: [a b]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [ab.a, ab.b]\n" +
			" └─ CrossJoin (estimated cost=505001.000 rows=500000)\n" +
			"     ├─ Limit(1)\n" +
			"     │   └─ TableAlias(ab_1)\n" +
			"     │       └─ IndexedTableAccess(ab)\n" +
			"     │           ├─ index: [ab.a]\n" +
			"     │           ├─ filters: [{[1, 1]}]\n" +
			"     │           └─ columns: [a b]\n" +
			"     └─ Table\n" +
			"         └─ name: ab\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [ab.a, ab.b]\n" +
			" └─ CrossJoin (estimated cost=505001.000 rows=500000) (actual rows=4 loops=1)\n" +
			"     ├─ Limit(1)\n" +
			"     │   └─ TableAlias(ab_1)\n" +
			"     │       └─ IndexedTableAccess(ab)\n" +
			"     │           ├─ index: [ab.a]\n" +
			"     │           ├─ filters: [{[1, 1]}]\n" +
			"     │           └─ columns: [a b]\n" +
			"     └─ Table\n" +
			"         └─ name: ab\n" +
			"",
	},
	{
		Query: `select * from ab s where exists (select * from ab where a = 1 or s.a = 1)`,
		ExpectedPlan: "SemiJoin\n" +
			" ├─ Or\n" +
			" │   ├─ Eq\n" +
			" │   │   ├─ ab.a:2!null\n" +
			" │   │   └─ 1 (int)\n" +
			" │   └─ Eq\n" +
			" │       ├─ s.a:0!null\n" +
			" │       └─ 1 (int)\n" +
			" ├─ TableAlias(s)\n" +
			" │   └─ ProcessTable\n" +
			" │       └─ Table\n" +
			" │           ├─ name: ab\n" +
			" │           └─ columns: [a b]\n" +
			" └─ Table\n" +
			"     ├─ name: ab\n" +
			"     ├─ columns: [a b]\n" +
			"     ├─ colSet: (3,4)\n" +
			"     └─ tableId: 2\n" +
			"",
		ExpectedEstimates: "SemiJoin (estimated cost=506000.000 rows=1250)\n" +
			" ├─ ((ab.a = 1) OR (s.a = 1))\n" +
			" ├─ TableAlias(s)\n" +
			" │   └─ Table\n" +
			" │       └─ name: ab\n" +
			" └─ Table\n" +
			"     ├─ name: ab\n" +
			"     └─ columns: [a b]\n" +
			"",
		ExpectedAnalysis: "SemiJoin (estimated cost=506000.000 rows=1250) (actual rows=4 loops=1)\n" +
			" ├─ ((ab.a = 1) OR (s.a = 1))\n" +
			" ├─ TableAlias(s)\n" +
			" │   └─ Table\n" +
			" │       └─ name: ab\n" +
			" └─ Table\n" +
			"     ├─ name: ab\n" +
			"     └─ columns: [a b]\n" +
			"",
	},
	{
		Query: `select * from uv where exists (select 1, count(a) from ab where u = a group by a)`,
		ExpectedPlan: "SemiLookupJoin\n" +
			" ├─ ProcessTable\n" +
			" │   └─ Table\n" +
			" │       ├─ name: uv\n" +
			" │       └─ columns: [u v]\n" +
			" └─ IndexedTableAccess(ab)\n" +
			"     ├─ index: [ab.a]\n" +
			"     ├─ keys: [uv.u:0!null]\n" +
			"     ├─ colSet: (3,4)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Table\n" +
			"         ├─ name: ab\n" +
			"         └─ columns: [a]\n" +
			"",
		ExpectedEstimates: "SemiLookupJoin (estimated cost=13.200 rows=4)\n" +
			" ├─ Table\n" +
			" │   └─ name: uv\n" +
			" └─ IndexedTableAccess(ab)\n" +
			"     ├─ index: [ab.a]\n" +
			"     ├─ columns: [a]\n" +
			"     └─ keys: uv.u\n" +
			"",
		ExpectedAnalysis: "SemiLookupJoin (estimated cost=13.200 rows=4) (actual rows=4 loops=1)\n" +
			" ├─ Table\n" +
			" │   └─ name: uv\n" +
			" └─ IndexedTableAccess(ab)\n" +
			"     ├─ index: [ab.a]\n" +
			"     ├─ columns: [a]\n" +
			"     └─ keys: uv.u\n" +
			"",
	},
	{
		Query: `SELECT count(*), i, concat(i, i), 123, 'abc', concat('abc', 'def') FROM emptytable;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(1):0!null as count(*), emptytable.i:1!null, concat(emptytable.i:1!null,emptytable.i:1!null) as concat(i, i), 123 (tinyint), abc (longtext) as abc, concat(abc (longtext),def (longtext)) as concat('abc', 'def')]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: COUNT(1 (bigint)), emptytable.i:0!null\n" +
			"     ├─ group: \n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: emptytable\n" +
			"             └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(1) as count(*), emptytable.i, concat(emptytable.i,emptytable.i) as concat(i, i), 123, 'abc' as abc, concat('abc','def') as concat('abc', 'def')]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1), emptytable.i)\n" +
			"     ├─ Grouping()\n" +
			"     └─ Table\n" +
			"         ├─ name: emptytable\n" +
			"         └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(1) as count(*), emptytable.i, concat(emptytable.i,emptytable.i) as concat(i, i), 123, 'abc' as abc, concat('abc','def') as concat('abc', 'def')]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1), emptytable.i)\n" +
			"     ├─ Grouping()\n" +
			"     └─ Table\n" +
			"         ├─ name: emptytable\n" +
			"         └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT count(*), i, concat(i, i), 123, 'abc', concat('abc', 'def') FROM mytable where false;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(1):0!null as count(*), mytable.i:1!null, concat(mytable.i:1!null,mytable.i:1!null) as concat(i, i), 123 (tinyint), abc (longtext) as abc, concat(abc (longtext),def (longtext)) as concat('abc', 'def')]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: COUNT(1 (bigint)), mytable.i:0!null\n" +
			"     ├─ group: \n" +
			"     └─ EmptyTable\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(1) as count(*), mytable.i, concat(mytable.i,mytable.i) as concat(i, i), 123, 'abc' as abc, concat('abc','def') as concat('abc', 'def')]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1), mytable.i)\n" +
			"     ├─ Grouping()\n" +
			"     └─ EmptyTable\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(1) as count(*), mytable.i, concat(mytable.i,mytable.i) as concat(i, i), 123, 'abc' as abc, concat('abc','def') as concat('abc', 'def')]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1), mytable.i)\n" +
			"     ├─ Grouping()\n" +
			"     └─ EmptyTable\n" +
			"",
	},
	{
		Query: `select count(*) cnt from ab where exists (select * from xy where x = a) group by a`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(1):0!null as cnt]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: COUNT(1 (bigint))\n" +
			"     ├─ group: ab.a:0!null\n" +
			"     └─ Project\n" +
			"         ├─ columns: [ab.a:0!null, ab.b:1]\n" +
			"         └─ MergeJoin\n" +
			"             ├─ cmp: Eq\n" +
			"             │   ├─ ab.a:0!null\n" +
			"             │   └─ xy.x:2!null\n" +
			"             ├─ IndexedTableAccess(ab)\n" +
			"             │   ├─ index: [ab.a]\n" +
			"             │   ├─ static: [{[NULL, ∞)}]\n" +
			"             │   ├─ colSet: (1,2)\n" +
			"             │   ├─ tableId: 1\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: ab\n" +
			"             │       └─ columns: [a b]\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [xy.x:0!null]\n" +
			"                 └─ IndexedTableAccess(xy)\n" +
			"                     ├─ index: [xy.x]\n" +
			"                     ├─ static: [{[NULL, ∞)}]\n" +
			"                     ├─ colSet: (3,4)\n" +
			"                     ├─ tableId: 2\n" +
			"                     └─ Table\n" +
			"                         ├─ name: xy\n" +
			"                         └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(1) as cnt]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1))\n" +
			"     ├─ Grouping(ab.a)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [ab.a, ab.b]\n" +
			"         └─ MergeJoin\n" +
			"             ├─ cmp: (ab.a = xy.x)\n" +
			"             ├─ IndexedTableAccess(ab)\n" +
			"             │   ├─ index: [ab.a]\n" +
			"             │   └─ filters: [{[NULL, ∞)}]\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [xy.x]\n" +
			"                 └─ IndexedTableAccess(xy)\n" +
			"                     ├─ index: [xy.x]\n" +
			"                     ├─ filters: [{[NULL, ∞)}]\n" +
			"                     └─ columns: [x y]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(1) as cnt]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1))\n" +
			"     ├─ Grouping(ab.a)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [ab.a, ab.b]\n" +
			"         └─ MergeJoin\n" +
			"             ├─ cmp: (ab.a = xy.x)\n" +
			"             ├─ IndexedTableAccess(ab)\n" +
			"             │   ├─ index: [ab.a]\n" +
			"             │   └─ filters: [{[NULL, ∞)}]\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [xy.x]\n" +
			"                 └─ IndexedTableAccess(xy)\n" +
			"                     ├─ index: [xy.x]\n" +
			"                     ├─ filters: [{[NULL, ∞)}]\n" +
			"                     └─ columns: [x y]\n" +
			"",
	},
	{
		Query: `SELECT pk, u, v FROM one_pk JOIN (SELECT count(*) AS u, 123 AS v FROM emptytable) uv WHERE pk = u;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:2!null, uv.u:0!null, uv.v:1!null]\n" +
			" └─ HashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ one_pk.pk:2!null\n" +
			"     │   └─ uv.u:0!null\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: uv\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   ├─ colSet: (12,13)\n" +
			"     │   ├─ tableId: 3\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [count(1):0!null as u, 123 (tinyint) as v]\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [emptytable.COUNT(1):0!null as COUNT(1)]\n" +
			"     │           └─ table_count(emptytable) as COUNT(1)\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(uv.u:0!null)\n" +
			"         ├─ right-key: TUPLE(one_pk.pk:0!null)\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, uv.u, uv.v]\n" +
			" └─ HashJoin (estimated cost=114.000 rows=100)\n" +
			"     ├─ (one_pk.pk = uv.u)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: uv\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [count(1) as u, 123 as v]\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [emptytable.COUNT(1) as COUNT(1)]\n" +
			"     │           └─ table_count(emptytable) as COUNT(1)\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (uv.u)\n" +
			"         ├─ right-key: (one_pk.pk)\n" +
			"         └─ Table\n" +
			"             ├─ name: one_pk\n" +
			"             └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, uv.u, uv.v]\n" +
			" └─ HashJoin (estimated cost=114.000 rows=100) (actual rows=1 loops=1)\n" +
			"     ├─ (one_pk.pk = uv.u)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: uv\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [count(1) as u, 123 as v]\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [emptytable.COUNT(1) as COUNT(1)]\n" +
			"     │           └─ table_count(emptytable) as COUNT(1)\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (uv.u)\n" +
			"         ├─ right-key: (one_pk.pk)\n" +
			"         └─ Table\n" +
			"             ├─ name: one_pk\n" +
			"             └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT pk, u, v FROM one_pk JOIN (SELECT count(*) AS u, 123 AS v FROM mytable WHERE false) uv WHERE pk = u;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:2!null, uv.u:0!null, uv.v:1!null]\n" +
			" └─ HashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ one_pk.pk:2!null\n" +
			"     │   └─ uv.u:0!null\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: uv\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   ├─ colSet: (12,13)\n" +
			"     │   ├─ tableId: 3\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [count(1):0!null as u, 123 (tinyint) as v]\n" +
			"     │       └─ GroupBy\n" +
			"     │           ├─ select: COUNT(1 (bigint))\n" +
			"     │           ├─ group: \n" +
			"     │           └─ EmptyTable\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(uv.u:0!null)\n" +
			"         ├─ right-key: TUPLE(one_pk.pk:0!null)\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, uv.u, uv.v]\n" +
			" └─ HashJoin (estimated cost=114.000 rows=100)\n" +
			"     ├─ (one_pk.pk = uv.u)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: uv\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [count(1) as u, 123 as v]\n" +
			"     │       └─ GroupBy\n" +
			"     │           ├─ SelectedExprs(COUNT(1))\n" +
			"     │           ├─ Grouping()\n" +
			"     │           └─ EmptyTable\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (uv.u)\n" +
			"         ├─ right-key: (one_pk.pk)\n" +
			"         └─ Table\n" +
			"             ├─ name: one_pk\n" +
			"             └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, uv.u, uv.v]\n" +
			" └─ HashJoin (estimated cost=114.000 rows=100) (actual rows=1 loops=1)\n" +
			"     ├─ (one_pk.pk = uv.u)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: uv\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [count(1) as u, 123 as v]\n" +
			"     │       └─ GroupBy\n" +
			"     │           ├─ SelectedExprs(COUNT(1))\n" +
			"     │           ├─ Grouping()\n" +
			"     │           └─ EmptyTable\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (uv.u)\n" +
			"         ├─ right-key: (one_pk.pk)\n" +
			"         └─ Table\n" +
			"             ├─ name: one_pk\n" +
			"             └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT pk FROM one_pk WHERE (pk, 123) IN (SELECT count(*) AS u, 123 AS v FROM emptytable);`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null]\n" +
			" └─ Filter\n" +
			"     ├─ InSubquery\n" +
			"     │   ├─ left: TUPLE(one_pk.pk:0!null, 123 (tinyint))\n" +
			"     │   └─ right: Subquery\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       ├─ alias-string: select count(*) u, 123 v from emptytable\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [count(1):6!null as u, 123 (tinyint) as v]\n" +
			"     │           └─ Project\n" +
			"     │               ├─ columns: [emptytable.COUNT(1):6!null as COUNT(1)]\n" +
			"     │               └─ table_count(emptytable) as COUNT(1)\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: one_pk\n" +
			"             └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk]\n" +
			" └─ Filter\n" +
			"     ├─ InSubquery\n" +
			"     │   ├─ left: (one_pk.pk, 123)\n" +
			"     │   └─ right: Subquery\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [count(1) as u, 123 as v]\n" +
			"     │           └─ Project\n" +
			"     │               ├─ columns: [emptytable.COUNT(1) as COUNT(1)]\n" +
			"     │               └─ table_count(emptytable) as COUNT(1)\n" +
			"     └─ Table\n" +
			"         └─ name: one_pk\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk]\n" +
			" └─ Filter\n" +
			"     ├─ InSubquery\n" +
			"     │   ├─ left: (one_pk.pk, 123)\n" +
			"     │   └─ right: Subquery\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [count(1) as u, 123 as v]\n" +
			"     │           └─ Project\n" +
			"     │               ├─ columns: [emptytable.COUNT(1) as COUNT(1)]\n" +
			"     │               └─ table_count(emptytable) as COUNT(1)\n" +
			"     └─ Table\n" +
			"         └─ name: one_pk\n" +
			"",
	},
	{
		Query: `SELECT pk FROM one_pk WHERE (pk, 123) IN (SELECT count(*) AS u, 123 AS v FROM mytable WHERE false);`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null]\n" +
			" └─ Filter\n" +
			"     ├─ InSubquery\n" +
			"     │   ├─ left: TUPLE(one_pk.pk:0!null, 123 (tinyint))\n" +
			"     │   └─ right: Subquery\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       ├─ alias-string: select count(*) u, 123 v from mytable where false\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [count(1):6!null as u, 123 (tinyint) as v]\n" +
			"     │           └─ GroupBy\n" +
			"     │               ├─ select: COUNT(1 (bigint))\n" +
			"     │               ├─ group: \n" +
			"     │               └─ EmptyTable\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: one_pk\n" +
			"             └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk]\n" +
			" └─ Filter\n" +
			"     ├─ InSubquery\n" +
			"     │   ├─ left: (one_pk.pk, 123)\n" +
			"     │   └─ right: Subquery\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [count(1) as u, 123 as v]\n" +
			"     │           └─ GroupBy\n" +
			"     │               ├─ SelectedExprs(COUNT(1))\n" +
			"     │               ├─ Grouping()\n" +
			"     │               └─ EmptyTable\n" +
			"     └─ Table\n" +
			"         └─ name: one_pk\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk]\n" +
			" └─ Filter\n" +
			"     ├─ InSubquery\n" +
			"     │   ├─ left: (one_pk.pk, 123)\n" +
			"     │   └─ right: Subquery\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [count(1) as u, 123 as v]\n" +
			"     │           └─ GroupBy\n" +
			"     │               ├─ SelectedExprs(COUNT(1))\n" +
			"     │               ├─ Grouping()\n" +
			"     │               └─ EmptyTable\n" +
			"     └─ Table\n" +
			"         └─ name: one_pk\n" +
			"",
	},
	{
		Query: `SELECT i FROM mytable WHERE EXISTS (SELECT * FROM (SELECT count(*) as u, 123 as v FROM emptytable) uv);`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mytable.i:2!null]\n" +
			" └─ CrossHashJoin\n" +
			"     ├─ Limit(1)\n" +
			"     │   └─ SubqueryAlias\n" +
			"     │       ├─ name: uv\n" +
			"     │       ├─ outerVisibility: true\n" +
			"     │       ├─ isLateral: false\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       ├─ colSet: (8,9)\n" +
			"     │       ├─ tableId: 3\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [count(1):0!null as u, 123 (tinyint) as v]\n" +
			"     │           └─ Project\n" +
			"     │               ├─ columns: [emptytable.COUNT(1):0!null as COUNT(1)]\n" +
			"     │               └─ table_count(emptytable) as COUNT(1)\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE()\n" +
			"         ├─ right-key: TUPLE()\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mytable.i]\n" +
			" └─ CrossHashJoin (estimated cost=110.030 rows=3)\n" +
			"     ├─ Limit(1)\n" +
			"     │   └─ SubqueryAlias\n" +
			"     │       ├─ name: uv\n" +
			"     │       ├─ outerVisibility: true\n" +
			"     │       ├─ isLateral: false\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [count(1) as u, 123 as v]\n" +
			"     │           └─ Project\n" +
			"     │               ├─ columns: [emptytable.COUNT(1) as COUNT(1)]\n" +
			"     │               └─ table_count(emptytable) as COUNT(1)\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: ()\n" +
			"         ├─ right-key: ()\n" +
			"         └─ Table\n" +
			"             └─ name: mytable\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mytable.i]\n" +
			" └─ CrossHashJoin (estimated cost=110.030 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ Limit(1)\n" +
			"     │   └─ SubqueryAlias\n" +
			"     │       ├─ name: uv\n" +
			"     │       ├─ outerVisibility: true\n" +
			"     │       ├─ isLateral: false\n" +
			"     │       ├─ cacheable: true\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [count(1) as u, 123 as v]\n" +
			"     │           └─ Project\n" +
			"     │               ├─ columns: [emptytable.COUNT(1) as COUNT(1)]\n" +
			"     │               └─ table_count(emptytable) as COUNT(1)\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: ()\n" +
			"         ├─ right-key: ()\n" +
			"         └─ Table\n" +
			"             └─ name: mytable\n" +
			"",
	},
	{
		Query: `SELECT count(*), (SELECT i FROM mytable WHERE i = 1 group by i);`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(1):0!null as count(*), Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   ├─ alias-string: select i from mytable where i = 1 group by i\n" +
			" │   └─ GroupBy\n" +
			" │       ├─ select: mytable.i:1!null\n" +
			" │       ├─ group: mytable.i:1!null\n" +
			" │       └─ IndexedTableAccess(mytable)\n" +
			" │           ├─ index: [mytable.i]\n" +
			" │           ├─ static: [{[1, 1]}]\n" +
			" │           ├─ colSet: (2,3)\n" +
			" │           ├─ tableId: 1\n" +
			" │           └─ Table\n" +
			" │               ├─ name: mytable\n" +
			" │               └─ columns: [i]\n" +
			" │   as (SELECT i FROM mytable WHERE i = 1 group by i)]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: COUNT(1 (bigint))\n" +
			"     ├─ group: \n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: \n" +
			"             └─ columns: []\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(1) as count(*), Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ GroupBy\n" +
			" │       ├─ SelectedExprs(mytable.i)\n" +
			" │       ├─ Grouping(mytable.i)\n" +
			" │       └─ IndexedTableAccess(mytable)\n" +
			" │           ├─ index: [mytable.i]\n" +
			" │           ├─ filters: [{[1, 1]}]\n" +
			" │           └─ columns: [i]\n" +
			" │   as (SELECT i FROM mytable WHERE i = 1 group by i)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1))\n" +
			"     ├─ Grouping()\n" +
			"     └─ Table\n" +
			"         └─ name: \n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(1) as count(*), Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ GroupBy\n" +
			" │       ├─ SelectedExprs(mytable.i)\n" +
			" │       ├─ Grouping(mytable.i)\n" +
			" │       └─ IndexedTableAccess(mytable)\n" +
			" │           ├─ index: [mytable.i]\n" +
			" │           ├─ filters: [{[1, 1]}]\n" +
			" │           └─ columns: [i]\n" +
			" │   as (SELECT i FROM mytable WHERE i = 1 group by i)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1))\n" +
			"     ├─ Grouping()\n" +
			"     └─ Table\n" +
			"         └─ name: \n" +
			"",
	},
	{
		Query: `with cte(a,b) as (select * from ab) select * from xy where exists (select * from cte where a = x)`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [xy.x:1!null, xy.y:2]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ cte.a:0!null\n" +
			"     │   └─ xy.x:1!null\n" +
			"     ├─ Distinct\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [cte.a:0!null]\n" +
			"     │       └─ SubqueryAlias\n" +
			"     │           ├─ name: cte\n" +
			"     │           ├─ outerVisibility: true\n" +
			"     │           ├─ isLateral: false\n" +
			"     │           ├─ cacheable: true\n" +
			"     │           ├─ colSet: (3,4)\n" +
			"     │           ├─ tableId: 2\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: ab\n" +
			"     │               ├─ columns: [a b]\n" +
			"     │               ├─ colSet: (1,2)\n" +
			"     │               └─ tableId: 1\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ keys: [cte.a:0!null]\n" +
			"         ├─ colSet: (5,6)\n" +
			"         ├─ tableId: 4\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [xy.x, xy.y]\n" +
			" └─ LookupJoin (estimated cost=330.000 rows=100)\n" +
			"     ├─ (cte.a = xy.x)\n" +
			"     ├─ Distinct\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [cte.a]\n" +
			"     │       └─ SubqueryAlias\n" +
			"     │           ├─ name: cte\n" +
			"     │           ├─ outerVisibility: true\n" +
			"     │           ├─ isLateral: false\n" +
			"     │           ├─ cacheable: true\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: ab\n" +
			"     │               └─ columns: [a b]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         └─ keys: cte.a\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [xy.x, xy.y]\n" +
			" └─ LookupJoin (estimated cost=330.000 rows=100) (actual rows=4 loops=1)\n" +
			"     ├─ (cte.a = xy.x)\n" +
			"     ├─ Distinct\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [cte.a]\n" +
			"     │       └─ SubqueryAlias\n" +
			"     │           ├─ name: cte\n" +
			"     │           ├─ outerVisibility: true\n" +
			"     │           ├─ isLateral: false\n" +
			"     │           ├─ cacheable: true\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: ab\n" +
			"     │               └─ columns: [a b]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         └─ keys: cte.a\n" +
			"",
	},
	{
		Query: `select * from xy where exists (select * from ab where a = x) order by x`,
		ExpectedPlan: "Sort(xy.x:0!null ASC nullsFirst)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x:0!null, xy.y:1]\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ xy.x:0!null\n" +
			"         │   └─ ab.a:2!null\n" +
			"         ├─ IndexedTableAccess(xy)\n" +
			"         │   ├─ index: [xy.x]\n" +
			"         │   ├─ static: [{[NULL, ∞)}]\n" +
			"         │   ├─ colSet: (1,2)\n" +
			"         │   ├─ tableId: 1\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: xy\n" +
			"         │       └─ columns: [x y]\n" +
			"         └─ Project\n" +
			"             ├─ columns: [ab.a:0!null]\n" +
			"             └─ IndexedTableAccess(ab)\n" +
			"                 ├─ index: [ab.a]\n" +
			"                 ├─ static: [{[NULL, ∞)}]\n" +
			"                 ├─ colSet: (3,4)\n" +
			"                 ├─ tableId: 2\n" +
			"                 └─ Table\n" +
			"                     ├─ name: ab\n" +
			"                     └─ columns: [a b]\n" +
			"",
		ExpectedEstimates: "Sort(xy.x ASC)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x, xy.y]\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: (xy.x = ab.a)\n" +
			"         ├─ IndexedTableAccess(xy)\n" +
			"         │   ├─ index: [xy.x]\n" +
			"         │   └─ filters: [{[NULL, ∞)}]\n" +
			"         └─ Project\n" +
			"             ├─ columns: [ab.a]\n" +
			"             └─ IndexedTableAccess(ab)\n" +
			"                 ├─ index: [ab.a]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 └─ columns: [a b]\n" +
			"",
		ExpectedAnalysis: "Sort(xy.x ASC)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x, xy.y]\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: (xy.x = ab.a)\n" +
			"         ├─ IndexedTableAccess(xy)\n" +
			"         │   ├─ index: [xy.x]\n" +
			"         │   └─ filters: [{[NULL, ∞)}]\n" +
			"         └─ Project\n" +
			"             ├─ columns: [ab.a]\n" +
			"             └─ IndexedTableAccess(ab)\n" +
			"                 ├─ index: [ab.a]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 └─ columns: [a b]\n" +
			"",
	},
	{
		Query: `select * from xy where exists (select * from ab where a = x order by a limit 2) order by x limit 5`,
		ExpectedPlan: "Limit(5)\n" +
			" └─ TopN(Limit: [5 (bigint)]; xy.x:0!null ASC nullsFirst)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [xy.x:0!null, xy.y:1]\n" +
			"         └─ MergeJoin\n" +
			"             ├─ cmp: Eq\n" +
			"             │   ├─ xy.x:0!null\n" +
			"             │   └─ ab.a:2!null\n" +
			"             ├─ IndexedTableAccess(xy)\n" +
			"             │   ├─ index: [xy.x]\n" +
			"             │   ├─ static: [{[NULL, ∞)}]\n" +
			"             │   ├─ colSet: (1,2)\n" +
			"             │   ├─ tableId: 1\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: xy\n" +
			"             │       └─ columns: [x y]\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [ab.a:0!null]\n" +
			"                 └─ IndexedTableAccess(ab)\n" +
			"                     ├─ index: [ab.a]\n" +
			"                     ├─ static: [{[NULL, ∞)}]\n" +
			"                     ├─ colSet: (3,4)\n" +
			"                     ├─ tableId: 2\n" +
			"                     └─ Table\n" +
			"                         ├─ name: ab\n" +
			"                         └─ columns: [a b]\n" +
			"",
		ExpectedEstimates: "Limit(5)\n" +
			" └─ TopN(Limit: [5]; xy.x ASC)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [xy.x, xy.y]\n" +
			"         └─ MergeJoin\n" +
			"             ├─ cmp: (xy.x = ab.a)\n" +
			"             ├─ IndexedTableAccess(xy)\n" +
			"             │   ├─ index: [xy.x]\n" +
			"             │   └─ filters: [{[NULL, ∞)}]\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [ab.a]\n" +
			"                 └─ IndexedTableAccess(ab)\n" +
			"                     ├─ index: [ab.a]\n" +
			"                     ├─ filters: [{[NULL, ∞)}]\n" +
			"                     └─ columns: [a b]\n" +
			"",
		ExpectedAnalysis: "Limit(5)\n" +
			" └─ TopN(Limit: [5]; xy.x ASC)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [xy.x, xy.y]\n" +
			"         └─ MergeJoin\n" +
			"             ├─ cmp: (xy.x = ab.a)\n" +
			"             ├─ IndexedTableAccess(xy)\n" +
			"             │   ├─ index: [xy.x]\n" +
			"             │   └─ filters: [{[NULL, ∞)}]\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [ab.a]\n" +
			"                 └─ IndexedTableAccess(ab)\n" +
			"                     ├─ index: [ab.a]\n" +
			"                     ├─ filters: [{[NULL, ∞)}]\n" +
			"                     └─ columns: [a b]\n" +
			"",
	},
	{
		Query: `
select * from
(
  select * from ab
  left join uv on a = u
  where exists (select * from pq where u = p)
) alias2
inner join xy on a = x;`,
		ExpectedPlan: "LookupJoin\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: alias2\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   ├─ colSet: (7-10)\n" +
			" │   ├─ tableId: 4\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [ab.a:0!null, ab.b:1, uv.u:2!null, uv.v:3]\n" +
			" │       └─ SemiJoin\n" +
			" │           ├─ Eq\n" +
			" │           │   ├─ uv.u:2!null\n" +
			" │           │   └─ pq.p:4!null\n" +
			" │           ├─ LeftOuterMergeJoin\n" +
			" │           │   ├─ cmp: Eq\n" +
			" │           │   │   ├─ ab.a:0!null\n" +
			" │           │   │   └─ uv.u:2!null\n" +
			" │           │   ├─ IndexedTableAccess(ab)\n" +
			" │           │   │   ├─ index: [ab.a]\n" +
			" │           │   │   ├─ static: [{[NULL, ∞)}]\n" +
			" │           │   │   ├─ colSet: (1,2)\n" +
			" │           │   │   ├─ tableId: 1\n" +
			" │           │   │   └─ Table\n" +
			" │           │   │       ├─ name: ab\n" +
			" │           │   │       └─ columns: [a b]\n" +
			" │           │   └─ IndexedTableAccess(uv)\n" +
			" │           │       ├─ index: [uv.u]\n" +
			" │           │       ├─ static: [{[NULL, ∞)}]\n" +
			" │           │       ├─ colSet: (3,4)\n" +
			" │           │       ├─ tableId: 2\n" +
			" │           │       └─ Table\n" +
			" │           │           ├─ name: uv\n" +
			" │           │           └─ columns: [u v]\n" +
			" │           └─ Table\n" +
			" │               ├─ name: pq\n" +
			" │               ├─ columns: [p q]\n" +
			" │               ├─ colSet: (5,6)\n" +
			" │               └─ tableId: 3\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.x]\n" +
			"     ├─ keys: [alias2.a:0!null]\n" +
			"     ├─ colSet: (11,12)\n" +
			"     ├─ tableId: 5\n" +
			"     └─ Table\n" +
			"         ├─ name: xy\n" +
			"         └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "LookupJoin (estimated cost=330.000 rows=100)\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: alias2\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [ab.a, ab.b, uv.u, uv.v]\n" +
			" │       └─ SemiJoin\n" +
			" │           ├─ (uv.u = pq.p)\n" +
			" │           ├─ LeftOuterMergeJoin\n" +
			" │           │   ├─ cmp: (ab.a = uv.u)\n" +
			" │           │   ├─ IndexedTableAccess(ab)\n" +
			" │           │   │   ├─ index: [ab.a]\n" +
			" │           │   │   └─ filters: [{[NULL, ∞)}]\n" +
			" │           │   └─ IndexedTableAccess(uv)\n" +
			" │           │       ├─ index: [uv.u]\n" +
			" │           │       └─ filters: [{[NULL, ∞)}]\n" +
			" │           └─ Table\n" +
			" │               ├─ name: pq\n" +
			" │               └─ columns: [p q]\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.x]\n" +
			"     ├─ columns: [x y]\n" +
			"     └─ keys: alias2.a\n" +
			"",
		ExpectedAnalysis: "LookupJoin (estimated cost=330.000 rows=100) (actual rows=4 loops=1)\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: alias2\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [ab.a, ab.b, uv.u, uv.v]\n" +
			" │       └─ SemiJoin\n" +
			" │           ├─ (uv.u = pq.p)\n" +
			" │           ├─ LeftOuterMergeJoin\n" +
			" │           │   ├─ cmp: (ab.a = uv.u)\n" +
			" │           │   ├─ IndexedTableAccess(ab)\n" +
			" │           │   │   ├─ index: [ab.a]\n" +
			" │           │   │   └─ filters: [{[NULL, ∞)}]\n" +
			" │           │   └─ IndexedTableAccess(uv)\n" +
			" │           │       ├─ index: [uv.u]\n" +
			" │           │       └─ filters: [{[NULL, ∞)}]\n" +
			" │           └─ Table\n" +
			" │               ├─ name: pq\n" +
			" │               └─ columns: [p q]\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.x]\n" +
			"     ├─ columns: [x y]\n" +
			"     └─ keys: alias2.a\n" +
			"",
	},
	{
		Query: `
select * from ab
where exists
(
  select * from uv
  left join pq on u = p
  where a = u
);`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [ab.a:1!null, ab.b:2]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ ab.a:1!null\n" +
			"     │   └─ uv.u:0!null\n" +
			"     ├─ OrderedDistinct\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [uv.u:0!null]\n" +
			"     │       └─ LeftOuterMergeJoin\n" +
			"     │           ├─ cmp: Eq\n" +
			"     │           │   ├─ uv.u:0!null\n" +
			"     │           │   └─ pq.p:2!null\n" +
			"     │           ├─ IndexedTableAccess(uv)\n" +
			"     │           │   ├─ index: [uv.u]\n" +
			"     │           │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │           │   ├─ colSet: (3,4)\n" +
			"     │           │   ├─ tableId: 2\n" +
			"     │           │   └─ Table\n" +
			"     │           │       ├─ name: uv\n" +
			"     │           │       └─ columns: [u v]\n" +
			"     │           └─ IndexedTableAccess(pq)\n" +
			"     │               ├─ index: [pq.p]\n" +
			"     │               ├─ static: [{[NULL, ∞)}]\n" +
			"     │               ├─ colSet: (5,6)\n" +
			"     │               ├─ tableId: 3\n" +
			"     │               └─ Table\n" +
			"     │                   ├─ name: pq\n" +
			"     │                   └─ columns: [p q]\n" +
			"     └─ IndexedTableAccess(ab)\n" +
			"         ├─ index: [ab.a]\n" +
			"         ├─ keys: [uv.u:0!null]\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: ab\n" +
			"             └─ columns: [a b]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [ab.a, ab.b]\n" +
			" └─ LookupJoin (estimated cost=16.500 rows=5)\n" +
			"     ├─ (ab.a = uv.u)\n" +
			"     ├─ OrderedDistinct\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [uv.u]\n" +
			"     │       └─ LeftOuterMergeJoin\n" +
			"     │           ├─ cmp: (uv.u = pq.p)\n" +
			"     │           ├─ IndexedTableAccess(uv)\n" +
			"     │           │   ├─ index: [uv.u]\n" +
			"     │           │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           │   └─ columns: [u v]\n" +
			"     │           └─ IndexedTableAccess(pq)\n" +
			"     │               ├─ index: [pq.p]\n" +
			"     │               ├─ filters: [{[NULL, ∞)}]\n" +
			"     │               └─ columns: [p q]\n" +
			"     └─ IndexedTableAccess(ab)\n" +
			"         ├─ index: [ab.a]\n" +
			"         └─ keys: uv.u\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [ab.a, ab.b]\n" +
			" └─ LookupJoin (estimated cost=16.500 rows=5) (actual rows=4 loops=1)\n" +
			"     ├─ (ab.a = uv.u)\n" +
			"     ├─ OrderedDistinct\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [uv.u]\n" +
			"     │       └─ LeftOuterMergeJoin\n" +
			"     │           ├─ cmp: (uv.u = pq.p)\n" +
			"     │           ├─ IndexedTableAccess(uv)\n" +
			"     │           │   ├─ index: [uv.u]\n" +
			"     │           │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           │   └─ columns: [u v]\n" +
			"     │           └─ IndexedTableAccess(pq)\n" +
			"     │               ├─ index: [pq.p]\n" +
			"     │               ├─ filters: [{[NULL, ∞)}]\n" +
			"     │               └─ columns: [p q]\n" +
			"     └─ IndexedTableAccess(ab)\n" +
			"         ├─ index: [ab.a]\n" +
			"         └─ keys: uv.u\n" +
			"",
	},
	{
		Query: `
select * from
(
  select * from ab
  where not exists (select * from uv where a = u)
) alias1
where exists (select * from pq where a = p)
`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [alias1.a:0!null, alias1.b:1]\n" +
			" └─ HashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ alias1.a:0!null\n" +
			"     │   └─ pq.p:2!null\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: alias1\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   ├─ colSet: (5,6)\n" +
			"     │   ├─ tableId: 3\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [ab.a:0!null, ab.b:1]\n" +
			"     │       └─ Filter\n" +
			"     │           ├─ uv.u:2!null IS NULL\n" +
			"     │           └─ LeftOuterMergeJoin\n" +
			"     │               ├─ cmp: Eq\n" +
			"     │               │   ├─ ab.a:0!null\n" +
			"     │               │   └─ uv.u:2!null\n" +
			"     │               ├─ IndexedTableAccess(ab)\n" +
			"     │               │   ├─ index: [ab.a]\n" +
			"     │               │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │               │   ├─ colSet: (1,2)\n" +
			"     │               │   ├─ tableId: 1\n" +
			"     │               │   └─ Table\n" +
			"     │               │       ├─ name: ab\n" +
			"     │               │       └─ columns: [a b]\n" +
			"     │               └─ Project\n" +
			"     │                   ├─ columns: [uv.u:0!null]\n" +
			"     │                   └─ IndexedTableAccess(uv)\n" +
			"     │                       ├─ index: [uv.u]\n" +
			"     │                       ├─ static: [{[NULL, ∞)}]\n" +
			"     │                       ├─ colSet: (3,4)\n" +
			"     │                       ├─ tableId: 2\n" +
			"     │                       └─ Table\n" +
			"     │                           ├─ name: uv\n" +
			"     │                           └─ columns: [u v]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(alias1.a:0!null)\n" +
			"         ├─ right-key: TUPLE(pq.p:0!null)\n" +
			"         └─ OrderedDistinct\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [pq.p:0!null]\n" +
			"                 └─ ProcessTable\n" +
			"                     └─ Table\n" +
			"                         ├─ name: pq\n" +
			"                         └─ columns: [p q]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [alias1.a, alias1.b]\n" +
			" └─ HashJoin (estimated cost=114.000 rows=100)\n" +
			"     ├─ (alias1.a = pq.p)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: alias1\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [ab.a, ab.b]\n" +
			"     │       └─ Filter\n" +
			"     │           ├─ uv.u IS NULL\n" +
			"     │           └─ LeftOuterMergeJoin\n" +
			"     │               ├─ cmp: (ab.a = uv.u)\n" +
			"     │               ├─ IndexedTableAccess(ab)\n" +
			"     │               │   ├─ index: [ab.a]\n" +
			"     │               │   └─ filters: [{[NULL, ∞)}]\n" +
			"     │               └─ Project\n" +
			"     │                   ├─ columns: [uv.u]\n" +
			"     │                   └─ IndexedTableAccess(uv)\n" +
			"     │                       ├─ index: [uv.u]\n" +
			"     │                       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │                       └─ columns: [u v]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (alias1.a)\n" +
			"         ├─ right-key: (pq.p)\n" +
			"         └─ OrderedDistinct\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [pq.p]\n" +
			"                 └─ Table\n" +
			"                     ├─ name: pq\n" +
			"                     └─ columns: [p q]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [alias1.a, alias1.b]\n" +
			" └─ HashJoin (estimated cost=114.000 rows=100) (actual rows=0 loops=1)\n" +
			"     ├─ (alias1.a = pq.p)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: alias1\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [ab.a, ab.b]\n" +
			"     │       └─ Filter\n" +
			"     │           ├─ uv.u IS NULL\n" +
			"     │           └─ LeftOuterMergeJoin\n" +
			"     │               ├─ cmp: (ab.a = uv.u)\n" +
			"     │               ├─ IndexedTableAccess(ab)\n" +
			"     │               │   ├─ index: [ab.a]\n" +
			"     │               │   └─ filters: [{[NULL, ∞)}]\n" +
			"     │               └─ Project\n" +
			"     │                   ├─ columns: [uv.u]\n" +
			"     │                   └─ IndexedTableAccess(uv)\n" +
			"     │                       ├─ index: [uv.u]\n" +
			"     │                       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │                       └─ columns: [u v]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (alias1.a)\n" +
			"         ├─ right-key: (pq.p)\n" +
			"         └─ OrderedDistinct\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [pq.p]\n" +
			"                 └─ Table\n" +
			"                     ├─ name: pq\n" +
			"                     └─ columns: [p q]\n" +
			"",
	},
	{
		Query: `
select * from ab
inner join uv on a = u
full join pq on a = p
`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [ab.a:2!null, ab.b:3, uv.u:0!null, uv.v:1, pq.p:4!null, pq.q:5]\n" +
			" └─ FullOuterJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ ab.a:2!null\n" +
			"     │   └─ pq.p:4!null\n" +
			"     ├─ LookupJoin\n" +
			"     │   ├─ ProcessTable\n" +
			"     │   │   └─ Table\n" +
			"     │   │       ├─ name: uv\n" +
			"     │   │       └─ columns: [u v]\n" +
			"     │   └─ IndexedTableAccess(ab)\n" +
			"     │       ├─ index: [ab.a]\n" +
			"     │       ├─ keys: [uv.u:0!null]\n" +
			"     │       ├─ colSet: (1,2)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: ab\n" +
			"     │           └─ columns: [a b]\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: pq\n" +
			"             └─ columns: [p q]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [ab.a, ab.b, uv.u, uv.v, pq.p, pq.q]\n" +
			" └─ FullOuterJoin (estimated cost=30.320 rows=5)\n" +
			"     ├─ (ab.a = pq.p)\n" +
			"     ├─ LookupJoin (estimated cost=13.200 rows=4)\n" +
			"     │   ├─ Table\n" +
			"     │   │   ├─ name: uv\n" +
			"     │   │   └─ columns: [u v]\n" +
			"     │   └─ IndexedTableAccess(ab)\n" +
			"     │       ├─ index: [ab.a]\n" +
			"     │       ├─ columns: [a b]\n" +
			"     │       └─ keys: uv.u\n" +
			"     └─ Table\n" +
			"         ├─ name: pq\n" +
			"         └─ columns: [p q]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [ab.a, ab.b, uv.u, uv.v, pq.p, pq.q]\n" +
			" └─ FullOuterJoin (estimated cost=30.320 rows=5) (actual rows=4 loops=1)\n" +
			"     ├─ (ab.a = pq.p)\n" +
			"     ├─ LookupJoin (estimated cost=13.200 rows=4) (actual rows=4 loops=1)\n" +
			"     │   ├─ Table\n" +
			"     │   │   ├─ name: uv\n" +
			"     │   │   └─ columns: [u v]\n" +
			"     │   └─ IndexedTableAccess(ab)\n" +
			"     │       ├─ index: [ab.a]\n" +
			"     │       ├─ columns: [a b]\n" +
			"     │       └─ keys: uv.u\n" +
			"     └─ Table\n" +
			"         ├─ name: pq\n" +
			"         └─ columns: [p q]\n" +
			"",
	},
	{
		Query: `
select * from
(
  select * from ab
  inner join xy on true
) alias1
inner join uv on true
inner join pq on true
`,
		ExpectedPlan: "CrossHashJoin\n" +
			" ├─ CrossHashJoin\n" +
			" │   ├─ SubqueryAlias\n" +
			" │   │   ├─ name: alias1\n" +
			" │   │   ├─ outerVisibility: false\n" +
			" │   │   ├─ isLateral: false\n" +
			" │   │   ├─ cacheable: true\n" +
			" │   │   ├─ colSet: (5-8)\n" +
			" │   │   ├─ tableId: 3\n" +
			" │   │   └─ Project\n" +
			" │   │       ├─ columns: [ab.a:2!null, ab.b:3, xy.x:0!null, xy.y:1]\n" +
			" │   │       └─ CrossJoin\n" +
			" │   │           ├─ Table\n" +
			" │   │           │   ├─ name: xy\n" +
			" │   │           │   ├─ columns: [x y]\n" +
			" │   │           │   ├─ colSet: (3,4)\n" +
			" │   │           │   └─ tableId: 2\n" +
			" │   │           └─ Table\n" +
			" │   │               ├─ name: ab\n" +
			" │   │               ├─ columns: [a b]\n" +
			" │   │               ├─ colSet: (1,2)\n" +
			" │   │               └─ tableId: 1\n" +
			" │   └─ HashLookup\n" +
			" │       ├─ left-key: TUPLE()\n" +
			" │       ├─ right-key: TUPLE()\n" +
			" │       └─ ProcessTable\n" +
			" │           └─ Table\n" +
			" │               ├─ name: uv\n" +
			" │               └─ columns: [u v]\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: TUPLE()\n" +
			"     ├─ right-key: TUPLE()\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: pq\n" +
			"             └─ columns: [p q]\n" +
			"",
		ExpectedEstimates: "CrossHashJoin (estimated cost=17.100 rows=5)\n" +
			" ├─ CrossHashJoin (estimated cost=113.050 rows=5)\n" +
			" │   ├─ SubqueryAlias\n" +
			" │   │   ├─ name: alias1\n" +
			" │   │   ├─ outerVisibility: false\n" +
			" │   │   ├─ isLateral: false\n" +
			" │   │   ├─ cacheable: true\n" +
			" │   │   └─ Project\n" +
			" │   │       ├─ columns: [ab.a, ab.b, xy.x, xy.y]\n" +
			" │   │       └─ CrossJoin\n" +
			" │   │           ├─ Table\n" +
			" │   │           │   ├─ name: xy\n" +
			" │   │           │   └─ columns: [x y]\n" +
			" │   │           └─ Table\n" +
			" │   │               ├─ name: ab\n" +
			" │   │               └─ columns: [a b]\n" +
			" │   └─ HashLookup\n" +
			" │       ├─ left-key: ()\n" +
			" │       ├─ right-key: ()\n" +
			" │       └─ Table\n" +
			" │           ├─ name: uv\n" +
			" │           └─ columns: [u v]\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: ()\n" +
			"     ├─ right-key: ()\n" +
			"     └─ Table\n" +
			"         ├─ name: pq\n" +
			"         └─ columns: [p q]\n" +
			"",
		ExpectedAnalysis: "CrossHashJoin (estimated cost=17.100 rows=5) (actual rows=256 loops=1)\n" +
			" ├─ CrossHashJoin (estimated cost=113.050 rows=5) (actual rows=64 loops=1)\n" +
			" │   ├─ SubqueryAlias\n" +
			" │   │   ├─ name: alias1\n" +
			" │   │   ├─ outerVisibility: false\n" +
			" │   │   ├─ isLateral: false\n" +
			" │   │   ├─ cacheable: true\n" +
			" │   │   └─ Project\n" +
			" │   │       ├─ columns: [ab.a, ab.b, xy.x, xy.y]\n" +
			" │   │       └─ CrossJoin\n" +
			" │   │           ├─ Table\n" +
			" │   │           │   ├─ name: xy\n" +
			" │   │           │   └─ columns: [x y]\n" +
			" │   │           └─ Table\n" +
			" │   │               ├─ name: ab\n" +
			" │   │               └─ columns: [a b]\n" +
			" │   └─ HashLookup\n" +
			" │       ├─ left-key: ()\n" +
			" │       ├─ right-key: ()\n" +
			" │       └─ Table\n" +
			" │           ├─ name: uv\n" +
			" │           └─ columns: [u v]\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: ()\n" +
			"     ├─ right-key: ()\n" +
			"     └─ Table\n" +
			"         ├─ name: pq\n" +
			"         └─ columns: [p q]\n" +
			"",
	},
	{
		Query: `
	select * from
	(
	 select * from ab
	 where not exists (select * from xy where a = x)
	) alias1
	left join pq on alias1.a = p
	where exists (select * from uv where a = u)
	`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [alias1.a:0!null, alias1.b:1, pq.p:2!null, pq.q:3]\n" +
			" └─ SemiJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ alias1.a:0!null\n" +
			"     │   └─ uv.u:4!null\n" +
			"     ├─ LeftOuterHashJoin\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ alias1.a:0!null\n" +
			"     │   │   └─ pq.p:2!null\n" +
			"     │   ├─ SubqueryAlias\n" +
			"     │   │   ├─ name: alias1\n" +
			"     │   │   ├─ outerVisibility: false\n" +
			"     │   │   ├─ isLateral: false\n" +
			"     │   │   ├─ cacheable: true\n" +
			"     │   │   ├─ colSet: (5,6)\n" +
			"     │   │   ├─ tableId: 3\n" +
			"     │   │   └─ Project\n" +
			"     │   │       ├─ columns: [ab.a:0!null, ab.b:1]\n" +
			"     │   │       └─ Filter\n" +
			"     │   │           ├─ xy.x:2!null IS NULL\n" +
			"     │   │           └─ LeftOuterMergeJoin\n" +
			"     │   │               ├─ cmp: Eq\n" +
			"     │   │               │   ├─ ab.a:0!null\n" +
			"     │   │               │   └─ xy.x:2!null\n" +
			"     │   │               ├─ IndexedTableAccess(ab)\n" +
			"     │   │               │   ├─ index: [ab.a]\n" +
			"     │   │               │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │   │               │   ├─ colSet: (1,2)\n" +
			"     │   │               │   ├─ tableId: 1\n" +
			"     │   │               │   └─ Table\n" +
			"     │   │               │       ├─ name: ab\n" +
			"     │   │               │       └─ columns: [a b]\n" +
			"     │   │               └─ Project\n" +
			"     │   │                   ├─ columns: [xy.x:0!null]\n" +
			"     │   │                   └─ IndexedTableAccess(xy)\n" +
			"     │   │                       ├─ index: [xy.x]\n" +
			"     │   │                       ├─ static: [{[NULL, ∞)}]\n" +
			"     │   │                       ├─ colSet: (3,4)\n" +
			"     │   │                       ├─ tableId: 2\n" +
			"     │   │                       └─ Table\n" +
			"     │   │                           ├─ name: xy\n" +
			"     │   │                           └─ columns: [x y]\n" +
			"     │   └─ HashLookup\n" +
			"     │       ├─ left-key: TUPLE(alias1.a:0!null)\n" +
			"     │       ├─ right-key: TUPLE(pq.p:0!null)\n" +
			"     │       └─ ProcessTable\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: pq\n" +
			"     │               └─ columns: [p q]\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: uv\n" +
			"             └─ columns: [u v]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [alias1.a, alias1.b, pq.p, pq.q]\n" +
			" └─ SemiJoin (estimated cost=15.100 rows=5)\n" +
			"     ├─ (alias1.a = uv.u)\n" +
			"     ├─ LeftOuterHashJoin (estimated cost=113.050 rows=5)\n" +
			"     │   ├─ (alias1.a = pq.p)\n" +
			"     │   ├─ SubqueryAlias\n" +
			"     │   │   ├─ name: alias1\n" +
			"     │   │   ├─ outerVisibility: false\n" +
			"     │   │   ├─ isLateral: false\n" +
			"     │   │   ├─ cacheable: true\n" +
			"     │   │   └─ Project\n" +
			"     │   │       ├─ columns: [ab.a, ab.b]\n" +
			"     │   │       └─ Filter\n" +
			"     │   │           ├─ xy.x IS NULL\n" +
			"     │   │           └─ LeftOuterMergeJoin\n" +
			"     │   │               ├─ cmp: (ab.a = xy.x)\n" +
			"     │   │               ├─ IndexedTableAccess(ab)\n" +
			"     │   │               │   ├─ index: [ab.a]\n" +
			"     │   │               │   └─ filters: [{[NULL, ∞)}]\n" +
			"     │   │               └─ Project\n" +
			"     │   │                   ├─ columns: [xy.x]\n" +
			"     │   │                   └─ IndexedTableAccess(xy)\n" +
			"     │   │                       ├─ index: [xy.x]\n" +
			"     │   │                       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │                       └─ columns: [x y]\n" +
			"     │   └─ HashLookup\n" +
			"     │       ├─ left-key: (alias1.a)\n" +
			"     │       ├─ right-key: (pq.p)\n" +
			"     │       └─ Table\n" +
			"     │           └─ name: pq\n" +
			"     └─ Table\n" +
			"         ├─ name: uv\n" +
			"         └─ columns: [u v]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [alias1.a, alias1.b, pq.p, pq.q]\n" +
			" └─ SemiJoin (estimated cost=15.100 rows=5) (actual rows=0 loops=1)\n" +
			"     ├─ (alias1.a = uv.u)\n" +
			"     ├─ LeftOuterHashJoin (estimated cost=113.050 rows=5) (actual rows=0 loops=1)\n" +
			"     │   ├─ (alias1.a = pq.p)\n" +
			"     │   ├─ SubqueryAlias\n" +
			"     │   │   ├─ name: alias1\n" +
			"     │   │   ├─ outerVisibility: false\n" +
			"     │   │   ├─ isLateral: false\n" +
			"     │   │   ├─ cacheable: true\n" +
			"     │   │   └─ Project\n" +
			"     │   │       ├─ columns: [ab.a, ab.b]\n" +
			"     │   │       └─ Filter\n" +
			"     │   │           ├─ xy.x IS NULL\n" +
			"     │   │           └─ LeftOuterMergeJoin\n" +
			"     │   │               ├─ cmp: (ab.a = xy.x)\n" +
			"     │   │               ├─ IndexedTableAccess(ab)\n" +
			"     │   │               │   ├─ index: [ab.a]\n" +
			"     │   │               │   └─ filters: [{[NULL, ∞)}]\n" +
			"     │   │               └─ Project\n" +
			"     │   │                   ├─ columns: [xy.x]\n" +
			"     │   │                   └─ IndexedTableAccess(xy)\n" +
			"     │   │                       ├─ index: [xy.x]\n" +
			"     │   │                       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │                       └─ columns: [x y]\n" +
			"     │   └─ HashLookup\n" +
			"     │       ├─ left-key: (alias1.a)\n" +
			"     │       ├─ right-key: (pq.p)\n" +
			"     │       └─ Table\n" +
			"     │           └─ name: pq\n" +
			"     └─ Table\n" +
			"         ├─ name: uv\n" +
			"         └─ columns: [u v]\n" +
			"",
	},
	{
		Query: `select i from mytable a where exists (select 1 from mytable b where a.i = b.i)`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:0!null]\n" +
			" └─ Project\n" +
			"     ├─ columns: [a.i:0!null, a.s:1!null]\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ a.i:0!null\n" +
			"         │   └─ b.i:2!null\n" +
			"         ├─ TableAlias(a)\n" +
			"         │   └─ IndexedTableAccess(mytable)\n" +
			"         │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │       ├─ colSet: (1,2)\n" +
			"         │       ├─ tableId: 1\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: mytable\n" +
			"         │           └─ columns: [i s]\n" +
			"         └─ TableAlias(b)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ static: [{[NULL, ∞)}]\n" +
			"                 ├─ colSet: (3,4)\n" +
			"                 ├─ tableId: 2\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i]\n" +
			" └─ Project\n" +
			"     ├─ columns: [a.i, a.s]\n" +
			"     └─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"         ├─ cmp: (a.i = b.i)\n" +
			"         ├─ TableAlias(a)\n" +
			"         │   └─ IndexedTableAccess(mytable)\n" +
			"         │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │       └─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ TableAlias(b)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i]\n" +
			" └─ Project\n" +
			"     ├─ columns: [a.i, a.s]\n" +
			"     └─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=1)\n" +
			"         ├─ cmp: (a.i = b.i)\n" +
			"         ├─ TableAlias(a)\n" +
			"         │   └─ IndexedTableAccess(mytable)\n" +
			"         │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │       └─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ TableAlias(b)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 └─ columns: [i]\n" +
			"",
	},
	{
		Query: `select i from mytable a where not exists (select 1 from mytable b where a.i = b.i)`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:0!null]\n" +
			" └─ Project\n" +
			"     ├─ columns: [a.i:0!null, a.s:1!null]\n" +
			"     └─ Filter\n" +
			"         ├─ b.i:2!null IS NULL\n" +
			"         └─ LeftOuterMergeJoin\n" +
			"             ├─ cmp: Eq\n" +
			"             │   ├─ a.i:0!null\n" +
			"             │   └─ b.i:2!null\n" +
			"             ├─ TableAlias(a)\n" +
			"             │   └─ IndexedTableAccess(mytable)\n" +
			"             │       ├─ index: [mytable.i,mytable.s]\n" +
			"             │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             │       ├─ colSet: (1,2)\n" +
			"             │       ├─ tableId: 1\n" +
			"             │       └─ Table\n" +
			"             │           ├─ name: mytable\n" +
			"             │           └─ columns: [i s]\n" +
			"             └─ TableAlias(b)\n" +
			"                 └─ IndexedTableAccess(mytable)\n" +
			"                     ├─ index: [mytable.i,mytable.s]\n" +
			"                     ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                     ├─ colSet: (3,4)\n" +
			"                     ├─ tableId: 2\n" +
			"                     └─ Table\n" +
			"                         ├─ name: mytable\n" +
			"                         └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i]\n" +
			" └─ Project\n" +
			"     ├─ columns: [a.i, a.s]\n" +
			"     └─ Filter\n" +
			"         ├─ b.i IS NULL\n" +
			"         └─ LeftOuterMergeJoin (estimated cost=6.120 rows=3)\n" +
			"             ├─ cmp: (a.i = b.i)\n" +
			"             ├─ TableAlias(a)\n" +
			"             │   └─ IndexedTableAccess(mytable)\n" +
			"             │       ├─ index: [mytable.i,mytable.s]\n" +
			"             │       └─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ TableAlias(b)\n" +
			"                 └─ IndexedTableAccess(mytable)\n" +
			"                     ├─ index: [mytable.i,mytable.s]\n" +
			"                     ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                     └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i]\n" +
			" └─ Project\n" +
			"     ├─ columns: [a.i, a.s]\n" +
			"     └─ Filter\n" +
			"         ├─ b.i IS NULL\n" +
			"         └─ LeftOuterMergeJoin (estimated cost=6.120 rows=3) (actual rows=3 loops=1)\n" +
			"             ├─ cmp: (a.i = b.i)\n" +
			"             ├─ TableAlias(a)\n" +
			"             │   └─ IndexedTableAccess(mytable)\n" +
			"             │       ├─ index: [mytable.i,mytable.s]\n" +
			"             │       └─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ TableAlias(b)\n" +
			"                 └─ IndexedTableAccess(mytable)\n" +
			"                     ├─ index: [mytable.i,mytable.s]\n" +
			"                     ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                     └─ columns: [i]\n" +
			"",
	},
	{
		Query: `select i from mytable full join othertable on mytable.i = othertable.i2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mytable.i:0!null]\n" +
			" └─ FullOuterJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ mytable.i:0!null\n" +
			"     │   └─ othertable.i2:1!null\n" +
			"     ├─ ProcessTable\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: othertable\n" +
			"             └─ columns: [i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mytable.i]\n" +
			" └─ FullOuterJoin (estimated cost=16.180 rows=3)\n" +
			"     ├─ (mytable.i = othertable.i2)\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: mytable\n" +
			"     │   └─ columns: [i]\n" +
			"     └─ Table\n" +
			"         ├─ name: othertable\n" +
			"         └─ columns: [i2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mytable.i]\n" +
			" └─ FullOuterJoin (estimated cost=16.180 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ (mytable.i = othertable.i2)\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: mytable\n" +
			"     │   └─ columns: [i]\n" +
			"     └─ Table\n" +
			"         ├─ name: othertable\n" +
			"         └─ columns: [i2]\n" +
			"",
	},
	{
		Query: `SELECT mytable.i FROM mytable INNER JOIN othertable ON (mytable.i = othertable.i2) LEFT JOIN othertable T4 ON (mytable.i = T4.i2) ORDER BY othertable.i2, T4.s2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mytable.i:0!null]\n" +
			" └─ Sort(othertable.i2:1!null ASC nullsFirst, t4.s2:2!null ASC nullsFirst)\n" +
			"     └─ LeftOuterJoin\n" +
			"         ├─ Eq\n" +
			"         │   ├─ mytable.i:0!null\n" +
			"         │   └─ t4.i2:3!null\n" +
			"         ├─ MergeJoin\n" +
			"         │   ├─ cmp: Eq\n" +
			"         │   │   ├─ mytable.i:0!null\n" +
			"         │   │   └─ othertable.i2:1!null\n" +
			"         │   ├─ IndexedTableAccess(mytable)\n" +
			"         │   │   ├─ index: [mytable.i,mytable.s]\n" +
			"         │   │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │   │   ├─ colSet: (1,2)\n" +
			"         │   │   ├─ tableId: 1\n" +
			"         │   │   └─ Table\n" +
			"         │   │       ├─ name: mytable\n" +
			"         │   │       └─ columns: [i]\n" +
			"         │   └─ IndexedTableAccess(othertable)\n" +
			"         │       ├─ index: [othertable.i2]\n" +
			"         │       ├─ static: [{[NULL, ∞)}]\n" +
			"         │       ├─ colSet: (3,4)\n" +
			"         │       ├─ tableId: 2\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: othertable\n" +
			"         │           └─ columns: [i2]\n" +
			"         └─ TableAlias(t4)\n" +
			"             └─ ProcessTable\n" +
			"                 └─ Table\n" +
			"                     ├─ name: othertable\n" +
			"                     └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mytable.i]\n" +
			" └─ Sort(othertable.i2 ASC, t4.s2 ASC)\n" +
			"     └─ LeftOuterJoin\n" +
			"         ├─ (mytable.i = t4.i2)\n" +
			"         ├─ MergeJoin\n" +
			"         │   ├─ cmp: (mytable.i = othertable.i2)\n" +
			"         │   ├─ IndexedTableAccess(mytable)\n" +
			"         │   │   ├─ index: [mytable.i,mytable.s]\n" +
			"         │   │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │   │   └─ columns: [i]\n" +
			"         │   └─ IndexedTableAccess(othertable)\n" +
			"         │       ├─ index: [othertable.i2]\n" +
			"         │       ├─ filters: [{[NULL, ∞)}]\n" +
			"         │       └─ columns: [i2]\n" +
			"         └─ TableAlias(t4)\n" +
			"             └─ Table\n" +
			"                 ├─ name: othertable\n" +
			"                 └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mytable.i]\n" +
			" └─ Sort(othertable.i2 ASC, t4.s2 ASC)\n" +
			"     └─ LeftOuterJoin\n" +
			"         ├─ (mytable.i = t4.i2)\n" +
			"         ├─ MergeJoin\n" +
			"         │   ├─ cmp: (mytable.i = othertable.i2)\n" +
			"         │   ├─ IndexedTableAccess(mytable)\n" +
			"         │   │   ├─ index: [mytable.i,mytable.s]\n" +
			"         │   │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │   │   └─ columns: [i]\n" +
			"         │   └─ IndexedTableAccess(othertable)\n" +
			"         │       ├─ index: [othertable.i2]\n" +
			"         │       ├─ filters: [{[NULL, ∞)}]\n" +
			"         │       └─ columns: [i2]\n" +
			"         └─ TableAlias(t4)\n" +
			"             └─ Table\n" +
			"                 ├─ name: othertable\n" +
			"                 └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT * FROM one_pk ORDER BY pk`,
		ExpectedPlan: "IndexedTableAccess(one_pk)\n" +
			" ├─ index: [one_pk.pk]\n" +
			" ├─ static: [{[NULL, ∞)}]\n" +
			" ├─ colSet: (1-6)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: one_pk\n" +
			"     └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(one_pk)\n" +
			" ├─ index: [one_pk.pk]\n" +
			" ├─ filters: [{[NULL, ∞)}]\n" +
			" └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(one_pk)\n" +
			" ├─ index: [one_pk.pk]\n" +
			" ├─ filters: [{[NULL, ∞)}]\n" +
			" └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
	},
	{
		Query: `SELECT * FROM two_pk ORDER BY pk1, pk2`,
		ExpectedPlan: "IndexedTableAccess(two_pk)\n" +
			" ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			" ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" ├─ colSet: (1-7)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: two_pk\n" +
			"     └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(two_pk)\n" +
			" ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			" ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(two_pk)\n" +
			" ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			" ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
	},
	{
		Query: `SELECT * FROM two_pk ORDER BY pk1`,
		ExpectedPlan: "IndexedTableAccess(two_pk)\n" +
			" ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			" ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" ├─ colSet: (1-7)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: two_pk\n" +
			"     └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(two_pk)\n" +
			" ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			" ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(two_pk)\n" +
			" ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			" ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
	},
	{
		Query: `SELECT pk1 AS one, pk2 AS two FROM two_pk ORDER BY pk1, pk2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [two_pk.pk1:0!null as one, two_pk.pk2:1!null as two]\n" +
			" └─ Project\n" +
			"     ├─ columns: [two_pk.pk1:0!null, two_pk.pk2:1!null, two_pk.c1:2!null, two_pk.c2:3!null, two_pk.c3:4!null, two_pk.c4:5!null, two_pk.c5:6!null, two_pk.pk1:0!null as one, two_pk.pk2:1!null as two]\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         ├─ colSet: (1-7)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: two_pk\n" +
			"             └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [two_pk.pk1 as one, two_pk.pk2 as two]\n" +
			" └─ Project\n" +
			"     ├─ columns: [two_pk.pk1, two_pk.pk2, two_pk.c1, two_pk.c2, two_pk.c3, two_pk.c4, two_pk.c5, two_pk.pk1 as one, two_pk.pk2 as two]\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [two_pk.pk1 as one, two_pk.pk2 as two]\n" +
			" └─ Project\n" +
			"     ├─ columns: [two_pk.pk1, two_pk.pk2, two_pk.c1, two_pk.c2, two_pk.c3, two_pk.c4, two_pk.c5, two_pk.pk1 as one, two_pk.pk2 as two]\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
	},
	{
		Query: `SELECT pk1 AS one, pk2 AS two FROM two_pk ORDER BY one, two`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [two_pk.pk1:0!null as one, two_pk.pk2:1!null as two]\n" +
			" └─ Project\n" +
			"     ├─ columns: [two_pk.pk1:0!null, two_pk.pk2:1!null, two_pk.c1:2!null, two_pk.c2:3!null, two_pk.c3:4!null, two_pk.c4:5!null, two_pk.c5:6!null, two_pk.pk1:0!null as one, two_pk.pk2:1!null as two]\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         ├─ colSet: (1-7)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: two_pk\n" +
			"             └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [two_pk.pk1 as one, two_pk.pk2 as two]\n" +
			" └─ Project\n" +
			"     ├─ columns: [two_pk.pk1, two_pk.pk2, two_pk.c1, two_pk.c2, two_pk.c3, two_pk.c4, two_pk.c5, two_pk.pk1 as one, two_pk.pk2 as two]\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [two_pk.pk1 as one, two_pk.pk2 as two]\n" +
			" └─ Project\n" +
			"     ├─ columns: [two_pk.pk1, two_pk.pk2, two_pk.c1, two_pk.c2, two_pk.c3, two_pk.c4, two_pk.c5, two_pk.pk1 as one, two_pk.pk2 as two]\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
	},
	{
		Query: `SELECT t1.i FROM mytable t1 JOIN mytable t2 on t1.i = t2.i + 1 where t1.i = 2 and t2.i = 1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [t1.i:0!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ t1.i:0!null\n" +
			"     │   └─ (t2.i:1!null + 1 (tinyint))\n" +
			"     ├─ TableAlias(t1)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ static: [{[2, 2]}]\n" +
			"     │       ├─ colSet: (1,2)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i]\n" +
			"     └─ Filter\n" +
			"         ├─ Eq\n" +
			"         │   ├─ t2.i:0!null\n" +
			"         │   └─ 1 (bigint)\n" +
			"         └─ TableAlias(t2)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ keys: [1 (bigint)]\n" +
			"                 ├─ colSet: (3,4)\n" +
			"                 ├─ tableId: 2\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [t1.i]\n" +
			" └─ LookupJoin (estimated cost=9.900 rows=3)\n" +
			"     ├─ (t1.i = (t2.i + 1))\n" +
			"     ├─ TableAlias(t1)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ filters: [{[2, 2]}]\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ Filter\n" +
			"         ├─ (t2.i = 1)\n" +
			"         └─ TableAlias(t2)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ columns: [i]\n" +
			"                 └─ keys: 1\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [t1.i]\n" +
			" └─ LookupJoin (estimated cost=9.900 rows=3) (actual rows=1 loops=1)\n" +
			"     ├─ (t1.i = (t2.i + 1))\n" +
			"     ├─ TableAlias(t1)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ filters: [{[2, 2]}]\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ Filter\n" +
			"         ├─ (t2.i = 1)\n" +
			"         └─ TableAlias(t2)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ columns: [i]\n" +
			"                 └─ keys: 1\n" +
			"",
	},
	{
		Query: `select row_number() over (order by i desc), mytable.i as i2
				from mytable join othertable on i = i2 order by 1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [row_number() over ( order by mytable.i desc):0!null as row_number() over (order by i desc), mytable.i:1!null as i2]\n" +
			" └─ Sort(row_number() over ( order by mytable.i desc):0!null as row_number() over (order by i desc) ASC nullsFirst)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [row_number() over ( order by mytable.i desc):0!null, mytable.i:1!null, mytable.i:1!null as i2]\n" +
			"         └─ Window\n" +
			"             ├─ row_number() over ( order by mytable.i DESC)\n" +
			"             ├─ mytable.i:0!null\n" +
			"             └─ MergeJoin\n" +
			"                 ├─ cmp: Eq\n" +
			"                 │   ├─ mytable.i:0!null\n" +
			"                 │   └─ othertable.i2:1!null\n" +
			"                 ├─ IndexedTableAccess(mytable)\n" +
			"                 │   ├─ index: [mytable.i,mytable.s]\n" +
			"                 │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 │   ├─ colSet: (1,2)\n" +
			"                 │   ├─ tableId: 1\n" +
			"                 │   └─ Table\n" +
			"                 │       ├─ name: mytable\n" +
			"                 │       └─ columns: [i]\n" +
			"                 └─ IndexedTableAccess(othertable)\n" +
			"                     ├─ index: [othertable.i2]\n" +
			"                     ├─ static: [{[NULL, ∞)}]\n" +
			"                     ├─ colSet: (3,4)\n" +
			"                     ├─ tableId: 2\n" +
			"                     └─ Table\n" +
			"                         ├─ name: othertable\n" +
			"                         └─ columns: [i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [row_number() over ( order by mytable.i desc) as row_number() over (order by i desc), mytable.i as i2]\n" +
			" └─ Sort(row_number() over ( order by mytable.i desc) as row_number() over (order by i desc) ASC)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [row_number() over ( order by mytable.i desc), mytable.i, mytable.i as i2]\n" +
			"         └─ Window(row_number() over ( order by mytable.i DESC), mytable.i)\n" +
			"             └─ MergeJoin\n" +
			"                 ├─ cmp: (mytable.i = othertable.i2)\n" +
			"                 ├─ IndexedTableAccess(mytable)\n" +
			"                 │   ├─ index: [mytable.i,mytable.s]\n" +
			"                 │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 │   └─ columns: [i]\n" +
			"                 └─ IndexedTableAccess(othertable)\n" +
			"                     ├─ index: [othertable.i2]\n" +
			"                     ├─ filters: [{[NULL, ∞)}]\n" +
			"                     └─ columns: [i2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [row_number() over ( order by mytable.i desc) as row_number() over (order by i desc), mytable.i as i2]\n" +
			" └─ Sort(row_number() over ( order by mytable.i desc) as row_number() over (order by i desc) ASC)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [row_number() over ( order by mytable.i desc), mytable.i, mytable.i as i2]\n" +
			"         └─ Window(row_number() over ( order by mytable.i DESC), mytable.i)\n" +
			"             └─ MergeJoin\n" +
			"                 ├─ cmp: (mytable.i = othertable.i2)\n" +
			"                 ├─ IndexedTableAccess(mytable)\n" +
			"                 │   ├─ index: [mytable.i,mytable.s]\n" +
			"                 │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 │   └─ columns: [i]\n" +
			"                 └─ IndexedTableAccess(othertable)\n" +
			"                     ├─ index: [othertable.i2]\n" +
			"                     ├─ filters: [{[NULL, ∞)}]\n" +
			"                     └─ columns: [i2]\n" +
			"",
	},
	{
		Query: `SELECT * FROM one_pk_two_idx WHERE v1 < 2 AND v2 IS NOT NULL`,
		ExpectedPlan: "Filter\n" +
			" ├─ NOT\n" +
			" │   └─ one_pk_two_idx.v2:2 IS NULL\n" +
			" └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     ├─ index: [one_pk_two_idx.v1]\n" +
			"     ├─ static: [{(NULL, 2)}]\n" +
			"     ├─ colSet: (1-3)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: one_pk_two_idx\n" +
			"         └─ columns: [pk v1 v2]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (NOT(one_pk_two_idx.v2 IS NULL))\n" +
			" └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     ├─ index: [one_pk_two_idx.v1]\n" +
			"     ├─ filters: [{(NULL, 2)}]\n" +
			"     └─ columns: [pk v1 v2]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (NOT(one_pk_two_idx.v2 IS NULL))\n" +
			" └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     ├─ index: [one_pk_two_idx.v1]\n" +
			"     ├─ filters: [{(NULL, 2)}]\n" +
			"     └─ columns: [pk v1 v2]\n" +
			"",
	},
	{
		Query: `SELECT * FROM one_pk_two_idx WHERE v1 IN (1, 2) AND v2 <= 2`,
		ExpectedPlan: "Filter\n" +
			" ├─ AND\n" +
			" │   ├─ HashIn\n" +
			" │   │   ├─ one_pk_two_idx.v1:1\n" +
			" │   │   └─ TUPLE(1 (tinyint), 2 (tinyint))\n" +
			" │   └─ LessThanOrEqual\n" +
			" │       ├─ one_pk_two_idx.v2:2\n" +
			" │       └─ 2 (bigint)\n" +
			" └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     ├─ index: [one_pk_two_idx.v1]\n" +
			"     ├─ static: [{[1, 1]}, {[2, 2]}]\n" +
			"     ├─ colSet: (1-3)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: one_pk_two_idx\n" +
			"         └─ columns: [pk v1 v2]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ ((one_pk_two_idx.v1 HASH IN (1, 2)) AND (one_pk_two_idx.v2 <= 2))\n" +
			" └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     ├─ index: [one_pk_two_idx.v1]\n" +
			"     ├─ filters: [{[1, 1]}, {[2, 2]}]\n" +
			"     └─ columns: [pk v1 v2]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ ((one_pk_two_idx.v1 HASH IN (1, 2)) AND (one_pk_two_idx.v2 <= 2))\n" +
			" └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     ├─ index: [one_pk_two_idx.v1]\n" +
			"     ├─ filters: [{[1, 1]}, {[2, 2]}]\n" +
			"     └─ columns: [pk v1 v2]\n" +
			"",
	},
	{
		Query: `SELECT * FROM one_pk_three_idx WHERE v1 > 2 AND v2 = 3`,
		ExpectedPlan: "IndexedTableAccess(one_pk_three_idx)\n" +
			" ├─ index: [one_pk_three_idx.v1,one_pk_three_idx.v2,one_pk_three_idx.v3]\n" +
			" ├─ static: [{(2, ∞), [3, 3], [NULL, ∞)}]\n" +
			" ├─ colSet: (1-4)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: one_pk_three_idx\n" +
			"     └─ columns: [pk v1 v2 v3]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(one_pk_three_idx)\n" +
			" ├─ index: [one_pk_three_idx.v1,one_pk_three_idx.v2,one_pk_three_idx.v3]\n" +
			" ├─ filters: [{(2, ∞), [3, 3], [NULL, ∞)}]\n" +
			" └─ columns: [pk v1 v2 v3]\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(one_pk_three_idx)\n" +
			" ├─ index: [one_pk_three_idx.v1,one_pk_three_idx.v2,one_pk_three_idx.v3]\n" +
			" ├─ filters: [{(2, ∞), [3, 3], [NULL, ∞)}]\n" +
			" └─ columns: [pk v1 v2 v3]\n" +
			"",
	},
	{
		Query: `SELECT * FROM one_pk_three_idx WHERE v1 > 2 AND v3 = 3`,
		ExpectedPlan: "IndexedTableAccess(one_pk_three_idx)\n" +
			" ├─ index: [one_pk_three_idx.v1,one_pk_three_idx.v2,one_pk_three_idx.v3]\n" +
			" ├─ static: [{(2, ∞), [NULL, ∞), [3, 3]}]\n" +
			" ├─ colSet: (1-4)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: one_pk_three_idx\n" +
			"     └─ columns: [pk v1 v2 v3]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(one_pk_three_idx)\n" +
			" ├─ index: [one_pk_three_idx.v1,one_pk_three_idx.v2,one_pk_three_idx.v3]\n" +
			" ├─ filters: [{(2, ∞), [NULL, ∞), [3, 3]}]\n" +
			" └─ columns: [pk v1 v2 v3]\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(one_pk_three_idx)\n" +
			" ├─ index: [one_pk_three_idx.v1,one_pk_three_idx.v2,one_pk_three_idx.v3]\n" +
			" ├─ filters: [{(2, ∞), [NULL, ∞), [3, 3]}]\n" +
			" └─ columns: [pk v1 v2 v3]\n" +
			"",
	},
	{
		Query: `select row_number() over (order by i desc), mytable.i as i2
				from mytable join othertable on i = i2
				where mytable.i = 2
				order by 1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [row_number() over ( order by mytable.i desc):0!null as row_number() over (order by i desc), mytable.i:1!null as i2]\n" +
			" └─ Sort(row_number() over ( order by mytable.i desc):0!null as row_number() over (order by i desc) ASC nullsFirst)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [row_number() over ( order by mytable.i desc):0!null, mytable.i:1!null, mytable.i:1!null as i2]\n" +
			"         └─ Window\n" +
			"             ├─ row_number() over ( order by mytable.i DESC)\n" +
			"             ├─ mytable.i:1!null\n" +
			"             └─ MergeJoin\n" +
			"                 ├─ cmp: Eq\n" +
			"                 │   ├─ othertable.i2:0!null\n" +
			"                 │   └─ mytable.i:1!null\n" +
			"                 ├─ IndexedTableAccess(othertable)\n" +
			"                 │   ├─ index: [othertable.i2]\n" +
			"                 │   ├─ static: [{[NULL, ∞)}]\n" +
			"                 │   ├─ colSet: (3,4)\n" +
			"                 │   ├─ tableId: 2\n" +
			"                 │   └─ Table\n" +
			"                 │       ├─ name: othertable\n" +
			"                 │       └─ columns: [i2]\n" +
			"                 └─ Filter\n" +
			"                     ├─ Eq\n" +
			"                     │   ├─ mytable.i:0!null\n" +
			"                     │   └─ 2 (bigint)\n" +
			"                     └─ IndexedTableAccess(mytable)\n" +
			"                         ├─ index: [mytable.i,mytable.s]\n" +
			"                         ├─ static: [{[2, 2], [NULL, ∞)}]\n" +
			"                         ├─ colSet: (1,2)\n" +
			"                         ├─ tableId: 1\n" +
			"                         └─ Table\n" +
			"                             ├─ name: mytable\n" +
			"                             └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [row_number() over ( order by mytable.i desc) as row_number() over (order by i desc), mytable.i as i2]\n" +
			" └─ Sort(row_number() over ( order by mytable.i desc) as row_number() over (order by i desc) ASC)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [row_number() over ( order by mytable.i desc), mytable.i, mytable.i as i2]\n" +
			"         └─ Window(row_number() over ( order by mytable.i DESC), mytable.i)\n" +
			"             └─ MergeJoin\n" +
			"                 ├─ cmp: (othertable.i2 = mytable.i)\n" +
			"                 ├─ IndexedTableAccess(othertable)\n" +
			"                 │   ├─ index: [othertable.i2]\n" +
			"                 │   ├─ filters: [{[NULL, ∞)}]\n" +
			"                 │   └─ columns: [i2]\n" +
			"                 └─ Filter\n" +
			"                     ├─ (mytable.i = 2)\n" +
			"                     └─ IndexedTableAccess(mytable)\n" +
			"                         ├─ index: [mytable.i,mytable.s]\n" +
			"                         ├─ filters: [{[2, 2], [NULL, ∞)}]\n" +
			"                         └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [row_number() over ( order by mytable.i desc) as row_number() over (order by i desc), mytable.i as i2]\n" +
			" └─ Sort(row_number() over ( order by mytable.i desc) as row_number() over (order by i desc) ASC)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [row_number() over ( order by mytable.i desc), mytable.i, mytable.i as i2]\n" +
			"         └─ Window(row_number() over ( order by mytable.i DESC), mytable.i)\n" +
			"             └─ MergeJoin\n" +
			"                 ├─ cmp: (othertable.i2 = mytable.i)\n" +
			"                 ├─ IndexedTableAccess(othertable)\n" +
			"                 │   ├─ index: [othertable.i2]\n" +
			"                 │   ├─ filters: [{[NULL, ∞)}]\n" +
			"                 │   └─ columns: [i2]\n" +
			"                 └─ Filter\n" +
			"                     ├─ (mytable.i = 2)\n" +
			"                     └─ IndexedTableAccess(mytable)\n" +
			"                         ├─ index: [mytable.i,mytable.s]\n" +
			"                         ├─ filters: [{[2, 2], [NULL, ∞)}]\n" +
			"                         └─ columns: [i]\n" +
			"",
	},
	{
		Query: `INSERT INTO mytable(i,s) SELECT t1.i, 'hello' FROM mytable t1 JOIN mytable t2 on t1.i = t2.i + 1 where t1.i = 2 and t2.i = 1`,
		ExpectedPlan: "RowUpdateAccumulator\n" +
			" └─ Insert(i, s)\n" +
			"     ├─ InsertDestination\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ Project\n" +
			"         ├─ columns: [i:0!null, s:1!null]\n" +
			"         └─ Project\n" +
			"             ├─ columns: [t1.i:0!null, hello (longtext) as hello]\n" +
			"             └─ LookupJoin\n" +
			"                 ├─ Eq\n" +
			"                 │   ├─ t1.i:0!null\n" +
			"                 │   └─ (t2.i:1!null + 1 (tinyint))\n" +
			"                 ├─ TableAlias(t1)\n" +
			"                 │   └─ IndexedTableAccess(mytable)\n" +
			"                 │       ├─ index: [mytable.i]\n" +
			"                 │       ├─ static: [{[2, 2]}]\n" +
			"                 │       ├─ colSet: (3,4)\n" +
			"                 │       ├─ tableId: 2\n" +
			"                 │       └─ Table\n" +
			"                 │           ├─ name: mytable\n" +
			"                 │           └─ columns: [i]\n" +
			"                 └─ Filter\n" +
			"                     ├─ Eq\n" +
			"                     │   ├─ t2.i:0!null\n" +
			"                     │   └─ 1 (bigint)\n" +
			"                     └─ TableAlias(t2)\n" +
			"                         └─ IndexedTableAccess(mytable)\n" +
			"                             ├─ index: [mytable.i]\n" +
			"                             ├─ keys: [1 (bigint)]\n" +
			"                             ├─ colSet: (5,6)\n" +
			"                             ├─ tableId: 3\n" +
			"                             └─ Table\n" +
			"                                 ├─ name: mytable\n" +
			"                                 └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT /*+ JOIN_ORDER(t1, t2) */ t1.i FROM mytable t1 JOIN mytable t2 on t1.i = t2.i + 1 where t1.i = 2 and t2.i = 1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [t1.i:0!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ t1.i:0!null\n" +
			"     │   └─ (t2.i:1!null + 1 (tinyint))\n" +
			"     ├─ TableAlias(t1)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ static: [{[2, 2]}]\n" +
			"     │       ├─ colSet: (1,2)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i]\n" +
			"     └─ Filter\n" +
			"         ├─ Eq\n" +
			"         │   ├─ t2.i:0!null\n" +
			"         │   └─ 1 (bigint)\n" +
			"         └─ TableAlias(t2)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ keys: [1 (bigint)]\n" +
			"                 ├─ colSet: (3,4)\n" +
			"                 ├─ tableId: 2\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [t1.i]\n" +
			" └─ LookupJoin (estimated cost=9.900 rows=3)\n" +
			"     ├─ (t1.i = (t2.i + 1))\n" +
			"     ├─ TableAlias(t1)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ filters: [{[2, 2]}]\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ Filter\n" +
			"         ├─ (t2.i = 1)\n" +
			"         └─ TableAlias(t2)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ columns: [i]\n" +
			"                 └─ keys: 1\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [t1.i]\n" +
			" └─ LookupJoin (estimated cost=9.900 rows=3) (actual rows=1 loops=1)\n" +
			"     ├─ (t1.i = (t2.i + 1))\n" +
			"     ├─ TableAlias(t1)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ filters: [{[2, 2]}]\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ Filter\n" +
			"         ├─ (t2.i = 1)\n" +
			"         └─ TableAlias(t2)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ columns: [i]\n" +
			"                 └─ keys: 1\n" +
			"",
	},
	{
		Query: `SELECT /*+ JOIN_ORDER(t1, mytable) */ t1.i FROM mytable t1 JOIN mytable t2 on t1.i = t2.i + 1 where t1.i = 2 and t2.i = 1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [t1.i:0!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ t1.i:0!null\n" +
			"     │   └─ (t2.i:1!null + 1 (tinyint))\n" +
			"     ├─ TableAlias(t1)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ static: [{[2, 2]}]\n" +
			"     │       ├─ colSet: (1,2)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i]\n" +
			"     └─ Filter\n" +
			"         ├─ Eq\n" +
			"         │   ├─ t2.i:0!null\n" +
			"         │   └─ 1 (bigint)\n" +
			"         └─ TableAlias(t2)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ keys: [1 (bigint)]\n" +
			"                 ├─ colSet: (3,4)\n" +
			"                 ├─ tableId: 2\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [t1.i]\n" +
			" └─ LookupJoin (estimated cost=9.900 rows=3)\n" +
			"     ├─ (t1.i = (t2.i + 1))\n" +
			"     ├─ TableAlias(t1)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ filters: [{[2, 2]}]\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ Filter\n" +
			"         ├─ (t2.i = 1)\n" +
			"         └─ TableAlias(t2)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ columns: [i]\n" +
			"                 └─ keys: 1\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [t1.i]\n" +
			" └─ LookupJoin (estimated cost=9.900 rows=3) (actual rows=1 loops=1)\n" +
			"     ├─ (t1.i = (t2.i + 1))\n" +
			"     ├─ TableAlias(t1)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ filters: [{[2, 2]}]\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ Filter\n" +
			"         ├─ (t2.i = 1)\n" +
			"         └─ TableAlias(t2)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ columns: [i]\n" +
			"                 └─ keys: 1\n" +
			"",
	},
	{
		Query: `SELECT /*+ JOIN_ORDER(t1, t2, t3) */ t1.i FROM mytable t1 JOIN mytable t2 on t1.i = t2.i + 1 where t1.i = 2 and t2.i = 1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [t1.i:0!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ t1.i:0!null\n" +
			"     │   └─ (t2.i:1!null + 1 (tinyint))\n" +
			"     ├─ TableAlias(t1)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ static: [{[2, 2]}]\n" +
			"     │       ├─ colSet: (1,2)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i]\n" +
			"     └─ Filter\n" +
			"         ├─ Eq\n" +
			"         │   ├─ t2.i:0!null\n" +
			"         │   └─ 1 (bigint)\n" +
			"         └─ TableAlias(t2)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ keys: [1 (bigint)]\n" +
			"                 ├─ colSet: (3,4)\n" +
			"                 ├─ tableId: 2\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [t1.i]\n" +
			" └─ LookupJoin (estimated cost=9.900 rows=3)\n" +
			"     ├─ (t1.i = (t2.i + 1))\n" +
			"     ├─ TableAlias(t1)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ filters: [{[2, 2]}]\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ Filter\n" +
			"         ├─ (t2.i = 1)\n" +
			"         └─ TableAlias(t2)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ columns: [i]\n" +
			"                 └─ keys: 1\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [t1.i]\n" +
			" └─ LookupJoin (estimated cost=9.900 rows=3) (actual rows=1 loops=1)\n" +
			"     ├─ (t1.i = (t2.i + 1))\n" +
			"     ├─ TableAlias(t1)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ filters: [{[2, 2]}]\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ Filter\n" +
			"         ├─ (t2.i = 1)\n" +
			"         └─ TableAlias(t2)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ columns: [i]\n" +
			"                 └─ keys: 1\n" +
			"",
	},
	{
		Query: `SELECT t1.i FROM mytable t1 JOIN mytable t2 on t1.i = t2.i + 1 where t1.i = 2 and t2.i = 1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [t1.i:0!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ t1.i:0!null\n" +
			"     │   └─ (t2.i:1!null + 1 (tinyint))\n" +
			"     ├─ TableAlias(t1)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ static: [{[2, 2]}]\n" +
			"     │       ├─ colSet: (1,2)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i]\n" +
			"     └─ Filter\n" +
			"         ├─ Eq\n" +
			"         │   ├─ t2.i:0!null\n" +
			"         │   └─ 1 (bigint)\n" +
			"         └─ TableAlias(t2)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ keys: [1 (bigint)]\n" +
			"                 ├─ colSet: (3,4)\n" +
			"                 ├─ tableId: 2\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [t1.i]\n" +
			" └─ LookupJoin (estimated cost=9.900 rows=3)\n" +
			"     ├─ (t1.i = (t2.i + 1))\n" +
			"     ├─ TableAlias(t1)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ filters: [{[2, 2]}]\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ Filter\n" +
			"         ├─ (t2.i = 1)\n" +
			"         └─ TableAlias(t2)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ columns: [i]\n" +
			"                 └─ keys: 1\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [t1.i]\n" +
			" └─ LookupJoin (estimated cost=9.900 rows=3) (actual rows=1 loops=1)\n" +
			"     ├─ (t1.i = (t2.i + 1))\n" +
			"     ├─ TableAlias(t1)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ filters: [{[2, 2]}]\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ Filter\n" +
			"         ├─ (t2.i = 1)\n" +
			"         └─ TableAlias(t2)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ columns: [i]\n" +
			"                 └─ keys: 1\n" +
			"",
	},
	{
		Query: `SELECT i, i2, s2 FROM mytable INNER JOIN othertable ON i = i2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mytable.i:0!null, othertable.i2:2!null, othertable.s2:1!null]\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ mytable.i:0!null\n" +
			"     │   └─ othertable.i2:2!null\n" +
			"     ├─ IndexedTableAccess(mytable)\n" +
			"     │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   ├─ colSet: (1,2)\n" +
			"     │   ├─ tableId: 1\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ IndexedTableAccess(othertable)\n" +
			"         ├─ index: [othertable.i2]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (3,4)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: othertable\n" +
			"             └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			" └─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"     ├─ cmp: (mytable.i = othertable.i2)\n" +
			"     ├─ IndexedTableAccess(mytable)\n" +
			"     │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   └─ columns: [i]\n" +
			"     └─ IndexedTableAccess(othertable)\n" +
			"         ├─ index: [othertable.i2]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			" └─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ cmp: (mytable.i = othertable.i2)\n" +
			"     ├─ IndexedTableAccess(mytable)\n" +
			"     │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   └─ columns: [i]\n" +
			"     └─ IndexedTableAccess(othertable)\n" +
			"         ├─ index: [othertable.i2]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT i, i2, s2 FROM mytable INNER JOIN othertable ON i = i2 OR s = s2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mytable.i:0!null, othertable.i2:3!null, othertable.s2:2!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Or\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ mytable.i:0!null\n" +
			"     │   │   └─ othertable.i2:3!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ mytable.s:1!null\n" +
			"     │       └─ othertable.s2:2!null\n" +
			"     ├─ ProcessTable\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ Concat\n" +
			"         ├─ IndexedTableAccess(othertable)\n" +
			"         │   ├─ index: [othertable.s2]\n" +
			"         │   ├─ keys: [mytable.s:1!null]\n" +
			"         │   ├─ colSet: (3,4)\n" +
			"         │   ├─ tableId: 2\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: othertable\n" +
			"         │       └─ columns: [s2 i2]\n" +
			"         └─ IndexedTableAccess(othertable)\n" +
			"             ├─ index: [othertable.i2]\n" +
			"             ├─ keys: [mytable.i:0!null]\n" +
			"             ├─ colSet: (3,4)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: othertable\n" +
			"                 └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			" └─ LookupJoin (estimated cost=-2.705 rows=3)\n" +
			"     ├─ ((mytable.i = othertable.i2) OR (mytable.s = othertable.s2))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: mytable\n" +
			"     │   └─ columns: [i s]\n" +
			"     └─ Concat\n" +
			"         ├─ IndexedTableAccess(othertable)\n" +
			"         │   ├─ index: [othertable.s2]\n" +
			"         │   ├─ columns: [s2 i2]\n" +
			"         │   └─ keys: mytable.s\n" +
			"         └─ IndexedTableAccess(othertable)\n" +
			"             ├─ index: [othertable.i2]\n" +
			"             ├─ columns: [s2 i2]\n" +
			"             └─ keys: mytable.i\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			" └─ LookupJoin (estimated cost=-2.705 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ ((mytable.i = othertable.i2) OR (mytable.s = othertable.s2))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: mytable\n" +
			"     │   └─ columns: [i s]\n" +
			"     └─ Concat\n" +
			"         ├─ IndexedTableAccess(othertable)\n" +
			"         │   ├─ index: [othertable.s2]\n" +
			"         │   ├─ columns: [s2 i2]\n" +
			"         │   └─ keys: mytable.s\n" +
			"         └─ IndexedTableAccess(othertable)\n" +
			"             ├─ index: [othertable.i2]\n" +
			"             ├─ columns: [s2 i2]\n" +
			"             └─ keys: mytable.i\n" +
			"",
	},
	{
		Query: `SELECT i, i2, s2 FROM mytable INNER JOIN othertable ot ON i = i2 OR s = s2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mytable.i:0!null, ot.i2:3!null, ot.s2:2!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Or\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ mytable.i:0!null\n" +
			"     │   │   └─ ot.i2:3!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ mytable.s:1!null\n" +
			"     │       └─ ot.s2:2!null\n" +
			"     ├─ ProcessTable\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(ot)\n" +
			"         └─ Concat\n" +
			"             ├─ TableAlias(ot)\n" +
			"             │   └─ IndexedTableAccess(othertable)\n" +
			"             │       ├─ index: [othertable.s2]\n" +
			"             │       ├─ keys: [mytable.s:1!null]\n" +
			"             │       ├─ colSet: (3,4)\n" +
			"             │       ├─ tableId: 2\n" +
			"             │       └─ Table\n" +
			"             │           ├─ name: othertable\n" +
			"             │           └─ columns: [s2 i2]\n" +
			"             └─ TableAlias(ot)\n" +
			"                 └─ IndexedTableAccess(othertable)\n" +
			"                     ├─ index: [othertable.i2]\n" +
			"                     ├─ keys: [mytable.i:0!null]\n" +
			"                     ├─ colSet: (3,4)\n" +
			"                     ├─ tableId: 2\n" +
			"                     └─ Table\n" +
			"                         ├─ name: othertable\n" +
			"                         └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mytable.i, ot.i2, ot.s2]\n" +
			" └─ LookupJoin (estimated cost=-2.705 rows=3)\n" +
			"     ├─ ((mytable.i = ot.i2) OR (mytable.s = ot.s2))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: mytable\n" +
			"     │   └─ columns: [i s]\n" +
			"     └─ TableAlias(ot)\n" +
			"         └─ Concat\n" +
			"             ├─ TableAlias(ot)\n" +
			"             │   └─ IndexedTableAccess(othertable)\n" +
			"             │       ├─ index: [othertable.s2]\n" +
			"             │       ├─ columns: [s2 i2]\n" +
			"             │       └─ keys: mytable.s\n" +
			"             └─ TableAlias(ot)\n" +
			"                 └─ IndexedTableAccess(othertable)\n" +
			"                     ├─ index: [othertable.i2]\n" +
			"                     ├─ columns: [s2 i2]\n" +
			"                     └─ keys: mytable.i\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mytable.i, ot.i2, ot.s2]\n" +
			" └─ LookupJoin (estimated cost=-2.705 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ ((mytable.i = ot.i2) OR (mytable.s = ot.s2))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: mytable\n" +
			"     │   └─ columns: [i s]\n" +
			"     └─ TableAlias(ot)\n" +
			"         └─ Concat\n" +
			"             ├─ TableAlias(ot)\n" +
			"             │   └─ IndexedTableAccess(othertable)\n" +
			"             │       ├─ index: [othertable.s2]\n" +
			"             │       ├─ columns: [s2 i2]\n" +
			"             │       └─ keys: mytable.s\n" +
			"             └─ TableAlias(ot)\n" +
			"                 └─ IndexedTableAccess(othertable)\n" +
			"                     ├─ index: [othertable.i2]\n" +
			"                     ├─ columns: [s2 i2]\n" +
			"                     └─ keys: mytable.i\n" +
			"",
	},
	{
		Query: `SELECT i, i2, s2 FROM mytable INNER JOIN othertable ON i = i2 OR SUBSTRING_INDEX(s, ' ', 1) = s2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mytable.i:0!null, othertable.i2:3!null, othertable.s2:2!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Or\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ mytable.i:0!null\n" +
			"     │   │   └─ othertable.i2:3!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ SUBSTRING_INDEX(mytable.s, ' ', 1)\n" +
			"     │       └─ othertable.s2:2!null\n" +
			"     ├─ ProcessTable\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ Concat\n" +
			"         ├─ IndexedTableAccess(othertable)\n" +
			"         │   ├─ index: [othertable.s2]\n" +
			"         │   ├─ keys: [SUBSTRING_INDEX(mytable.s, ' ', 1)]\n" +
			"         │   ├─ colSet: (3,4)\n" +
			"         │   ├─ tableId: 2\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: othertable\n" +
			"         │       └─ columns: [s2 i2]\n" +
			"         └─ IndexedTableAccess(othertable)\n" +
			"             ├─ index: [othertable.i2]\n" +
			"             ├─ keys: [mytable.i:0!null]\n" +
			"             ├─ colSet: (3,4)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: othertable\n" +
			"                 └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			" └─ LookupJoin (estimated cost=-2.705 rows=3)\n" +
			"     ├─ ((mytable.i = othertable.i2) OR (SUBSTRING_INDEX(mytable.s, ' ', 1) = othertable.s2))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: mytable\n" +
			"     │   └─ columns: [i s]\n" +
			"     └─ Concat\n" +
			"         ├─ IndexedTableAccess(othertable)\n" +
			"         │   ├─ index: [othertable.s2]\n" +
			"         │   ├─ columns: [s2 i2]\n" +
			"         │   └─ keys: SUBSTRING_INDEX(mytable.s, ' ', 1)\n" +
			"         └─ IndexedTableAccess(othertable)\n" +
			"             ├─ index: [othertable.i2]\n" +
			"             ├─ columns: [s2 i2]\n" +
			"             └─ keys: mytable.i\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			" └─ LookupJoin (estimated cost=-2.705 rows=3) (actual rows=5 loops=1)\n" +
			"     ├─ ((mytable.i = othertable.i2) OR (SUBSTRING_INDEX(mytable.s, ' ', 1) = othertable.s2))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: mytable\n" +
			"     │   └─ columns: [i s]\n" +
			"     └─ Concat\n" +
			"         ├─ IndexedTableAccess(othertable)\n" +
			"         │   ├─ index: [othertable.s2]\n" +
			"         │   ├─ columns: [s2 i2]\n" +
			"         │   └─ keys: SUBSTRING_INDEX(mytable.s, ' ', 1)\n" +
			"         └─ IndexedTableAccess(othertable)\n" +
			"             ├─ index: [othertable.i2]\n" +
			"             ├─ columns: [s2 i2]\n" +
			"             └─ keys: mytable.i\n" +
			"",
	},
	{
		Query: `SELECT i, i2, s2 FROM mytable INNER JOIN othertable ON i = i2 OR SUBSTRING_INDEX(s, ' ', 1) = s2 OR SUBSTRING_INDEX(s, ' ', 2) = s2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mytable.i:0!null, othertable.i2:3!null, othertable.s2:2!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Or\n" +
			"     │   ├─ Or\n" +
			"     │   │   ├─ Eq\n" +
			"     │   │   │   ├─ mytable.i:0!null\n" +
			"     │   │   │   └─ othertable.i2:3!null\n" +
			"     │   │   └─ Eq\n" +
			"     │   │       ├─ SUBSTRING_INDEX(mytable.s, ' ', 1)\n" +
			"     │   │       └─ othertable.s2:2!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ SUBSTRING_INDEX(mytable.s, ' ', 2)\n" +
			"     │       └─ othertable.s2:2!null\n" +
			"     ├─ ProcessTable\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ Concat\n" +
			"         ├─ IndexedTableAccess(othertable)\n" +
			"         │   ├─ index: [othertable.s2]\n" +
			"         │   ├─ keys: [SUBSTRING_INDEX(mytable.s, ' ', 2)]\n" +
			"         │   ├─ colSet: (3,4)\n" +
			"         │   ├─ tableId: 2\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: othertable\n" +
			"         │       └─ columns: [s2 i2]\n" +
			"         └─ Concat\n" +
			"             ├─ IndexedTableAccess(othertable)\n" +
			"             │   ├─ index: [othertable.s2]\n" +
			"             │   ├─ keys: [SUBSTRING_INDEX(mytable.s, ' ', 1)]\n" +
			"             │   ├─ colSet: (3,4)\n" +
			"             │   ├─ tableId: 2\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: othertable\n" +
			"             │       └─ columns: [s2 i2]\n" +
			"             └─ IndexedTableAccess(othertable)\n" +
			"                 ├─ index: [othertable.i2]\n" +
			"                 ├─ keys: [mytable.i:0!null]\n" +
			"                 ├─ colSet: (3,4)\n" +
			"                 ├─ tableId: 2\n" +
			"                 └─ Table\n" +
			"                     ├─ name: othertable\n" +
			"                     └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			" └─ LookupJoin (estimated cost=-2.558 rows=3)\n" +
			"     ├─ (((mytable.i = othertable.i2) OR (SUBSTRING_INDEX(mytable.s, ' ', 1) = othertable.s2)) OR (SUBSTRING_INDEX(mytable.s, ' ', 2) = othertable.s2))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: mytable\n" +
			"     │   └─ columns: [i s]\n" +
			"     └─ Concat\n" +
			"         ├─ IndexedTableAccess(othertable)\n" +
			"         │   ├─ index: [othertable.s2]\n" +
			"         │   ├─ columns: [s2 i2]\n" +
			"         │   └─ keys: SUBSTRING_INDEX(mytable.s, ' ', 2)\n" +
			"         └─ Concat\n" +
			"             ├─ IndexedTableAccess(othertable)\n" +
			"             │   ├─ index: [othertable.s2]\n" +
			"             │   ├─ columns: [s2 i2]\n" +
			"             │   └─ keys: SUBSTRING_INDEX(mytable.s, ' ', 1)\n" +
			"             └─ IndexedTableAccess(othertable)\n" +
			"                 ├─ index: [othertable.i2]\n" +
			"                 ├─ columns: [s2 i2]\n" +
			"                 └─ keys: mytable.i\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			" └─ LookupJoin (estimated cost=-2.558 rows=3) (actual rows=5 loops=1)\n" +
			"     ├─ (((mytable.i = othertable.i2) OR (SUBSTRING_INDEX(mytable.s, ' ', 1) = othertable.s2)) OR (SUBSTRING_INDEX(mytable.s, ' ', 2) = othertable.s2))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: mytable\n" +
			"     │   └─ columns: [i s]\n" +
			"     └─ Concat\n" +
			"         ├─ IndexedTableAccess(othertable)\n" +
			"         │   ├─ index: [othertable.s2]\n" +
			"         │   ├─ columns: [s2 i2]\n" +
			"         │   └─ keys: SUBSTRING_INDEX(mytable.s, ' ', 2)\n" +
			"         └─ Concat\n" +
			"             ├─ IndexedTableAccess(othertable)\n" +
			"             │   ├─ index: [othertable.s2]\n" +
			"             │   ├─ columns: [s2 i2]\n" +
			"             │   └─ keys: SUBSTRING_INDEX(mytable.s, ' ', 1)\n" +
			"             └─ IndexedTableAccess(othertable)\n" +
			"                 ├─ index: [othertable.i2]\n" +
			"                 ├─ columns: [s2 i2]\n" +
			"                 └─ keys: mytable.i\n" +
			"",
	},
	{
		Query: `SELECT i, i2, s2 FROM mytable INNER JOIN othertable ON i = i2 UNION SELECT i, i2, s2 FROM mytable INNER JOIN othertable ON i = i2`,
		ExpectedPlan: "Union distinct\n" +
			" ├─ Project\n" +
			" │   ├─ columns: [mytable.i:0!null, othertable.i2:2!null, othertable.s2:1!null]\n" +
			" │   └─ MergeJoin\n" +
			" │       ├─ cmp: Eq\n" +
			" │       │   ├─ mytable.i:0!null\n" +
			" │       │   └─ othertable.i2:2!null\n" +
			" │       ├─ IndexedTableAccess(mytable)\n" +
			" │       │   ├─ index: [mytable.i,mytable.s]\n" +
			" │       │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │       │   ├─ colSet: (1,2)\n" +
			" │       │   ├─ tableId: 1\n" +
			" │       │   └─ Table\n" +
			" │       │       ├─ name: mytable\n" +
			" │       │       └─ columns: [i]\n" +
			" │       └─ IndexedTableAccess(othertable)\n" +
			" │           ├─ index: [othertable.i2]\n" +
			" │           ├─ static: [{[NULL, ∞)}]\n" +
			" │           ├─ colSet: (3,4)\n" +
			" │           ├─ tableId: 2\n" +
			" │           └─ Table\n" +
			" │               ├─ name: othertable\n" +
			" │               └─ columns: [s2 i2]\n" +
			" └─ Project\n" +
			"     ├─ columns: [mytable.i:0!null, othertable.i2:2!null, othertable.s2:1!null]\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ mytable.i:0!null\n" +
			"         │   └─ othertable.i2:2!null\n" +
			"         ├─ IndexedTableAccess(mytable)\n" +
			"         │   ├─ index: [mytable.i,mytable.s]\n" +
			"         │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │   ├─ colSet: (5,6)\n" +
			"         │   ├─ tableId: 3\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: mytable\n" +
			"         │       └─ columns: [i]\n" +
			"         └─ IndexedTableAccess(othertable)\n" +
			"             ├─ index: [othertable.i2]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (7,8)\n" +
			"             ├─ tableId: 4\n" +
			"             └─ Table\n" +
			"                 ├─ name: othertable\n" +
			"                 └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "Union distinct\n" +
			" ├─ Project\n" +
			" │   ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			" │   └─ MergeJoin\n" +
			" │       ├─ cmp: (mytable.i = othertable.i2)\n" +
			" │       ├─ IndexedTableAccess(mytable)\n" +
			" │       │   ├─ index: [mytable.i,mytable.s]\n" +
			" │       │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │       │   └─ columns: [i]\n" +
			" │       └─ IndexedTableAccess(othertable)\n" +
			" │           ├─ index: [othertable.i2]\n" +
			" │           ├─ filters: [{[NULL, ∞)}]\n" +
			" │           └─ columns: [s2 i2]\n" +
			" └─ Project\n" +
			"     ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: (mytable.i = othertable.i2)\n" +
			"         ├─ IndexedTableAccess(mytable)\n" +
			"         │   ├─ index: [mytable.i,mytable.s]\n" +
			"         │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │   └─ columns: [i]\n" +
			"         └─ IndexedTableAccess(othertable)\n" +
			"             ├─ index: [othertable.i2]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "Union distinct\n" +
			" ├─ Project\n" +
			" │   ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			" │   └─ MergeJoin\n" +
			" │       ├─ cmp: (mytable.i = othertable.i2)\n" +
			" │       ├─ IndexedTableAccess(mytable)\n" +
			" │       │   ├─ index: [mytable.i,mytable.s]\n" +
			" │       │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │       │   └─ columns: [i]\n" +
			" │       └─ IndexedTableAccess(othertable)\n" +
			" │           ├─ index: [othertable.i2]\n" +
			" │           ├─ filters: [{[NULL, ∞)}]\n" +
			" │           └─ columns: [s2 i2]\n" +
			" └─ Project\n" +
			"     ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: (mytable.i = othertable.i2)\n" +
			"         ├─ IndexedTableAccess(mytable)\n" +
			"         │   ├─ index: [mytable.i,mytable.s]\n" +
			"         │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │   └─ columns: [i]\n" +
			"         └─ IndexedTableAccess(othertable)\n" +
			"             ├─ index: [othertable.i2]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT sub.i, sub.i2, sub.s2, ot.i2, ot.s2 FROM (SELECT i, i2, s2 FROM mytable INNER JOIN othertable ON i = i2) sub INNER JOIN othertable ot ON sub.i = ot.i2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [sub.i:0!null, sub.i2:1!null, sub.s2:2!null, ot.i2:4!null, ot.s2:3!null]\n" +
			" └─ HashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ sub.i:0!null\n" +
			"     │   └─ ot.i2:4!null\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: sub\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   ├─ colSet: (5-7)\n" +
			"     │   ├─ tableId: 3\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [mytable.i:0!null, othertable.i2:2!null, othertable.s2:1!null]\n" +
			"     │       └─ MergeJoin\n" +
			"     │           ├─ cmp: Eq\n" +
			"     │           │   ├─ mytable.i:0!null\n" +
			"     │           │   └─ othertable.i2:2!null\n" +
			"     │           ├─ IndexedTableAccess(mytable)\n" +
			"     │           │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │           │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           │   ├─ colSet: (1,2)\n" +
			"     │           │   ├─ tableId: 1\n" +
			"     │           │   └─ Table\n" +
			"     │           │       ├─ name: mytable\n" +
			"     │           │       └─ columns: [i]\n" +
			"     │           └─ IndexedTableAccess(othertable)\n" +
			"     │               ├─ index: [othertable.i2]\n" +
			"     │               ├─ static: [{[NULL, ∞)}]\n" +
			"     │               ├─ colSet: (3,4)\n" +
			"     │               ├─ tableId: 2\n" +
			"     │               └─ Table\n" +
			"     │                   ├─ name: othertable\n" +
			"     │                   └─ columns: [s2 i2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(sub.i:0!null)\n" +
			"         ├─ right-key: TUPLE(ot.i2:1!null)\n" +
			"         └─ TableAlias(ot)\n" +
			"             └─ ProcessTable\n" +
			"                 └─ Table\n" +
			"                     ├─ name: othertable\n" +
			"                     └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [sub.i, sub.i2, sub.s2, ot.i2, ot.s2]\n" +
			" └─ HashJoin (estimated cost=111.000 rows=100)\n" +
			"     ├─ (sub.i = ot.i2)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: sub\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			"     │       └─ MergeJoin\n" +
			"     │           ├─ cmp: (mytable.i = othertable.i2)\n" +
			"     │           ├─ IndexedTableAccess(mytable)\n" +
			"     │           │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │           │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           │   └─ columns: [i]\n" +
			"     │           └─ IndexedTableAccess(othertable)\n" +
			"     │               ├─ index: [othertable.i2]\n" +
			"     │               ├─ filters: [{[NULL, ∞)}]\n" +
			"     │               └─ columns: [s2 i2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (sub.i)\n" +
			"         ├─ right-key: (ot.i2)\n" +
			"         └─ TableAlias(ot)\n" +
			"             └─ Table\n" +
			"                 ├─ name: othertable\n" +
			"                 └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [sub.i, sub.i2, sub.s2, ot.i2, ot.s2]\n" +
			" └─ HashJoin (estimated cost=111.000 rows=100) (actual rows=3 loops=1)\n" +
			"     ├─ (sub.i = ot.i2)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: sub\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			"     │       └─ MergeJoin\n" +
			"     │           ├─ cmp: (mytable.i = othertable.i2)\n" +
			"     │           ├─ IndexedTableAccess(mytable)\n" +
			"     │           │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │           │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           │   └─ columns: [i]\n" +
			"     │           └─ IndexedTableAccess(othertable)\n" +
			"     │               ├─ index: [othertable.i2]\n" +
			"     │               ├─ filters: [{[NULL, ∞)}]\n" +
			"     │               └─ columns: [s2 i2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (sub.i)\n" +
			"         ├─ right-key: (ot.i2)\n" +
			"         └─ TableAlias(ot)\n" +
			"             └─ Table\n" +
			"                 ├─ name: othertable\n" +
			"                 └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT sub.i, sub.i2, sub.s2, ot.i2, ot.s2 FROM othertable ot INNER JOIN (SELECT i, i2, s2 FROM mytable INNER JOIN othertable ON i = i2) sub ON sub.i = ot.i2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [sub.i:0!null, sub.i2:1!null, sub.s2:2!null, ot.i2:4!null, ot.s2:3!null]\n" +
			" └─ HashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ sub.i:0!null\n" +
			"     │   └─ ot.i2:4!null\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: sub\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   ├─ colSet: (7-9)\n" +
			"     │   ├─ tableId: 4\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [mytable.i:0!null, othertable.i2:2!null, othertable.s2:1!null]\n" +
			"     │       └─ MergeJoin\n" +
			"     │           ├─ cmp: Eq\n" +
			"     │           │   ├─ mytable.i:0!null\n" +
			"     │           │   └─ othertable.i2:2!null\n" +
			"     │           ├─ IndexedTableAccess(mytable)\n" +
			"     │           │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │           │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           │   ├─ colSet: (3,4)\n" +
			"     │           │   ├─ tableId: 2\n" +
			"     │           │   └─ Table\n" +
			"     │           │       ├─ name: mytable\n" +
			"     │           │       └─ columns: [i]\n" +
			"     │           └─ IndexedTableAccess(othertable)\n" +
			"     │               ├─ index: [othertable.i2]\n" +
			"     │               ├─ static: [{[NULL, ∞)}]\n" +
			"     │               ├─ colSet: (5,6)\n" +
			"     │               ├─ tableId: 3\n" +
			"     │               └─ Table\n" +
			"     │                   ├─ name: othertable\n" +
			"     │                   └─ columns: [s2 i2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(sub.i:0!null)\n" +
			"         ├─ right-key: TUPLE(ot.i2:1!null)\n" +
			"         └─ TableAlias(ot)\n" +
			"             └─ ProcessTable\n" +
			"                 └─ Table\n" +
			"                     ├─ name: othertable\n" +
			"                     └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [sub.i, sub.i2, sub.s2, ot.i2, ot.s2]\n" +
			" └─ HashJoin (estimated cost=111.000 rows=100)\n" +
			"     ├─ (sub.i = ot.i2)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: sub\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			"     │       └─ MergeJoin\n" +
			"     │           ├─ cmp: (mytable.i = othertable.i2)\n" +
			"     │           ├─ IndexedTableAccess(mytable)\n" +
			"     │           │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │           │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           │   └─ columns: [i]\n" +
			"     │           └─ IndexedTableAccess(othertable)\n" +
			"     │               ├─ index: [othertable.i2]\n" +
			"     │               ├─ filters: [{[NULL, ∞)}]\n" +
			"     │               └─ columns: [s2 i2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (sub.i)\n" +
			"         ├─ right-key: (ot.i2)\n" +
			"         └─ TableAlias(ot)\n" +
			"             └─ Table\n" +
			"                 ├─ name: othertable\n" +
			"                 └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [sub.i, sub.i2, sub.s2, ot.i2, ot.s2]\n" +
			" └─ HashJoin (estimated cost=111.000 rows=100) (actual rows=3 loops=1)\n" +
			"     ├─ (sub.i = ot.i2)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: sub\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			"     │       └─ MergeJoin\n" +
			"     │           ├─ cmp: (mytable.i = othertable.i2)\n" +
			"     │           ├─ IndexedTableAccess(mytable)\n" +
			"     │           │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │           │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           │   └─ columns: [i]\n" +
			"     │           └─ IndexedTableAccess(othertable)\n" +
			"     │               ├─ index: [othertable.i2]\n" +
			"     │               ├─ filters: [{[NULL, ∞)}]\n" +
			"     │               └─ columns: [s2 i2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (sub.i)\n" +
			"         ├─ right-key: (ot.i2)\n" +
			"         └─ TableAlias(ot)\n" +
			"             └─ Table\n" +
			"                 ├─ name: othertable\n" +
			"                 └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT sub.i, sub.i2, sub.s2, ot.i2, ot.s2 FROM othertable ot LEFT JOIN (SELECT i, i2, s2 FROM mytable INNER JOIN othertable ON i = i2 WHERE CONVERT(s2, signed) <> 0) sub ON sub.i = ot.i2 WHERE ot.i2 > 0`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [sub.i:2!null, sub.i2:3!null, sub.s2:4!null, ot.i2:1!null, ot.s2:0!null]\n" +
			" └─ LeftOuterJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ sub.i:2!null\n" +
			"     │   └─ ot.i2:1!null\n" +
			"     ├─ TableAlias(ot)\n" +
			"     │   └─ IndexedTableAccess(othertable)\n" +
			"     │       ├─ index: [othertable.i2]\n" +
			"     │       ├─ static: [{(0, ∞)}]\n" +
			"     │       ├─ colSet: (1,2)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: othertable\n" +
			"     │           └─ columns: [s2 i2]\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: sub\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (7-9)\n" +
			"         ├─ tableId: 4\n" +
			"         └─ Project\n" +
			"             ├─ columns: [mytable.i:0!null, othertable.i2:2!null, othertable.s2:1!null]\n" +
			"             └─ MergeJoin\n" +
			"                 ├─ cmp: Eq\n" +
			"                 │   ├─ mytable.i:0!null\n" +
			"                 │   └─ othertable.i2:2!null\n" +
			"                 ├─ IndexedTableAccess(mytable)\n" +
			"                 │   ├─ index: [mytable.i,mytable.s]\n" +
			"                 │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 │   ├─ colSet: (3,4)\n" +
			"                 │   ├─ tableId: 2\n" +
			"                 │   └─ Table\n" +
			"                 │       ├─ name: mytable\n" +
			"                 │       └─ columns: [i]\n" +
			"                 └─ Filter\n" +
			"                     ├─ NOT\n" +
			"                     │   └─ Eq\n" +
			"                     │       ├─ convert\n" +
			"                     │       │   ├─ type: signed\n" +
			"                     │       │   └─ othertable.s2:0!null\n" +
			"                     │       └─ 0 (tinyint)\n" +
			"                     └─ IndexedTableAccess(othertable)\n" +
			"                         ├─ index: [othertable.i2]\n" +
			"                         ├─ static: [{[NULL, ∞)}]\n" +
			"                         ├─ colSet: (5,6)\n" +
			"                         ├─ tableId: 3\n" +
			"                         └─ Table\n" +
			"                             ├─ name: othertable\n" +
			"                             └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [sub.i, sub.i2, sub.s2, ot.i2, ot.s2]\n" +
			" └─ LeftOuterJoin (estimated cost=100.000 rows=100)\n" +
			"     ├─ (sub.i = ot.i2)\n" +
			"     ├─ TableAlias(ot)\n" +
			"     │   └─ IndexedTableAccess(othertable)\n" +
			"     │       ├─ index: [othertable.i2]\n" +
			"     │       ├─ filters: [{(0, ∞)}]\n" +
			"     │       └─ columns: [s2 i2]\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: sub\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Project\n" +
			"             ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			"             └─ MergeJoin\n" +
			"                 ├─ cmp: (mytable.i = othertable.i2)\n" +
			"                 ├─ IndexedTableAccess(mytable)\n" +
			"                 │   ├─ index: [mytable.i,mytable.s]\n" +
			"                 │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 │   └─ columns: [i]\n" +
			"                 └─ Filter\n" +
			"                     ├─ (NOT((convert(othertable.s2, signed) = 0)))\n" +
			"                     └─ IndexedTableAccess(othertable)\n" +
			"                         ├─ index: [othertable.i2]\n" +
			"                         ├─ filters: [{[NULL, ∞)}]\n" +
			"                         └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [sub.i, sub.i2, sub.s2, ot.i2, ot.s2]\n" +
			" └─ LeftOuterJoin (estimated cost=100.000 rows=100) (actual rows=3 loops=1)\n" +
			"     ├─ (sub.i = ot.i2)\n" +
			"     ├─ TableAlias(ot)\n" +
			"     │   └─ IndexedTableAccess(othertable)\n" +
			"     │       ├─ index: [othertable.i2]\n" +
			"     │       ├─ filters: [{(0, ∞)}]\n" +
			"     │       └─ columns: [s2 i2]\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: sub\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Project\n" +
			"             ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			"             └─ MergeJoin\n" +
			"                 ├─ cmp: (mytable.i = othertable.i2)\n" +
			"                 ├─ IndexedTableAccess(mytable)\n" +
			"                 │   ├─ index: [mytable.i,mytable.s]\n" +
			"                 │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 │   └─ columns: [i]\n" +
			"                 └─ Filter\n" +
			"                     ├─ (NOT((convert(othertable.s2, signed) = 0)))\n" +
			"                     └─ IndexedTableAccess(othertable)\n" +
			"                         ├─ index: [othertable.i2]\n" +
			"                         ├─ filters: [{[NULL, ∞)}]\n" +
			"                         └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `select /*+ JOIN_ORDER( i, k, j ) */  * from one_pk i join one_pk k on i.pk = k.pk join (select pk, rand() r from one_pk) j on i.pk = j.pk`,
		ExpectedPlan: "HashJoin\n" +
			" ├─ Eq\n" +
			" │   ├─ i.pk:0!null\n" +
			" │   └─ j.pk:12!null\n" +
			" ├─ MergeJoin\n" +
			" │   ├─ cmp: Eq\n" +
			" │   │   ├─ i.pk:0!null\n" +
			" │   │   └─ k.pk:6!null\n" +
			" │   ├─ TableAlias(i)\n" +
			" │   │   └─ IndexedTableAccess(one_pk)\n" +
			" │   │       ├─ index: [one_pk.pk]\n" +
			" │   │       ├─ static: [{[NULL, ∞)}]\n" +
			" │   │       ├─ colSet: (1-6)\n" +
			" │   │       ├─ tableId: 1\n" +
			" │   │       └─ Table\n" +
			" │   │           ├─ name: one_pk\n" +
			" │   │           └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			" │   └─ TableAlias(k)\n" +
			" │       └─ IndexedTableAccess(one_pk)\n" +
			" │           ├─ index: [one_pk.pk]\n" +
			" │           ├─ static: [{[NULL, ∞)}]\n" +
			" │           ├─ colSet: (7-12)\n" +
			" │           ├─ tableId: 2\n" +
			" │           └─ Table\n" +
			" │               ├─ name: one_pk\n" +
			" │               └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: TUPLE(i.pk:0!null)\n" +
			"     ├─ right-key: TUPLE(j.pk:0!null)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: j\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: false\n" +
			"         ├─ colSet: (20,21)\n" +
			"         ├─ tableId: 4\n" +
			"         └─ Project\n" +
			"             ├─ columns: [one_pk.pk:0!null, rand() as r]\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 ├─ columns: [pk]\n" +
			"                 ├─ colSet: (13-18)\n" +
			"                 └─ tableId: 3\n" +
			"",
		ExpectedEstimates: "HashJoin (estimated cost=305.040 rows=100)\n" +
			" ├─ (i.pk = j.pk)\n" +
			" ├─ MergeJoin (estimated cost=8.120 rows=4)\n" +
			" │   ├─ cmp: (i.pk = k.pk)\n" +
			" │   ├─ TableAlias(i)\n" +
			" │   │   └─ IndexedTableAccess(one_pk)\n" +
			" │   │       ├─ index: [one_pk.pk]\n" +
			" │   │       ├─ filters: [{[NULL, ∞)}]\n" +
			" │   │       └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			" │   └─ TableAlias(k)\n" +
			" │       └─ IndexedTableAccess(one_pk)\n" +
			" │           ├─ index: [one_pk.pk]\n" +
			" │           ├─ filters: [{[NULL, ∞)}]\n" +
			" │           └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: (i.pk)\n" +
			"     ├─ right-key: (j.pk)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: j\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: false\n" +
			"         └─ Project\n" +
			"             ├─ columns: [one_pk.pk, rand() as r]\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "HashJoin (estimated cost=305.040 rows=100) (actual rows=4 loops=1)\n" +
			" ├─ (i.pk = j.pk)\n" +
			" ├─ MergeJoin (estimated cost=8.120 rows=4) (actual rows=4 loops=1)\n" +
			" │   ├─ cmp: (i.pk = k.pk)\n" +
			" │   ├─ TableAlias(i)\n" +
			" │   │   └─ IndexedTableAccess(one_pk)\n" +
			" │   │       ├─ index: [one_pk.pk]\n" +
			" │   │       ├─ filters: [{[NULL, ∞)}]\n" +
			" │   │       └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			" │   └─ TableAlias(k)\n" +
			" │       └─ IndexedTableAccess(one_pk)\n" +
			" │           ├─ index: [one_pk.pk]\n" +
			" │           ├─ filters: [{[NULL, ∞)}]\n" +
			" │           └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: (i.pk)\n" +
			"     ├─ right-key: (j.pk)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: j\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: false\n" +
			"         └─ Project\n" +
			"             ├─ columns: [one_pk.pk, rand() as r]\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `select /*+ JOIN_ORDER( i, k, j ) */  * from one_pk i join one_pk k on i.pk = k.pk join (select pk, rand() r from one_pk) j on i.pk = j.pk`,
		ExpectedPlan: "HashJoin\n" +
			" ├─ Eq\n" +
			" │   ├─ i.pk:0!null\n" +
			" │   └─ j.pk:12!null\n" +
			" ├─ MergeJoin\n" +
			" │   ├─ cmp: Eq\n" +
			" │   │   ├─ i.pk:0!null\n" +
			" │   │   └─ k.pk:6!null\n" +
			" │   ├─ TableAlias(i)\n" +
			" │   │   └─ IndexedTableAccess(one_pk)\n" +
			" │   │       ├─ index: [one_pk.pk]\n" +
			" │   │       ├─ static: [{[NULL, ∞)}]\n" +
			" │   │       ├─ colSet: (1-6)\n" +
			" │   │       ├─ tableId: 1\n" +
			" │   │       └─ Table\n" +
			" │   │           ├─ name: one_pk\n" +
			" │   │           └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			" │   └─ TableAlias(k)\n" +
			" │       └─ IndexedTableAccess(one_pk)\n" +
			" │           ├─ index: [one_pk.pk]\n" +
			" │           ├─ static: [{[NULL, ∞)}]\n" +
			" │           ├─ colSet: (7-12)\n" +
			" │           ├─ tableId: 2\n" +
			" │           └─ Table\n" +
			" │               ├─ name: one_pk\n" +
			" │               └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: TUPLE(i.pk:0!null)\n" +
			"     ├─ right-key: TUPLE(j.pk:0!null)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: j\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: false\n" +
			"         ├─ colSet: (20,21)\n" +
			"         ├─ tableId: 4\n" +
			"         └─ Project\n" +
			"             ├─ columns: [one_pk.pk:0!null, rand() as r]\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 ├─ columns: [pk]\n" +
			"                 ├─ colSet: (13-18)\n" +
			"                 └─ tableId: 3\n" +
			"",
		ExpectedEstimates: "HashJoin (estimated cost=305.040 rows=100)\n" +
			" ├─ (i.pk = j.pk)\n" +
			" ├─ MergeJoin (estimated cost=8.120 rows=4)\n" +
			" │   ├─ cmp: (i.pk = k.pk)\n" +
			" │   ├─ TableAlias(i)\n" +
			" │   │   └─ IndexedTableAccess(one_pk)\n" +
			" │   │       ├─ index: [one_pk.pk]\n" +
			" │   │       ├─ filters: [{[NULL, ∞)}]\n" +
			" │   │       └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			" │   └─ TableAlias(k)\n" +
			" │       └─ IndexedTableAccess(one_pk)\n" +
			" │           ├─ index: [one_pk.pk]\n" +
			" │           ├─ filters: [{[NULL, ∞)}]\n" +
			" │           └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: (i.pk)\n" +
			"     ├─ right-key: (j.pk)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: j\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: false\n" +
			"         └─ Project\n" +
			"             ├─ columns: [one_pk.pk, rand() as r]\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "HashJoin (estimated cost=305.040 rows=100) (actual rows=4 loops=1)\n" +
			" ├─ (i.pk = j.pk)\n" +
			" ├─ MergeJoin (estimated cost=8.120 rows=4) (actual rows=4 loops=1)\n" +
			" │   ├─ cmp: (i.pk = k.pk)\n" +
			" │   ├─ TableAlias(i)\n" +
			" │   │   └─ IndexedTableAccess(one_pk)\n" +
			" │   │       ├─ index: [one_pk.pk]\n" +
			" │   │       ├─ filters: [{[NULL, ∞)}]\n" +
			" │   │       └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			" │   └─ TableAlias(k)\n" +
			" │       └─ IndexedTableAccess(one_pk)\n" +
			" │           ├─ index: [one_pk.pk]\n" +
			" │           ├─ filters: [{[NULL, ∞)}]\n" +
			" │           └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: (i.pk)\n" +
			"     ├─ right-key: (j.pk)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: j\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: false\n" +
			"         └─ Project\n" +
			"             ├─ columns: [one_pk.pk, rand() as r]\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `INSERT INTO mytable SELECT sub.i + 10, ot.s2 FROM othertable ot INNER JOIN (SELECT i, i2, s2 FROM mytable INNER JOIN othertable ON i = i2) sub ON sub.i = ot.i2`,
		ExpectedPlan: "RowUpdateAccumulator\n" +
			" └─ Insert(i, s)\n" +
			"     ├─ InsertDestination\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ Project\n" +
			"         ├─ columns: [i:0!null, s:1!null]\n" +
			"         └─ Project\n" +
			"             ├─ columns: [(sub.i:0!null + 10 (tinyint)) as sub.i + 10, ot.s2:3!null]\n" +
			"             └─ HashJoin\n" +
			"                 ├─ Eq\n" +
			"                 │   ├─ sub.i:0!null\n" +
			"                 │   └─ ot.i2:4!null\n" +
			"                 ├─ SubqueryAlias\n" +
			"                 │   ├─ name: sub\n" +
			"                 │   ├─ outerVisibility: false\n" +
			"                 │   ├─ isLateral: false\n" +
			"                 │   ├─ cacheable: true\n" +
			"                 │   ├─ colSet: (9-11)\n" +
			"                 │   ├─ tableId: 5\n" +
			"                 │   └─ Project\n" +
			"                 │       ├─ columns: [mytable.i:0!null, othertable.i2:2!null, othertable.s2:1!null]\n" +
			"                 │       └─ MergeJoin\n" +
			"                 │           ├─ cmp: Eq\n" +
			"                 │           │   ├─ mytable.i:0!null\n" +
			"                 │           │   └─ othertable.i2:2!null\n" +
			"                 │           ├─ IndexedTableAccess(mytable)\n" +
			"                 │           │   ├─ index: [mytable.i,mytable.s]\n" +
			"                 │           │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 │           │   ├─ colSet: (5,6)\n" +
			"                 │           │   ├─ tableId: 3\n" +
			"                 │           │   └─ Table\n" +
			"                 │           │       ├─ name: mytable\n" +
			"                 │           │       └─ columns: [i]\n" +
			"                 │           └─ IndexedTableAccess(othertable)\n" +
			"                 │               ├─ index: [othertable.i2]\n" +
			"                 │               ├─ static: [{[NULL, ∞)}]\n" +
			"                 │               ├─ colSet: (7,8)\n" +
			"                 │               ├─ tableId: 4\n" +
			"                 │               └─ Table\n" +
			"                 │                   ├─ name: othertable\n" +
			"                 │                   └─ columns: [s2 i2]\n" +
			"                 └─ HashLookup\n" +
			"                     ├─ left-key: TUPLE(sub.i:0!null)\n" +
			"                     ├─ right-key: TUPLE(ot.i2:1!null)\n" +
			"                     └─ TableAlias(ot)\n" +
			"                         └─ ProcessTable\n" +
			"                             └─ Table\n" +
			"                                 ├─ name: othertable\n" +
			"                                 └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT mytable.i, selfjoin.i FROM mytable INNER JOIN mytable selfjoin ON mytable.i = selfjoin.i WHERE selfjoin.i IN (SELECT 1 FROM DUAL)`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mytable.i:0!null, selfjoin.i:2!null]\n" +
			" └─ SemiJoin\n" +
			"     ├─ MergeJoin\n" +
			"     │   ├─ cmp: Eq\n" +
			"     │   │   ├─ mytable.i:0!null\n" +
			"     │   │   └─ selfjoin.i:2!null\n" +
			"     │   ├─ IndexedTableAccess(mytable)\n" +
			"     │   │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │   │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │   ├─ colSet: (1,2)\n" +
			"     │   │   ├─ tableId: 1\n" +
			"     │   │   └─ Table\n" +
			"     │   │       ├─ name: mytable\n" +
			"     │   │       └─ columns: [i s]\n" +
			"     │   └─ Filter\n" +
			"     │       ├─ Eq\n" +
			"     │       │   ├─ selfjoin.i:0!null\n" +
			"     │       │   └─ 1 (tinyint)\n" +
			"     │       └─ TableAlias(selfjoin)\n" +
			"     │           └─ IndexedTableAccess(mytable)\n" +
			"     │               ├─ index: [mytable.i]\n" +
			"     │               ├─ static: [{[1, 1]}]\n" +
			"     │               ├─ colSet: (3,4)\n" +
			"     │               ├─ tableId: 2\n" +
			"     │               └─ Table\n" +
			"     │                   ├─ name: mytable\n" +
			"     │                   └─ columns: [i s]\n" +
			"     └─ Project\n" +
			"         ├─ columns: [1 (tinyint)]\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: \n" +
			"                 └─ columns: []\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mytable.i, selfjoin.i]\n" +
			" └─ SemiJoin (estimated cost=4.515 rows=1)\n" +
			"     ├─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"     │   ├─ cmp: (mytable.i = selfjoin.i)\n" +
			"     │   ├─ IndexedTableAccess(mytable)\n" +
			"     │   │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │   │   └─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   └─ Filter\n" +
			"     │       ├─ (selfjoin.i = 1)\n" +
			"     │       └─ TableAlias(selfjoin)\n" +
			"     │           └─ IndexedTableAccess(mytable)\n" +
			"     │               ├─ index: [mytable.i]\n" +
			"     │               └─ filters: [{[1, 1]}]\n" +
			"     └─ Project\n" +
			"         ├─ columns: [1]\n" +
			"         └─ Table\n" +
			"             └─ name: \n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mytable.i, selfjoin.i]\n" +
			" └─ SemiJoin (estimated cost=4.515 rows=1) (actual rows=1 loops=1)\n" +
			"     ├─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=1 loops=1)\n" +
			"     │   ├─ cmp: (mytable.i = selfjoin.i)\n" +
			"     │   ├─ IndexedTableAccess(mytable)\n" +
			"     │   │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │   │   └─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   └─ Filter\n" +
			"     │       ├─ (selfjoin.i = 1)\n" +
			"     │       └─ TableAlias(selfjoin)\n" +
			"     │           └─ IndexedTableAccess(mytable)\n" +
			"     │               ├─ index: [mytable.i]\n" +
			"     │               └─ filters: [{[1, 1]}]\n" +
			"     └─ Project\n" +
			"         ├─ columns: [1]\n" +
			"         └─ Table\n" +
			"             └─ name: \n" +
			"",
	},
	{
		Query: `SELECT s2, i2, i FROM mytable INNER JOIN othertable ON i = i2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [othertable.s2:1!null, othertable.i2:2!null, mytable.i:0!null]\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ mytable.i:0!null\n" +
			"     │   └─ othertable.i2:2!null\n" +
			"     ├─ IndexedTableAccess(mytable)\n" +
			"     │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   ├─ colSet: (1,2)\n" +
			"     │   ├─ tableId: 1\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ IndexedTableAccess(othertable)\n" +
			"         ├─ index: [othertable.i2]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (3,4)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: othertable\n" +
			"             └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [othertable.s2, othertable.i2, mytable.i]\n" +
			" └─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"     ├─ cmp: (mytable.i = othertable.i2)\n" +
			"     ├─ IndexedTableAccess(mytable)\n" +
			"     │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   └─ columns: [i]\n" +
			"     └─ IndexedTableAccess(othertable)\n" +
			"         ├─ index: [othertable.i2]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [othertable.s2, othertable.i2, mytable.i]\n" +
			" └─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ cmp: (mytable.i = othertable.i2)\n" +
			"     ├─ IndexedTableAccess(mytable)\n" +
			"     │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   └─ columns: [i]\n" +
			"     └─ IndexedTableAccess(othertable)\n" +
			"         ├─ index: [othertable.i2]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT i, i2, s2 FROM othertable JOIN mytable ON i = i2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mytable.i:2!null, othertable.i2:1!null, othertable.s2:0!null]\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ othertable.i2:1!null\n" +
			"     │   └─ mytable.i:2!null\n" +
			"     ├─ IndexedTableAccess(othertable)\n" +
			"     │   ├─ index: [othertable.i2]\n" +
			"     │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │   ├─ colSet: (1,2)\n" +
			"     │   ├─ tableId: 1\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: othertable\n" +
			"     │       └─ columns: [s2 i2]\n" +
			"     └─ IndexedTableAccess(mytable)\n" +
			"         ├─ index: [mytable.i,mytable.s]\n" +
			"         ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         ├─ colSet: (3,4)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			" └─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"     ├─ cmp: (othertable.i2 = mytable.i)\n" +
			"     ├─ IndexedTableAccess(othertable)\n" +
			"     │   ├─ index: [othertable.i2]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [s2 i2]\n" +
			"     └─ IndexedTableAccess(mytable)\n" +
			"         ├─ index: [mytable.i,mytable.s]\n" +
			"         ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			" └─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ cmp: (othertable.i2 = mytable.i)\n" +
			"     ├─ IndexedTableAccess(othertable)\n" +
			"     │   ├─ index: [othertable.i2]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [s2 i2]\n" +
			"     └─ IndexedTableAccess(mytable)\n" +
			"         ├─ index: [mytable.i,mytable.s]\n" +
			"         ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT s2, i2, i FROM othertable JOIN mytable ON i = i2`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ othertable.i2:1!null\n" +
			" │   └─ mytable.i:2!null\n" +
			" ├─ IndexedTableAccess(othertable)\n" +
			" │   ├─ index: [othertable.i2]\n" +
			" │   ├─ static: [{[NULL, ∞)}]\n" +
			" │   ├─ colSet: (1,2)\n" +
			" │   ├─ tableId: 1\n" +
			" │   └─ Table\n" +
			" │       ├─ name: othertable\n" +
			" │       └─ columns: [s2 i2]\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i,mytable.s]\n" +
			"     ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     ├─ colSet: (3,4)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=6.090 rows=3)\n" +
			" ├─ cmp: (othertable.i2 = mytable.i)\n" +
			" ├─ IndexedTableAccess(othertable)\n" +
			" │   ├─ index: [othertable.i2]\n" +
			" │   ├─ filters: [{[NULL, ∞)}]\n" +
			" │   └─ columns: [s2 i2]\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i,mytable.s]\n" +
			"     ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=1)\n" +
			" ├─ cmp: (othertable.i2 = mytable.i)\n" +
			" ├─ IndexedTableAccess(othertable)\n" +
			" │   ├─ index: [othertable.i2]\n" +
			" │   ├─ filters: [{[NULL, ∞)}]\n" +
			" │   └─ columns: [s2 i2]\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i,mytable.s]\n" +
			"     ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT s2, i2, i FROM othertable JOIN mytable ON i = i2`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ othertable.i2:1!null\n" +
			" │   └─ mytable.i:2!null\n" +
			" ├─ IndexedTableAccess(othertable)\n" +
			" │   ├─ index: [othertable.i2]\n" +
			" │   ├─ static: [{[NULL, ∞)}]\n" +
			" │   ├─ colSet: (1,2)\n" +
			" │   ├─ tableId: 1\n" +
			" │   └─ Table\n" +
			" │       ├─ name: othertable\n" +
			" │       └─ columns: [s2 i2]\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i,mytable.s]\n" +
			"     ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     ├─ colSet: (3,4)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=6.090 rows=3)\n" +
			" ├─ cmp: (othertable.i2 = mytable.i)\n" +
			" ├─ IndexedTableAccess(othertable)\n" +
			" │   ├─ index: [othertable.i2]\n" +
			" │   ├─ filters: [{[NULL, ∞)}]\n" +
			" │   └─ columns: [s2 i2]\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i,mytable.s]\n" +
			"     ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=1)\n" +
			" ├─ cmp: (othertable.i2 = mytable.i)\n" +
			" ├─ IndexedTableAccess(othertable)\n" +
			" │   ├─ index: [othertable.i2]\n" +
			" │   ├─ filters: [{[NULL, ∞)}]\n" +
			" │   └─ columns: [s2 i2]\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i,mytable.s]\n" +
			"     ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT s2, i2, i FROM othertable JOIN mytable ON i = i2 LIMIT 1`,
		ExpectedPlan: "Limit(1)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ othertable.i2:1!null\n" +
			"     │   └─ mytable.i:2!null\n" +
			"     ├─ IndexedTableAccess(othertable)\n" +
			"     │   ├─ index: [othertable.i2]\n" +
			"     │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │   ├─ colSet: (1,2)\n" +
			"     │   ├─ tableId: 1\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: othertable\n" +
			"     │       └─ columns: [s2 i2]\n" +
			"     └─ IndexedTableAccess(mytable)\n" +
			"         ├─ index: [mytable.i,mytable.s]\n" +
			"         ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         ├─ colSet: (3,4)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Limit(1)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: (othertable.i2 = mytable.i)\n" +
			"     ├─ IndexedTableAccess(othertable)\n" +
			"     │   ├─ index: [othertable.i2]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [s2 i2]\n" +
			"     └─ IndexedTableAccess(mytable)\n" +
			"         ├─ index: [mytable.i,mytable.s]\n" +
			"         ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Limit(1)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: (othertable.i2 = mytable.i)\n" +
			"     ├─ IndexedTableAccess(othertable)\n" +
			"     │   ├─ index: [othertable.i2]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [s2 i2]\n" +
			"     └─ IndexedTableAccess(mytable)\n" +
			"         ├─ index: [mytable.i,mytable.s]\n" +
			"         ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT i, i2, s2 FROM mytable INNER JOIN othertable ON i2 = i`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mytable.i:0!null, othertable.i2:2!null, othertable.s2:1!null]\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ mytable.i:0!null\n" +
			"     │   └─ othertable.i2:2!null\n" +
			"     ├─ IndexedTableAccess(mytable)\n" +
			"     │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   ├─ colSet: (1,2)\n" +
			"     │   ├─ tableId: 1\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ IndexedTableAccess(othertable)\n" +
			"         ├─ index: [othertable.i2]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (3,4)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: othertable\n" +
			"             └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			" └─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"     ├─ cmp: (mytable.i = othertable.i2)\n" +
			"     ├─ IndexedTableAccess(mytable)\n" +
			"     │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   └─ columns: [i]\n" +
			"     └─ IndexedTableAccess(othertable)\n" +
			"         ├─ index: [othertable.i2]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			" └─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ cmp: (mytable.i = othertable.i2)\n" +
			"     ├─ IndexedTableAccess(mytable)\n" +
			"     │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   └─ columns: [i]\n" +
			"     └─ IndexedTableAccess(othertable)\n" +
			"         ├─ index: [othertable.i2]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT s2, i2, i FROM mytable INNER JOIN othertable ON i2 = i`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [othertable.s2:1!null, othertable.i2:2!null, mytable.i:0!null]\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ mytable.i:0!null\n" +
			"     │   └─ othertable.i2:2!null\n" +
			"     ├─ IndexedTableAccess(mytable)\n" +
			"     │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   ├─ colSet: (1,2)\n" +
			"     │   ├─ tableId: 1\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ IndexedTableAccess(othertable)\n" +
			"         ├─ index: [othertable.i2]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (3,4)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: othertable\n" +
			"             └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [othertable.s2, othertable.i2, mytable.i]\n" +
			" └─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"     ├─ cmp: (mytable.i = othertable.i2)\n" +
			"     ├─ IndexedTableAccess(mytable)\n" +
			"     │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   └─ columns: [i]\n" +
			"     └─ IndexedTableAccess(othertable)\n" +
			"         ├─ index: [othertable.i2]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [othertable.s2, othertable.i2, mytable.i]\n" +
			" └─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ cmp: (mytable.i = othertable.i2)\n" +
			"     ├─ IndexedTableAccess(mytable)\n" +
			"     │   ├─ index: [mytable.i,mytable.s]\n" +
			"     │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   └─ columns: [i]\n" +
			"     └─ IndexedTableAccess(othertable)\n" +
			"         ├─ index: [othertable.i2]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT * FROM MYTABLE JOIN OTHERTABLE ON i = i2 AND NOT (s2 <=> s)`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ mytable.i:0!null\n" +
			" │   └─ othertable.i2:3!null\n" +
			" ├─ sel: NOT\n" +
			" │   └─ (othertable.s2:2!null <=> mytable.s:1!null)\n" +
			" ├─ IndexedTableAccess(mytable)\n" +
			" │   ├─ index: [mytable.i,mytable.s]\n" +
			" │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │   ├─ colSet: (1,2)\n" +
			" │   ├─ tableId: 1\n" +
			" │   └─ Table\n" +
			" │       ├─ name: mytable\n" +
			" │       └─ columns: [i s]\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ static: [{[NULL, ∞)}]\n" +
			"     ├─ colSet: (3,4)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Table\n" +
			"         ├─ name: othertable\n" +
			"         └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=6.090 rows=3)\n" +
			" ├─ cmp: (mytable.i = othertable.i2)\n" +
			" ├─ sel: (NOT((othertable.s2 <=> mytable.s)))\n" +
			" ├─ IndexedTableAccess(mytable)\n" +
			" │   ├─ index: [mytable.i,mytable.s]\n" +
			" │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │   └─ columns: [i s]\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=1)\n" +
			" ├─ cmp: (mytable.i = othertable.i2)\n" +
			" ├─ sel: (NOT((othertable.s2 <=> mytable.s)))\n" +
			" ├─ IndexedTableAccess(mytable)\n" +
			" │   ├─ index: [mytable.i,mytable.s]\n" +
			" │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │   └─ columns: [i s]\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT * FROM MYTABLE JOIN OTHERTABLE ON i = i2 AND NOT (s2 = s)`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ mytable.i:0!null\n" +
			" │   └─ othertable.i2:3!null\n" +
			" ├─ sel: NOT\n" +
			" │   └─ Eq\n" +
			" │       ├─ othertable.s2:2!null\n" +
			" │       └─ mytable.s:1!null\n" +
			" ├─ IndexedTableAccess(mytable)\n" +
			" │   ├─ index: [mytable.i,mytable.s]\n" +
			" │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │   ├─ colSet: (1,2)\n" +
			" │   ├─ tableId: 1\n" +
			" │   └─ Table\n" +
			" │       ├─ name: mytable\n" +
			" │       └─ columns: [i s]\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ static: [{[NULL, ∞)}]\n" +
			"     ├─ colSet: (3,4)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Table\n" +
			"         ├─ name: othertable\n" +
			"         └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=6.090 rows=3)\n" +
			" ├─ cmp: (mytable.i = othertable.i2)\n" +
			" ├─ sel: (NOT((othertable.s2 = mytable.s)))\n" +
			" ├─ IndexedTableAccess(mytable)\n" +
			" │   ├─ index: [mytable.i,mytable.s]\n" +
			" │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │   └─ columns: [i s]\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=1)\n" +
			" ├─ cmp: (mytable.i = othertable.i2)\n" +
			" ├─ sel: (NOT((othertable.s2 = mytable.s)))\n" +
			" ├─ IndexedTableAccess(mytable)\n" +
			" │   ├─ index: [mytable.i,mytable.s]\n" +
			" │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │   └─ columns: [i s]\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT * FROM MYTABLE JOIN OTHERTABLE ON i = i2 AND CONCAT(s, s2) IS NOT NULL`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ mytable.i:0!null\n" +
			" │   └─ othertable.i2:3!null\n" +
			" ├─ sel: NOT\n" +
			" │   └─ concat(mytable.s:1!null,othertable.s2:2!null) IS NULL\n" +
			" ├─ IndexedTableAccess(mytable)\n" +
			" │   ├─ index: [mytable.i,mytable.s]\n" +
			" │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │   ├─ colSet: (1,2)\n" +
			" │   ├─ tableId: 1\n" +
			" │   └─ Table\n" +
			" │       ├─ name: mytable\n" +
			" │       └─ columns: [i s]\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ static: [{[NULL, ∞)}]\n" +
			"     ├─ colSet: (3,4)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Table\n" +
			"         ├─ name: othertable\n" +
			"         └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=6.090 rows=3)\n" +
			" ├─ cmp: (mytable.i = othertable.i2)\n" +
			" ├─ sel: (NOT(concat(mytable.s,othertable.s2) IS NULL))\n" +
			" ├─ IndexedTableAccess(mytable)\n" +
			" │   ├─ index: [mytable.i,mytable.s]\n" +
			" │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │   └─ columns: [i s]\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=1)\n" +
			" ├─ cmp: (mytable.i = othertable.i2)\n" +
			" ├─ sel: (NOT(concat(mytable.s,othertable.s2) IS NULL))\n" +
			" ├─ IndexedTableAccess(mytable)\n" +
			" │   ├─ index: [mytable.i,mytable.s]\n" +
			" │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │   └─ columns: [i s]\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT * FROM MYTABLE JOIN OTHERTABLE ON i = i2 AND s > s2`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ mytable.i:0!null\n" +
			" │   └─ othertable.i2:3!null\n" +
			" ├─ sel: GreaterThan\n" +
			" │   ├─ mytable.s:1!null\n" +
			" │   └─ othertable.s2:2!null\n" +
			" ├─ IndexedTableAccess(mytable)\n" +
			" │   ├─ index: [mytable.i,mytable.s]\n" +
			" │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │   ├─ colSet: (1,2)\n" +
			" │   ├─ tableId: 1\n" +
			" │   └─ Table\n" +
			" │       ├─ name: mytable\n" +
			" │       └─ columns: [i s]\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ static: [{[NULL, ∞)}]\n" +
			"     ├─ colSet: (3,4)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Table\n" +
			"         ├─ name: othertable\n" +
			"         └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=6.090 rows=3)\n" +
			" ├─ cmp: (mytable.i = othertable.i2)\n" +
			" ├─ sel: (mytable.s > othertable.s2)\n" +
			" ├─ IndexedTableAccess(mytable)\n" +
			" │   ├─ index: [mytable.i,mytable.s]\n" +
			" │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │   └─ columns: [i s]\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=6.090 rows=3) (actual rows=2 loops=1)\n" +
			" ├─ cmp: (mytable.i = othertable.i2)\n" +
			" ├─ sel: (mytable.s > othertable.s2)\n" +
			" ├─ IndexedTableAccess(mytable)\n" +
			" │   ├─ index: [mytable.i,mytable.s]\n" +
			" │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │   └─ columns: [i s]\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT * FROM MYTABLE JOIN OTHERTABLE ON i = i2 AND NOT(s > s2)`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ mytable.i:0!null\n" +
			" │   └─ othertable.i2:3!null\n" +
			" ├─ sel: LessThanOrEqual\n" +
			" │   ├─ mytable.s:1!null\n" +
			" │   └─ othertable.s2:2!null\n" +
			" ├─ IndexedTableAccess(mytable)\n" +
			" │   ├─ index: [mytable.i,mytable.s]\n" +
			" │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │   ├─ colSet: (1,2)\n" +
			" │   ├─ tableId: 1\n" +
			" │   └─ Table\n" +
			" │       ├─ name: mytable\n" +
			" │       └─ columns: [i s]\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ static: [{[NULL, ∞)}]\n" +
			"     ├─ colSet: (3,4)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Table\n" +
			"         ├─ name: othertable\n" +
			"         └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=6.090 rows=3)\n" +
			" ├─ cmp: (mytable.i = othertable.i2)\n" +
			" ├─ sel: (mytable.s <= othertable.s2)\n" +
			" ├─ IndexedTableAccess(mytable)\n" +
			" │   ├─ index: [mytable.i,mytable.s]\n" +
			" │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │   └─ columns: [i s]\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=6.090 rows=3) (actual rows=1 loops=1)\n" +
			" ├─ cmp: (mytable.i = othertable.i2)\n" +
			" ├─ sel: (mytable.s <= othertable.s2)\n" +
			" ├─ IndexedTableAccess(mytable)\n" +
			" │   ├─ index: [mytable.i,mytable.s]\n" +
			" │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │   └─ columns: [i s]\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT /*+ JOIN_ORDER(mytable, othertable) */ s2, i2, i FROM mytable INNER JOIN (SELECT * FROM othertable) othertable ON i2 = i`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [othertable.s2:1!null, othertable.i2:2!null, mytable.i:0!null]\n" +
			" └─ InnerJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ othertable.i2:2!null\n" +
			"     │   └─ mytable.i:0!null\n" +
			"     ├─ ProcessTable\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: othertable\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (5,6)\n" +
			"         ├─ tableId: 3\n" +
			"         └─ Table\n" +
			"             ├─ name: othertable\n" +
			"             ├─ columns: [s2 i2]\n" +
			"             ├─ colSet: (3,4)\n" +
			"             └─ tableId: 2\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [othertable.s2, othertable.i2, mytable.i]\n" +
			" └─ InnerJoin (estimated cost=304.000 rows=100)\n" +
			"     ├─ (othertable.i2 = mytable.i)\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: mytable\n" +
			"     │   └─ columns: [i]\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: othertable\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Table\n" +
			"             ├─ name: othertable\n" +
			"             └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [othertable.s2, othertable.i2, mytable.i]\n" +
			" └─ InnerJoin (estimated cost=304.000 rows=100) (actual rows=3 loops=1)\n" +
			"     ├─ (othertable.i2 = mytable.i)\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: mytable\n" +
			"     │   └─ columns: [i]\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: othertable\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Table\n" +
			"             ├─ name: othertable\n" +
			"             └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT s2, i2, i FROM mytable LEFT JOIN (SELECT * FROM othertable) othertable ON i2 = i`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [othertable.s2:1!null, othertable.i2:2!null, mytable.i:0!null]\n" +
			" └─ LeftOuterJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ othertable.i2:2!null\n" +
			"     │   └─ mytable.i:0!null\n" +
			"     ├─ ProcessTable\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: othertable\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (5,6)\n" +
			"         ├─ tableId: 3\n" +
			"         └─ Table\n" +
			"             ├─ name: othertable\n" +
			"             ├─ columns: [s2 i2]\n" +
			"             ├─ colSet: (3,4)\n" +
			"             └─ tableId: 2\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [othertable.s2, othertable.i2, mytable.i]\n" +
			" └─ LeftOuterJoin (estimated cost=302.000 rows=3)\n" +
			"     ├─ (othertable.i2 = mytable.i)\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: mytable\n" +
			"     │   └─ columns: [i]\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: othertable\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Table\n" +
			"             ├─ name: othertable\n" +
			"             └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [othertable.s2, othertable.i2, mytable.i]\n" +
			" └─ LeftOuterJoin (estimated cost=302.000 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ (othertable.i2 = mytable.i)\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: mytable\n" +
			"     │   └─ columns: [i]\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: othertable\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Table\n" +
			"             ├─ name: othertable\n" +
			"             └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT s2, i2, i FROM (SELECT * FROM mytable) mytable RIGHT JOIN (SELECT * FROM othertable) othertable ON i2 = i`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [othertable.s2:0!null, othertable.i2:1!null, mytable.i:2!null]\n" +
			" └─ LeftOuterHashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ othertable.i2:1!null\n" +
			"     │   └─ mytable.i:2!null\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: othertable\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   ├─ colSet: (7,8)\n" +
			"     │   ├─ tableId: 4\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: othertable\n" +
			"     │       ├─ columns: [s2 i2]\n" +
			"     │       ├─ colSet: (5,6)\n" +
			"     │       └─ tableId: 3\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(othertable.i2:1!null)\n" +
			"         ├─ right-key: TUPLE(mytable.i:0!null)\n" +
			"         └─ SubqueryAlias\n" +
			"             ├─ name: mytable\n" +
			"             ├─ outerVisibility: false\n" +
			"             ├─ isLateral: false\n" +
			"             ├─ cacheable: true\n" +
			"             ├─ colSet: (3,4)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 ├─ columns: [i s]\n" +
			"                 ├─ colSet: (1,2)\n" +
			"                 └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [othertable.s2, othertable.i2, mytable.i]\n" +
			" └─ LeftOuterHashJoin (estimated cost=402.250 rows=125)\n" +
			"     ├─ (othertable.i2 = mytable.i)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: othertable\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: othertable\n" +
			"     │       └─ columns: [s2 i2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (othertable.i2)\n" +
			"         ├─ right-key: (mytable.i)\n" +
			"         └─ SubqueryAlias\n" +
			"             ├─ name: mytable\n" +
			"             ├─ outerVisibility: false\n" +
			"             ├─ isLateral: false\n" +
			"             ├─ cacheable: true\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [othertable.s2, othertable.i2, mytable.i]\n" +
			" └─ LeftOuterHashJoin (estimated cost=402.250 rows=125) (actual rows=3 loops=1)\n" +
			"     ├─ (othertable.i2 = mytable.i)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: othertable\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: othertable\n" +
			"     │       └─ columns: [s2 i2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (othertable.i2)\n" +
			"         ├─ right-key: (mytable.i)\n" +
			"         └─ SubqueryAlias\n" +
			"             ├─ name: mytable\n" +
			"             ├─ outerVisibility: false\n" +
			"             ├─ isLateral: false\n" +
			"             ├─ cacheable: true\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a WHERE a.s is not null`,
		ExpectedPlan: "TableAlias(a)\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.s,mytable.i]\n" +
			"     ├─ static: [{(NULL, ∞), [NULL, ∞)}]\n" +
			"     ├─ colSet: (1,2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "TableAlias(a)\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.s,mytable.i]\n" +
			"     ├─ filters: [{(NULL, ∞), [NULL, ∞)}]\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "TableAlias(a)\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.s,mytable.i]\n" +
			"     ├─ filters: [{(NULL, ∞), [NULL, ∞)}]\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a inner join mytable b on (a.i = b.s) WHERE a.s is not null`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:0!null, a.s:1!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.s,mytable.i]\n" +
			"     │       ├─ static: [{(NULL, ∞), [NULL, ∞)}]\n" +
			"     │       ├─ colSet: (1,2)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.s]\n" +
			"             ├─ keys: [a.i:0!null]\n" +
			"             ├─ colSet: (3,4)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ LookupJoin (estimated cost=3.300 rows=1)\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.s,mytable.i]\n" +
			"     │       ├─ filters: [{(NULL, ∞), [NULL, ∞)}]\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.s]\n" +
			"             ├─ columns: [s]\n" +
			"             └─ keys: a.i\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ LookupJoin (estimated cost=3.300 rows=1) (actual rows=0 loops=1)\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.s,mytable.i]\n" +
			"     │       ├─ filters: [{(NULL, ∞), [NULL, ∞)}]\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.s]\n" +
			"             ├─ columns: [s]\n" +
			"             └─ keys: a.i\n" +
			"",
	},
	{
		Query: `SELECT /*+ JOIN_ORDER(b, a) */ a.* FROM mytable a inner join mytable b on (a.i = b.s) WHERE a.s is not null`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:1!null, a.s:2!null]\n" +
			" └─ InnerJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ a.i:1!null\n" +
			"     │   └─ b.s:0!null\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [s]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.s,mytable.i]\n" +
			"             ├─ static: [{(NULL, ∞), [NULL, ∞)}]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             ├─ tableId: 1\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=4.030 rows=1)\n" +
			"     ├─ (a.i = b.s)\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [s]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.s,mytable.i]\n" +
			"             ├─ filters: [{(NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=4.030 rows=1) (actual rows=0 loops=1)\n" +
			"     ├─ (a.i = b.s)\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [s]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.s,mytable.i]\n" +
			"             ├─ filters: [{(NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a inner join mytable b on (a.i = b.s) WHERE a.s not in ('1', '2', '3', '4')`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:0!null, a.s:1!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Filter\n" +
			"     │   ├─ NOT\n" +
			"     │   │   └─ HashIn\n" +
			"     │   │       ├─ a.s:1!null\n" +
			"     │   │       └─ TUPLE(1 (longtext), 2 (longtext), 3 (longtext), 4 (longtext))\n" +
			"     │   └─ TableAlias(a)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.s,mytable.i]\n" +
			"     │           ├─ static: [{(NULL, 1), [NULL, ∞)}, {(1, 2), [NULL, ∞)}, {(2, 3), [NULL, ∞)}, {(3, 4), [NULL, ∞)}, {(4, ∞), [NULL, ∞)}]\n" +
			"     │           ├─ colSet: (1,2)\n" +
			"     │           ├─ tableId: 1\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: mytable\n" +
			"     │               └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.s]\n" +
			"             ├─ keys: [a.i:0!null]\n" +
			"             ├─ colSet: (3,4)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ LookupJoin (estimated cost=3.300 rows=0)\n" +
			"     ├─ Filter\n" +
			"     │   ├─ (NOT((a.s HASH IN ('1', '2', '3', '4'))))\n" +
			"     │   └─ TableAlias(a)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.s,mytable.i]\n" +
			"     │           ├─ filters: [{(NULL, 1), [NULL, ∞)}, {(1, 2), [NULL, ∞)}, {(2, 3), [NULL, ∞)}, {(3, 4), [NULL, ∞)}, {(4, ∞), [NULL, ∞)}]\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.s]\n" +
			"             ├─ columns: [s]\n" +
			"             └─ keys: a.i\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ LookupJoin (estimated cost=3.300 rows=0) (actual rows=0 loops=1)\n" +
			"     ├─ Filter\n" +
			"     │   ├─ (NOT((a.s HASH IN ('1', '2', '3', '4'))))\n" +
			"     │   └─ TableAlias(a)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.s,mytable.i]\n" +
			"     │           ├─ filters: [{(NULL, 1), [NULL, ∞)}, {(1, 2), [NULL, ∞)}, {(2, 3), [NULL, ∞)}, {(3, 4), [NULL, ∞)}, {(4, ∞), [NULL, ∞)}]\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.s]\n" +
			"             ├─ columns: [s]\n" +
			"             └─ keys: a.i\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a inner join mytable b on (a.i = b.s) WHERE a.i in (1, 2, 3, 4)`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:0!null, a.s:1!null]\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ a.i:0!null\n" +
			"     │   └─ b.s:2!null\n" +
			"     ├─ Filter\n" +
			"     │   ├─ HashIn\n" +
			"     │   │   ├─ a.i:0!null\n" +
			"     │   │   └─ TUPLE(1 (tinyint), 2 (tinyint), 3 (tinyint), 4 (tinyint))\n" +
			"     │   └─ TableAlias(a)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.i,mytable.s]\n" +
			"     │           ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           ├─ colSet: (1,2)\n" +
			"     │           ├─ tableId: 1\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: mytable\n" +
			"     │               └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.s]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (3,4)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ MergeJoin (estimated cost=5.070 rows=2)\n" +
			"     ├─ cmp: (a.i = b.s)\n" +
			"     ├─ Filter\n" +
			"     │   ├─ (a.i HASH IN (1, 2, 3, 4))\n" +
			"     │   └─ TableAlias(a)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.i,mytable.s]\n" +
			"     │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.s]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [s]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ MergeJoin (estimated cost=5.070 rows=2) (actual rows=0 loops=1)\n" +
			"     ├─ cmp: (a.i = b.s)\n" +
			"     ├─ Filter\n" +
			"     │   ├─ (a.i HASH IN (1, 2, 3, 4))\n" +
			"     │   └─ TableAlias(a)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.i,mytable.s]\n" +
			"     │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.s]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [s]\n" +
			"",
	},
	{
		Query: `SELECT * FROM mytable WHERE i in (1, 2, 3, 4)`,
		ExpectedPlan: "Filter\n" +
			" ├─ HashIn\n" +
			" │   ├─ mytable.i:0!null\n" +
			" │   └─ TUPLE(1 (tinyint), 2 (tinyint), 3 (tinyint), 4 (tinyint))\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i]\n" +
			"     ├─ static: [{[1, 1]}, {[2, 2]}, {[3, 3]}, {[4, 4]}]\n" +
			"     ├─ colSet: (1,2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (mytable.i HASH IN (1, 2, 3, 4))\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i]\n" +
			"     ├─ filters: [{[1, 1]}, {[2, 2]}, {[3, 3]}, {[4, 4]}]\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (mytable.i HASH IN (1, 2, 3, 4))\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i]\n" +
			"     ├─ filters: [{[1, 1]}, {[2, 2]}, {[3, 3]}, {[4, 4]}]\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT * FROM mytable WHERE i in (1, 1)`,
		ExpectedPlan: "Filter\n" +
			" ├─ HashIn\n" +
			" │   ├─ mytable.i:0!null\n" +
			" │   └─ TUPLE(1 (tinyint), 1 (tinyint))\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i]\n" +
			"     ├─ static: [{[1, 1]}]\n" +
			"     ├─ colSet: (1,2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (mytable.i HASH IN (1, 1))\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i]\n" +
			"     ├─ filters: [{[1, 1]}]\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (mytable.i HASH IN (1, 1))\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i]\n" +
			"     ├─ filters: [{[1, 1]}]\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT * FROM mytable WHERE i in (CAST(NULL AS SIGNED), 2, 3, 4)`,
		ExpectedPlan: "Filter\n" +
			" ├─ HashIn\n" +
			" │   ├─ mytable.i:0!null\n" +
			" │   └─ TUPLE(NULL (bigint), 2 (tinyint), 3 (tinyint), 4 (tinyint))\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i]\n" +
			"     ├─ static: [{[2, 2]}, {[3, 3]}, {[4, 4]}]\n" +
			"     ├─ colSet: (1,2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (mytable.i HASH IN (NULL, 2, 3, 4))\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i]\n" +
			"     ├─ filters: [{[2, 2]}, {[3, 3]}, {[4, 4]}]\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (mytable.i HASH IN (NULL, 2, 3, 4))\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i]\n" +
			"     ├─ filters: [{[2, 2]}, {[3, 3]}, {[4, 4]}]\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT * FROM mytable WHERE i in (1+2)`,
		ExpectedPlan: "IndexedTableAccess(mytable)\n" +
			" ├─ index: [mytable.i]\n" +
			" ├─ static: [{[3, 3]}]\n" +
			" ├─ colSet: (1,2)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(mytable)\n" +
			" ├─ index: [mytable.i]\n" +
			" ├─ filters: [{[3, 3]}]\n" +
			" └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(mytable)\n" +
			" ├─ index: [mytable.i]\n" +
			" ├─ filters: [{[3, 3]}]\n" +
			" └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT * from mytable where upper(s) IN ('FIRST ROW', 'SECOND ROW')`,
		ExpectedPlan: "Filter\n" +
			" ├─ HashIn\n" +
			" │   ├─ upper(mytable.s)\n" +
			" │   └─ TUPLE(FIRST ROW (longtext), SECOND ROW (longtext))\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (upper(mytable.s) HASH IN ('FIRST ROW', 'SECOND ROW'))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (upper(mytable.s) HASH IN ('FIRST ROW', 'SECOND ROW'))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT * from mytable where cast(i as CHAR) IN ('a', 'b')`,
		ExpectedPlan: "Filter\n" +
			" ├─ HashIn\n" +
			" │   ├─ convert\n" +
			" │   │   ├─ type: char\n" +
			" │   │   └─ mytable.i:0!null\n" +
			" │   └─ TUPLE(a (longtext), b (longtext))\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (convert(mytable.i, char) HASH IN ('a', 'b'))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (convert(mytable.i, char) HASH IN ('a', 'b'))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT * from mytable where cast(i as CHAR) IN ('1', '2')`,
		ExpectedPlan: "Filter\n" +
			" ├─ HashIn\n" +
			" │   ├─ convert\n" +
			" │   │   ├─ type: char\n" +
			" │   │   └─ mytable.i:0!null\n" +
			" │   └─ TUPLE(1 (longtext), 2 (longtext))\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (convert(mytable.i, char) HASH IN ('1', '2'))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (convert(mytable.i, char) HASH IN ('1', '2'))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT * from mytable where (i > 2) IN (true)`,
		ExpectedPlan: "Filter\n" +
			" ├─ HashIn\n" +
			" │   ├─ GreaterThan\n" +
			" │   │   ├─ mytable.i:0!null\n" +
			" │   │   └─ 2 (bigint)\n" +
			" │   └─ TUPLE(true (tinyint(1)))\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ ((mytable.i > 2) HASH IN (true))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ ((mytable.i > 2) HASH IN (true))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT * from mytable where (i + 6) IN (7, 8)`,
		ExpectedPlan: "Filter\n" +
			" ├─ HashIn\n" +
			" │   ├─ (mytable.i:0!null + 6 (tinyint))\n" +
			" │   └─ TUPLE(7 (tinyint), 8 (tinyint))\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ ((mytable.i + 6) HASH IN (7, 8))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ ((mytable.i + 6) HASH IN (7, 8))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT * from mytable where (i + 40) IN (7, 8)`,
		ExpectedPlan: "Filter\n" +
			" ├─ HashIn\n" +
			" │   ├─ (mytable.i:0!null + 40 (tinyint))\n" +
			" │   └─ TUPLE(7 (tinyint), 8 (tinyint))\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ ((mytable.i + 40) HASH IN (7, 8))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ ((mytable.i + 40) HASH IN (7, 8))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT * from mytable where (i = 1 | false) IN (true)`,
		ExpectedPlan: "Filter\n" +
			" ├─ HashIn\n" +
			" │   ├─ Eq\n" +
			" │   │   ├─ mytable.i:0!null\n" +
			" │   │   └─ 1 (bigint)\n" +
			" │   └─ TUPLE(true (tinyint(1)))\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ ((mytable.i = 1) HASH IN (true))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ ((mytable.i = 1) HASH IN (true))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT * from mytable where (i = 1 & false) IN (true)`,
		ExpectedPlan: "Filter\n" +
			" ├─ HashIn\n" +
			" │   ├─ Eq\n" +
			" │   │   ├─ mytable.i:0!null\n" +
			" │   │   └─ 0 (bigint)\n" +
			" │   └─ TUPLE(true (tinyint(1)))\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ ((mytable.i = 0) HASH IN (true))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ ((mytable.i = 0) HASH IN (true))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT * FROM mytable WHERE i in (2*i)`,
		ExpectedPlan: "Filter\n" +
			" ├─ IN\n" +
			" │   ├─ left: mytable.i:0!null\n" +
			" │   └─ right: TUPLE((2 (tinyint) * mytable.i:0!null))\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (mytable.i IN ((2 * mytable.i)))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (mytable.i IN ((2 * mytable.i)))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT * FROM mytable WHERE i in (i)`,
		ExpectedPlan: "Filter\n" +
			" ├─ IN\n" +
			" │   ├─ left: mytable.i:0!null\n" +
			" │   └─ right: TUPLE(mytable.i:0!null)\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (mytable.i IN (mytable.i))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (mytable.i IN (mytable.i))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT * from mytable WHERE 4 IN (i + 2)`,
		ExpectedPlan: "Filter\n" +
			" ├─ IN\n" +
			" │   ├─ left: 4 (tinyint)\n" +
			" │   └─ right: TUPLE((mytable.i:0!null + 2 (tinyint)))\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (4 IN ((mytable.i + 2)))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (4 IN ((mytable.i + 2)))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT * from mytable WHERE s IN (cast('first row' AS CHAR))`,
		ExpectedPlan: "Filter\n" +
			" ├─ HashIn\n" +
			" │   ├─ mytable.s:1!null\n" +
			" │   └─ TUPLE(first row (longtext))\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.s]\n" +
			"     ├─ static: [{[first row, first row]}]\n" +
			"     ├─ colSet: (1,2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (mytable.s HASH IN ('first row'))\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.s]\n" +
			"     ├─ filters: [{[first row, first row]}]\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (mytable.s HASH IN ('first row'))\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.s]\n" +
			"     ├─ filters: [{[first row, first row]}]\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT * from mytable WHERE s IN (lower('SECOND ROW'), 'FIRST ROW')`,
		ExpectedPlan: "Filter\n" +
			" ├─ HashIn\n" +
			" │   ├─ mytable.s:1!null\n" +
			" │   └─ TUPLE(second row (longtext), FIRST ROW (longtext))\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.s]\n" +
			"     ├─ static: [{[FIRST ROW, FIRST ROW]}, {[second row, second row]}]\n" +
			"     ├─ colSet: (1,2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (mytable.s HASH IN ('second row', 'FIRST ROW'))\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.s]\n" +
			"     ├─ filters: [{[FIRST ROW, FIRST ROW]}, {[second row, second row]}]\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (mytable.s HASH IN ('second row', 'FIRST ROW'))\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.s]\n" +
			"     ├─ filters: [{[FIRST ROW, FIRST ROW]}, {[second row, second row]}]\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT * from mytable where true IN (i > 3)`,
		ExpectedPlan: "Filter\n" +
			" ├─ IN\n" +
			" │   ├─ left: true (tinyint(1))\n" +
			" │   └─ right: TUPLE(GreaterThan\n" +
			" │       ├─ mytable.i:0!null\n" +
			" │       └─ 3 (bigint)\n" +
			" │      )\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (true IN ((mytable.i > 3)))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (true IN ((mytable.i > 3)))\n" +
			" └─ Table\n" +
			"     ├─ name: mytable\n" +
			"     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a, mytable b where a.i = b.i`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:0!null, a.s:1!null]\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ a.i:0!null\n" +
			"     │   └─ b.i:2!null\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i,mytable.s]\n" +
			"     │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       ├─ colSet: (1,2)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (3,4)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"     ├─ cmp: (a.i = b.i)\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i,mytable.s]\n" +
			"     │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ cmp: (a.i = b.i)\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i,mytable.s]\n" +
			"     │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a, mytable b where a.s = b.i OR a.i = 1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:1!null, a.s:2!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Or\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ a.s:2!null\n" +
			"     │   │   └─ b.i:0!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ a.i:1!null\n" +
			"     │       └─ 1 (bigint)\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Concat\n" +
			"             ├─ TableAlias(a)\n" +
			"             │   └─ IndexedTableAccess(mytable)\n" +
			"             │       ├─ index: [mytable.i]\n" +
			"             │       ├─ keys: [1 (bigint)]\n" +
			"             │       ├─ colSet: (1,2)\n" +
			"             │       ├─ tableId: 1\n" +
			"             │       └─ Table\n" +
			"             │           ├─ name: mytable\n" +
			"             │           └─ columns: [i s]\n" +
			"             └─ TableAlias(a)\n" +
			"                 └─ IndexedTableAccess(mytable)\n" +
			"                     ├─ index: [mytable.s,mytable.i]\n" +
			"                     ├─ keys: [b.i:0!null]\n" +
			"                     ├─ colSet: (1,2)\n" +
			"                     ├─ tableId: 1\n" +
			"                     └─ Table\n" +
			"                         ├─ name: mytable\n" +
			"                         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ LookupJoin (estimated cost=-2.705 rows=3)\n" +
			"     ├─ ((a.s = b.i) OR (a.i = 1))\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Concat\n" +
			"             ├─ TableAlias(a)\n" +
			"             │   └─ IndexedTableAccess(mytable)\n" +
			"             │       ├─ index: [mytable.i]\n" +
			"             │       ├─ columns: [i s]\n" +
			"             │       └─ keys: 1\n" +
			"             └─ TableAlias(a)\n" +
			"                 └─ IndexedTableAccess(mytable)\n" +
			"                     ├─ index: [mytable.s,mytable.i]\n" +
			"                     ├─ columns: [i s]\n" +
			"                     └─ keys: b.i\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ LookupJoin (estimated cost=-2.705 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ ((a.s = b.i) OR (a.i = 1))\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Concat\n" +
			"             ├─ TableAlias(a)\n" +
			"             │   └─ IndexedTableAccess(mytable)\n" +
			"             │       ├─ index: [mytable.i]\n" +
			"             │       ├─ columns: [i s]\n" +
			"             │       └─ keys: 1\n" +
			"             └─ TableAlias(a)\n" +
			"                 └─ IndexedTableAccess(mytable)\n" +
			"                     ├─ index: [mytable.s,mytable.i]\n" +
			"                     ├─ columns: [i s]\n" +
			"                     └─ keys: b.i\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a, mytable b where NOT(a.i = b.s OR a.s = b.i)`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:2!null, a.s:3!null]\n" +
			" └─ InnerJoin\n" +
			"     ├─ AND\n" +
			"     │   ├─ NOT\n" +
			"     │   │   └─ Eq\n" +
			"     │   │       ├─ a.i:2!null\n" +
			"     │   │       └─ b.s:1!null\n" +
			"     │   └─ NOT\n" +
			"     │       └─ Eq\n" +
			"     │           ├─ a.s:3!null\n" +
			"     │           └─ b.i:0!null\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             ├─ columns: [i s]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3)\n" +
			"     ├─ ((NOT((a.i = b.s))) AND (NOT((a.s = b.i))))\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3) (actual rows=9 loops=1)\n" +
			"     ├─ ((NOT((a.i = b.s))) AND (NOT((a.s = b.i))))\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a, mytable b where a.i = b.s OR a.s = b.i IS FALSE`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:2!null, a.s:3!null]\n" +
			" └─ InnerJoin\n" +
			"     ├─ Or\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ a.i:2!null\n" +
			"     │   │   └─ b.s:1!null\n" +
			"     │   └─ (a.s = b.i) IS FALSE\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             ├─ columns: [i s]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3)\n" +
			"     ├─ ((a.i = b.s) OR (a.s = b.i) IS FALSE)\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3) (actual rows=9 loops=1)\n" +
			"     ├─ ((a.i = b.s) OR (a.s = b.i) IS FALSE)\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a, mytable b where a.i >= b.i`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:1!null, a.s:2!null]\n" +
			" └─ InnerJoin\n" +
			"     ├─ GreaterThanOrEqual\n" +
			"     │   ├─ a.i:1!null\n" +
			"     │   └─ b.i:0!null\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             ├─ columns: [i s]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3)\n" +
			"     ├─ (a.i >= b.i)\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3) (actual rows=6 loops=1)\n" +
			"     ├─ (a.i >= b.i)\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a, mytable b where a.i = a.s`,
		ExpectedPlan: "CrossJoin\n" +
			" ├─ TableAlias(b)\n" +
			" │   └─ ProcessTable\n" +
			" │       └─ Table\n" +
			" │           ├─ name: mytable\n" +
			" │           └─ columns: []\n" +
			" └─ Filter\n" +
			"     ├─ Eq\n" +
			"     │   ├─ a.i:0!null\n" +
			"     │   └─ a.s:1!null\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             ├─ columns: [i s]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "CrossJoin (estimated cost=7.060 rows=2)\n" +
			" ├─ TableAlias(b)\n" +
			" │   └─ Table\n" +
			" │       ├─ name: mytable\n" +
			" │       └─ columns: []\n" +
			" └─ Filter\n" +
			"     ├─ (a.i = a.s)\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "CrossJoin (estimated cost=7.060 rows=2) (actual rows=0 loops=1)\n" +
			" ├─ TableAlias(b)\n" +
			" │   └─ Table\n" +
			" │       ├─ name: mytable\n" +
			" │       └─ columns: []\n" +
			" └─ Filter\n" +
			"     ├─ (a.i = a.s)\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a, mytable b where a.i in (2, 432, 7)`,
		ExpectedPlan: "CrossJoin\n" +
			" ├─ TableAlias(b)\n" +
			" │   └─ ProcessTable\n" +
			" │       └─ Table\n" +
			" │           ├─ name: mytable\n" +
			" │           └─ columns: []\n" +
			" └─ Filter\n" +
			"     ├─ HashIn\n" +
			"     │   ├─ a.i:0!null\n" +
			"     │   └─ TUPLE(2 (tinyint), 432 (smallint), 7 (tinyint))\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ static: [{[2, 2]}, {[7, 7]}, {[432, 432]}]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             ├─ tableId: 1\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "CrossJoin (estimated cost=7.060 rows=2)\n" +
			" ├─ TableAlias(b)\n" +
			" │   └─ Table\n" +
			" │       ├─ name: mytable\n" +
			" │       └─ columns: []\n" +
			" └─ Filter\n" +
			"     ├─ (a.i HASH IN (2, 432, 7))\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ filters: [{[2, 2]}, {[7, 7]}, {[432, 432]}]\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "CrossJoin (estimated cost=7.060 rows=2) (actual rows=3 loops=1)\n" +
			" ├─ TableAlias(b)\n" +
			" │   └─ Table\n" +
			" │       ├─ name: mytable\n" +
			" │       └─ columns: []\n" +
			" └─ Filter\n" +
			"     ├─ (a.i HASH IN (2, 432, 7))\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ filters: [{[2, 2]}, {[7, 7]}, {[432, 432]}]\n" +
			"             └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a, mytable b, mytable c, mytable d where a.i = b.i AND b.i = c.i AND c.i = d.i AND c.i = 2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:0!null, a.s:1!null]\n" +
			" └─ InnerJoin\n" +
			"     ├─ AND\n" +
			"     │   ├─ AND\n" +
			"     │   │   ├─ AND\n" +
			"     │   │   │   ├─ Eq\n" +
			"     │   │   │   │   ├─ a.i:0!null\n" +
			"     │   │   │   │   └─ b.i:3!null\n" +
			"     │   │   │   └─ Eq\n" +
			"     │   │   │       ├─ c.i:4!null\n" +
			"     │   │   │       └─ d.i:2!null\n" +
			"     │   │   └─ Eq\n" +
			"     │   │       ├─ a.i:0!null\n" +
			"     │   │       └─ c.i:4!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ b.i:3!null\n" +
			"     │       └─ d.i:2!null\n" +
			"     ├─ MergeJoin\n" +
			"     │   ├─ cmp: Eq\n" +
			"     │   │   ├─ a.i:0!null\n" +
			"     │   │   └─ d.i:2!null\n" +
			"     │   ├─ TableAlias(a)\n" +
			"     │   │   └─ IndexedTableAccess(mytable)\n" +
			"     │   │       ├─ index: [mytable.i,mytable.s]\n" +
			"     │   │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │       ├─ colSet: (1,2)\n" +
			"     │   │       ├─ tableId: 1\n" +
			"     │   │       └─ Table\n" +
			"     │   │           ├─ name: mytable\n" +
			"     │   │           └─ columns: [i s]\n" +
			"     │   └─ TableAlias(d)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.i]\n" +
			"     │           ├─ static: [{[NULL, ∞)}]\n" +
			"     │           ├─ colSet: (7,8)\n" +
			"     │           ├─ tableId: 4\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: mytable\n" +
			"     │               └─ columns: [i]\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ b.i:3!null\n" +
			"         │   └─ c.i:4!null\n" +
			"         ├─ TableAlias(b)\n" +
			"         │   └─ IndexedTableAccess(mytable)\n" +
			"         │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │       ├─ colSet: (3,4)\n" +
			"         │       ├─ tableId: 2\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: mytable\n" +
			"         │           └─ columns: [i]\n" +
			"         └─ Filter\n" +
			"             ├─ Eq\n" +
			"             │   ├─ c.i:0!null\n" +
			"             │   └─ 2 (bigint)\n" +
			"             └─ TableAlias(c)\n" +
			"                 └─ IndexedTableAccess(mytable)\n" +
			"                     ├─ index: [mytable.i]\n" +
			"                     ├─ static: [{[2, 2]}]\n" +
			"                     ├─ colSet: (5,6)\n" +
			"                     ├─ tableId: 3\n" +
			"                     └─ Table\n" +
			"                         ├─ name: mytable\n" +
			"                         └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3)\n" +
			"     ├─ ((((a.i = b.i) AND (c.i = d.i)) AND (a.i = c.i)) AND (b.i = d.i))\n" +
			"     ├─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"     │   ├─ cmp: (a.i = d.i)\n" +
			"     │   ├─ TableAlias(a)\n" +
			"     │   │   └─ IndexedTableAccess(mytable)\n" +
			"     │   │       ├─ index: [mytable.i,mytable.s]\n" +
			"     │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │       └─ columns: [i s]\n" +
			"     │   └─ TableAlias(d)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.i]\n" +
			"     │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           └─ columns: [i]\n" +
			"     └─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"         ├─ cmp: (b.i = c.i)\n" +
			"         ├─ TableAlias(b)\n" +
			"         │   └─ IndexedTableAccess(mytable)\n" +
			"         │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │       └─ columns: [i]\n" +
			"         └─ Filter\n" +
			"             ├─ (c.i = 2)\n" +
			"             └─ TableAlias(c)\n" +
			"                 └─ IndexedTableAccess(mytable)\n" +
			"                     ├─ index: [mytable.i]\n" +
			"                     ├─ filters: [{[2, 2]}]\n" +
			"                     └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3) (actual rows=1 loops=1)\n" +
			"     ├─ ((((a.i = b.i) AND (c.i = d.i)) AND (a.i = c.i)) AND (b.i = d.i))\n" +
			"     ├─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=1)\n" +
			"     │   ├─ cmp: (a.i = d.i)\n" +
			"     │   ├─ TableAlias(a)\n" +
			"     │   │   └─ IndexedTableAccess(mytable)\n" +
			"     │   │       ├─ index: [mytable.i,mytable.s]\n" +
			"     │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │       └─ columns: [i s]\n" +
			"     │   └─ TableAlias(d)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.i]\n" +
			"     │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           └─ columns: [i]\n" +
			"     └─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=1 loops=3)\n" +
			"         ├─ cmp: (b.i = c.i)\n" +
			"         ├─ TableAlias(b)\n" +
			"         │   └─ IndexedTableAccess(mytable)\n" +
			"         │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │       └─ columns: [i]\n" +
			"         └─ Filter\n" +
			"             ├─ (c.i = 2)\n" +
			"             └─ TableAlias(c)\n" +
			"                 └─ IndexedTableAccess(mytable)\n" +
			"                     ├─ index: [mytable.i]\n" +
			"                     ├─ filters: [{[2, 2]}]\n" +
			"                     └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a, mytable b, mytable c, mytable d where a.i = b.i AND b.i = c.i AND (c.i = d.s OR c.i = 2)`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:2!null, a.s:3!null]\n" +
			" └─ InnerJoin\n" +
			"     ├─ AND\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ b.i:4!null\n" +
			"     │   │   └─ c.i:1!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ a.i:2!null\n" +
			"     │       └─ c.i:1!null\n" +
			"     ├─ LookupJoin\n" +
			"     │   ├─ Or\n" +
			"     │   │   ├─ Eq\n" +
			"     │   │   │   ├─ c.i:1!null\n" +
			"     │   │   │   └─ d.s:0!null\n" +
			"     │   │   └─ Eq\n" +
			"     │   │       ├─ c.i:1!null\n" +
			"     │   │       └─ 2 (bigint)\n" +
			"     │   ├─ TableAlias(d)\n" +
			"     │   │   └─ ProcessTable\n" +
			"     │   │       └─ Table\n" +
			"     │   │           ├─ name: mytable\n" +
			"     │   │           └─ columns: [s]\n" +
			"     │   └─ TableAlias(c)\n" +
			"     │       └─ Concat\n" +
			"     │           ├─ TableAlias(c)\n" +
			"     │           │   └─ IndexedTableAccess(mytable)\n" +
			"     │           │       ├─ index: [mytable.i]\n" +
			"     │           │       ├─ keys: [2 (bigint)]\n" +
			"     │           │       ├─ colSet: (5,6)\n" +
			"     │           │       ├─ tableId: 3\n" +
			"     │           │       └─ Table\n" +
			"     │           │           ├─ name: mytable\n" +
			"     │           │           └─ columns: [i]\n" +
			"     │           └─ TableAlias(c)\n" +
			"     │               └─ IndexedTableAccess(mytable)\n" +
			"     │                   ├─ index: [mytable.i]\n" +
			"     │                   ├─ keys: [d.s:0!null]\n" +
			"     │                   ├─ colSet: (5,6)\n" +
			"     │                   ├─ tableId: 3\n" +
			"     │                   └─ Table\n" +
			"     │                       ├─ name: mytable\n" +
			"     │                       └─ columns: [i]\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ a.i:2!null\n" +
			"         │   └─ b.i:4!null\n" +
			"         ├─ TableAlias(a)\n" +
			"         │   └─ IndexedTableAccess(mytable)\n" +
			"         │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │       ├─ colSet: (1,2)\n" +
			"         │       ├─ tableId: 1\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: mytable\n" +
			"         │           └─ columns: [i s]\n" +
			"         └─ TableAlias(b)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ static: [{[NULL, ∞)}]\n" +
			"                 ├─ colSet: (3,4)\n" +
			"                 ├─ tableId: 2\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3)\n" +
			"     ├─ ((b.i = c.i) AND (a.i = c.i))\n" +
			"     ├─ LookupJoin (estimated cost=-2.705 rows=3)\n" +
			"     │   ├─ ((c.i = d.s) OR (c.i = 2))\n" +
			"     │   ├─ TableAlias(d)\n" +
			"     │   │   └─ Table\n" +
			"     │   │       ├─ name: mytable\n" +
			"     │   │       └─ columns: [s]\n" +
			"     │   └─ TableAlias(c)\n" +
			"     │       └─ Concat\n" +
			"     │           ├─ TableAlias(c)\n" +
			"     │           │   └─ IndexedTableAccess(mytable)\n" +
			"     │           │       ├─ index: [mytable.i]\n" +
			"     │           │       ├─ columns: [i]\n" +
			"     │           │       └─ keys: 2\n" +
			"     │           └─ TableAlias(c)\n" +
			"     │               └─ IndexedTableAccess(mytable)\n" +
			"     │                   ├─ index: [mytable.i]\n" +
			"     │                   ├─ columns: [i]\n" +
			"     │                   └─ keys: d.s\n" +
			"     └─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"         ├─ cmp: (a.i = b.i)\n" +
			"         ├─ TableAlias(a)\n" +
			"         │   └─ IndexedTableAccess(mytable)\n" +
			"         │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │       └─ columns: [i s]\n" +
			"         └─ TableAlias(b)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ ((b.i = c.i) AND (a.i = c.i))\n" +
			"     ├─ LookupJoin (estimated cost=-2.705 rows=3) (actual rows=3 loops=1)\n" +
			"     │   ├─ ((c.i = d.s) OR (c.i = 2))\n" +
			"     │   ├─ TableAlias(d)\n" +
			"     │   │   └─ Table\n" +
			"     │   │       ├─ name: mytable\n" +
			"     │   │       └─ columns: [s]\n" +
			"     │   └─ TableAlias(c)\n" +
			"     │       └─ Concat\n" +
			"     │           ├─ TableAlias(c)\n" +
			"     │           │   └─ IndexedTableAccess(mytable)\n" +
			"     │           │       ├─ index: [mytable.i]\n" +
			"     │           │       ├─ columns: [i]\n" +
			"     │           │       └─ keys: 2\n" +
			"     │           └─ TableAlias(c)\n" +
			"     │               └─ IndexedTableAccess(mytable)\n" +
			"     │                   ├─ index: [mytable.i]\n" +
			"     │                   ├─ columns: [i]\n" +
			"     │                   └─ keys: d.s\n" +
			"     └─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=3)\n" +
			"         ├─ cmp: (a.i = b.i)\n" +
			"         ├─ TableAlias(a)\n" +
			"         │   └─ IndexedTableAccess(mytable)\n" +
			"         │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │       └─ columns: [i s]\n" +
			"         └─ TableAlias(b)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a, mytable b, mytable c, mytable d where a.i = b.i AND b.i = c.i`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:0!null, a.s:1!null]\n" +
			" └─ CrossJoin\n" +
			"     ├─ TableAlias(d)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: []\n" +
			"     └─ LookupJoin\n" +
			"         ├─ MergeJoin\n" +
			"         │   ├─ cmp: Eq\n" +
			"         │   │   ├─ a.i:0!null\n" +
			"         │   │   └─ b.i:2!null\n" +
			"         │   ├─ TableAlias(a)\n" +
			"         │   │   └─ IndexedTableAccess(mytable)\n" +
			"         │   │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │   │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │   │       ├─ colSet: (1,2)\n" +
			"         │   │       ├─ tableId: 1\n" +
			"         │   │       └─ Table\n" +
			"         │   │           ├─ name: mytable\n" +
			"         │   │           └─ columns: [i s]\n" +
			"         │   └─ TableAlias(b)\n" +
			"         │       └─ IndexedTableAccess(mytable)\n" +
			"         │           ├─ index: [mytable.i]\n" +
			"         │           ├─ static: [{[NULL, ∞)}]\n" +
			"         │           ├─ colSet: (3,4)\n" +
			"         │           ├─ tableId: 2\n" +
			"         │           └─ Table\n" +
			"         │               ├─ name: mytable\n" +
			"         │               └─ columns: [i]\n" +
			"         └─ TableAlias(c)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ keys: [b.i:2!null]\n" +
			"                 ├─ colSet: (5,6)\n" +
			"                 ├─ tableId: 3\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ CrossJoin (estimated cost=10.090 rows=3)\n" +
			"     ├─ TableAlias(d)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: []\n" +
			"     └─ LookupJoin (estimated cost=9.900 rows=3)\n" +
			"         ├─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"         │   ├─ cmp: (a.i = b.i)\n" +
			"         │   ├─ TableAlias(a)\n" +
			"         │   │   └─ IndexedTableAccess(mytable)\n" +
			"         │   │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │   │       └─ columns: [i s]\n" +
			"         │   └─ TableAlias(b)\n" +
			"         │       └─ IndexedTableAccess(mytable)\n" +
			"         │           ├─ index: [mytable.i]\n" +
			"         │           ├─ filters: [{[NULL, ∞)}]\n" +
			"         │           └─ columns: [i]\n" +
			"         └─ TableAlias(c)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ columns: [i]\n" +
			"                 └─ keys: b.i\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ CrossJoin (estimated cost=10.090 rows=3) (actual rows=9 loops=1)\n" +
			"     ├─ TableAlias(d)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: []\n" +
			"     └─ LookupJoin (estimated cost=9.900 rows=3) (actual rows=3 loops=3)\n" +
			"         ├─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=3)\n" +
			"         │   ├─ cmp: (a.i = b.i)\n" +
			"         │   ├─ TableAlias(a)\n" +
			"         │   │   └─ IndexedTableAccess(mytable)\n" +
			"         │   │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │   │       └─ columns: [i s]\n" +
			"         │   └─ TableAlias(b)\n" +
			"         │       └─ IndexedTableAccess(mytable)\n" +
			"         │           ├─ index: [mytable.i]\n" +
			"         │           ├─ filters: [{[NULL, ∞)}]\n" +
			"         │           └─ columns: [i]\n" +
			"         └─ TableAlias(c)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ columns: [i]\n" +
			"                 └─ keys: b.i\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a CROSS JOIN mytable b where a.i = b.i`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:0!null, a.s:1!null]\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ a.i:0!null\n" +
			"     │   └─ b.i:2!null\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i,mytable.s]\n" +
			"     │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       ├─ colSet: (1,2)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (3,4)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"     ├─ cmp: (a.i = b.i)\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i,mytable.s]\n" +
			"     │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ cmp: (a.i = b.i)\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i,mytable.s]\n" +
			"     │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a CROSS JOIN mytable b where a.i = b.i OR a.i = b.s`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:0!null, a.s:1!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Or\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ a.i:0!null\n" +
			"     │   │   └─ b.i:2!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ a.i:0!null\n" +
			"     │       └─ b.s:3!null\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ Concat\n" +
			"             ├─ TableAlias(b)\n" +
			"             │   └─ IndexedTableAccess(mytable)\n" +
			"             │       ├─ index: [mytable.s,mytable.i]\n" +
			"             │       ├─ keys: [a.i:0!null]\n" +
			"             │       ├─ colSet: (3,4)\n" +
			"             │       ├─ tableId: 2\n" +
			"             │       └─ Table\n" +
			"             │           ├─ name: mytable\n" +
			"             │           └─ columns: [i s]\n" +
			"             └─ TableAlias(b)\n" +
			"                 └─ IndexedTableAccess(mytable)\n" +
			"                     ├─ index: [mytable.i]\n" +
			"                     ├─ keys: [a.i:0!null]\n" +
			"                     ├─ colSet: (3,4)\n" +
			"                     ├─ tableId: 2\n" +
			"                     └─ Table\n" +
			"                         ├─ name: mytable\n" +
			"                         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ LookupJoin (estimated cost=-2.705 rows=3)\n" +
			"     ├─ ((a.i = b.i) OR (a.i = b.s))\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ Concat\n" +
			"             ├─ TableAlias(b)\n" +
			"             │   └─ IndexedTableAccess(mytable)\n" +
			"             │       ├─ index: [mytable.s,mytable.i]\n" +
			"             │       ├─ columns: [i s]\n" +
			"             │       └─ keys: a.i\n" +
			"             └─ TableAlias(b)\n" +
			"                 └─ IndexedTableAccess(mytable)\n" +
			"                     ├─ index: [mytable.i]\n" +
			"                     ├─ columns: [i s]\n" +
			"                     └─ keys: a.i\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ LookupJoin (estimated cost=-2.705 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ ((a.i = b.i) OR (a.i = b.s))\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ Concat\n" +
			"             ├─ TableAlias(b)\n" +
			"             │   └─ IndexedTableAccess(mytable)\n" +
			"             │       ├─ index: [mytable.s,mytable.i]\n" +
			"             │       ├─ columns: [i s]\n" +
			"             │       └─ keys: a.i\n" +
			"             └─ TableAlias(b)\n" +
			"                 └─ IndexedTableAccess(mytable)\n" +
			"                     ├─ index: [mytable.i]\n" +
			"                     ├─ columns: [i s]\n" +
			"                     └─ keys: a.i\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a CROSS JOIN mytable b where NOT(a.i = b.s OR a.s = b.i)`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:2!null, a.s:3!null]\n" +
			" └─ InnerJoin\n" +
			"     ├─ AND\n" +
			"     │   ├─ NOT\n" +
			"     │   │   └─ Eq\n" +
			"     │   │       ├─ a.i:2!null\n" +
			"     │   │       └─ b.s:1!null\n" +
			"     │   └─ NOT\n" +
			"     │       └─ Eq\n" +
			"     │           ├─ a.s:3!null\n" +
			"     │           └─ b.i:0!null\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             ├─ columns: [i s]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3)\n" +
			"     ├─ ((NOT((a.i = b.s))) AND (NOT((a.s = b.i))))\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3) (actual rows=9 loops=1)\n" +
			"     ├─ ((NOT((a.i = b.s))) AND (NOT((a.s = b.i))))\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a CROSS JOIN mytable b where a.i = b.s OR a.s = b.i IS FALSE`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:2!null, a.s:3!null]\n" +
			" └─ InnerJoin\n" +
			"     ├─ Or\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ a.i:2!null\n" +
			"     │   │   └─ b.s:1!null\n" +
			"     │   └─ (a.s = b.i) IS FALSE\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             ├─ columns: [i s]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3)\n" +
			"     ├─ ((a.i = b.s) OR (a.s = b.i) IS FALSE)\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3) (actual rows=9 loops=1)\n" +
			"     ├─ ((a.i = b.s) OR (a.s = b.i) IS FALSE)\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a CROSS JOIN mytable b where a.i >= b.i`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:1!null, a.s:2!null]\n" +
			" └─ InnerJoin\n" +
			"     ├─ GreaterThanOrEqual\n" +
			"     │   ├─ a.i:1!null\n" +
			"     │   └─ b.i:0!null\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             ├─ columns: [i s]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3)\n" +
			"     ├─ (a.i >= b.i)\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3) (actual rows=6 loops=1)\n" +
			"     ├─ (a.i >= b.i)\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a CROSS JOIN mytable b where a.i = a.i`,
		ExpectedPlan: "CrossJoin\n" +
			" ├─ TableAlias(b)\n" +
			" │   └─ ProcessTable\n" +
			" │       └─ Table\n" +
			" │           ├─ name: mytable\n" +
			" │           └─ columns: []\n" +
			" └─ Filter\n" +
			"     ├─ Eq\n" +
			"     │   ├─ a.i:0!null\n" +
			"     │   └─ a.i:0!null\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             ├─ columns: [i s]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "CrossJoin (estimated cost=7.060 rows=2)\n" +
			" ├─ TableAlias(b)\n" +
			" │   └─ Table\n" +
			" │       ├─ name: mytable\n" +
			" │       └─ columns: []\n" +
			" └─ Filter\n" +
			"     ├─ (a.i = a.i)\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "CrossJoin (estimated cost=7.060 rows=2) (actual rows=9 loops=1)\n" +
			" ├─ TableAlias(b)\n" +
			" │   └─ Table\n" +
			" │       ├─ name: mytable\n" +
			" │       └─ columns: []\n" +
			" └─ Filter\n" +
			"     ├─ (a.i = a.i)\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a CROSS JOIN mytable b CROSS JOIN mytable c CROSS JOIN mytable d where a.i = b.i AND b.i = c.i AND c.i = d.i AND c.i = 2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:0!null, a.s:1!null]\n" +
			" └─ InnerJoin\n" +
			"     ├─ AND\n" +
			"     │   ├─ AND\n" +
			"     │   │   ├─ AND\n" +
			"     │   │   │   ├─ Eq\n" +
			"     │   │   │   │   ├─ a.i:0!null\n" +
			"     │   │   │   │   └─ b.i:3!null\n" +
			"     │   │   │   └─ Eq\n" +
			"     │   │   │       ├─ c.i:4!null\n" +
			"     │   │   │       └─ d.i:2!null\n" +
			"     │   │   └─ Eq\n" +
			"     │   │       ├─ a.i:0!null\n" +
			"     │   │       └─ c.i:4!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ b.i:3!null\n" +
			"     │       └─ d.i:2!null\n" +
			"     ├─ MergeJoin\n" +
			"     │   ├─ cmp: Eq\n" +
			"     │   │   ├─ a.i:0!null\n" +
			"     │   │   └─ d.i:2!null\n" +
			"     │   ├─ TableAlias(a)\n" +
			"     │   │   └─ IndexedTableAccess(mytable)\n" +
			"     │   │       ├─ index: [mytable.i,mytable.s]\n" +
			"     │   │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │       ├─ colSet: (1,2)\n" +
			"     │   │       ├─ tableId: 1\n" +
			"     │   │       └─ Table\n" +
			"     │   │           ├─ name: mytable\n" +
			"     │   │           └─ columns: [i s]\n" +
			"     │   └─ TableAlias(d)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.i]\n" +
			"     │           ├─ static: [{[NULL, ∞)}]\n" +
			"     │           ├─ colSet: (7,8)\n" +
			"     │           ├─ tableId: 4\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: mytable\n" +
			"     │               └─ columns: [i]\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ b.i:3!null\n" +
			"         │   └─ c.i:4!null\n" +
			"         ├─ TableAlias(b)\n" +
			"         │   └─ IndexedTableAccess(mytable)\n" +
			"         │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │       ├─ colSet: (3,4)\n" +
			"         │       ├─ tableId: 2\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: mytable\n" +
			"         │           └─ columns: [i]\n" +
			"         └─ Filter\n" +
			"             ├─ Eq\n" +
			"             │   ├─ c.i:0!null\n" +
			"             │   └─ 2 (bigint)\n" +
			"             └─ TableAlias(c)\n" +
			"                 └─ IndexedTableAccess(mytable)\n" +
			"                     ├─ index: [mytable.i]\n" +
			"                     ├─ static: [{[2, 2]}]\n" +
			"                     ├─ colSet: (5,6)\n" +
			"                     ├─ tableId: 3\n" +
			"                     └─ Table\n" +
			"                         ├─ name: mytable\n" +
			"                         └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3)\n" +
			"     ├─ ((((a.i = b.i) AND (c.i = d.i)) AND (a.i = c.i)) AND (b.i = d.i))\n" +
			"     ├─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"     │   ├─ cmp: (a.i = d.i)\n" +
			"     │   ├─ TableAlias(a)\n" +
			"     │   │   └─ IndexedTableAccess(mytable)\n" +
			"     │   │       ├─ index: [mytable.i,mytable.s]\n" +
			"     │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │       └─ columns: [i s]\n" +
			"     │   └─ TableAlias(d)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.i]\n" +
			"     │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           └─ columns: [i]\n" +
			"     └─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"         ├─ cmp: (b.i = c.i)\n" +
			"         ├─ TableAlias(b)\n" +
			"         │   └─ IndexedTableAccess(mytable)\n" +
			"         │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │       └─ columns: [i]\n" +
			"         └─ Filter\n" +
			"             ├─ (c.i = 2)\n" +
			"             └─ TableAlias(c)\n" +
			"                 └─ IndexedTableAccess(mytable)\n" +
			"                     ├─ index: [mytable.i]\n" +
			"                     ├─ filters: [{[2, 2]}]\n" +
			"                     └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3) (actual rows=1 loops=1)\n" +
			"     ├─ ((((a.i = b.i) AND (c.i = d.i)) AND (a.i = c.i)) AND (b.i = d.i))\n" +
			"     ├─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=1)\n" +
			"     │   ├─ cmp: (a.i = d.i)\n" +
			"     │   ├─ TableAlias(a)\n" +
			"     │   │   └─ IndexedTableAccess(mytable)\n" +
			"     │   │       ├─ index: [mytable.i,mytable.s]\n" +
			"     │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │       └─ columns: [i s]\n" +
			"     │   └─ TableAlias(d)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.i]\n" +
			"     │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           └─ columns: [i]\n" +
			"     └─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=1 loops=3)\n" +
			"         ├─ cmp: (b.i = c.i)\n" +
			"         ├─ TableAlias(b)\n" +
			"         │   └─ IndexedTableAccess(mytable)\n" +
			"         │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │       └─ columns: [i]\n" +
			"         └─ Filter\n" +
			"             ├─ (c.i = 2)\n" +
			"             └─ TableAlias(c)\n" +
			"                 └─ IndexedTableAccess(mytable)\n" +
			"                     ├─ index: [mytable.i]\n" +
			"                     ├─ filters: [{[2, 2]}]\n" +
			"                     └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a CROSS JOIN mytable b CROSS JOIN mytable c CROSS JOIN mytable d where a.i = b.i AND b.i = c.i AND (c.i = d.s OR c.i = 2)`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:2!null, a.s:3!null]\n" +
			" └─ InnerJoin\n" +
			"     ├─ AND\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ b.i:4!null\n" +
			"     │   │   └─ c.i:1!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ a.i:2!null\n" +
			"     │       └─ c.i:1!null\n" +
			"     ├─ LookupJoin\n" +
			"     │   ├─ Or\n" +
			"     │   │   ├─ Eq\n" +
			"     │   │   │   ├─ c.i:1!null\n" +
			"     │   │   │   └─ d.s:0!null\n" +
			"     │   │   └─ Eq\n" +
			"     │   │       ├─ c.i:1!null\n" +
			"     │   │       └─ 2 (bigint)\n" +
			"     │   ├─ TableAlias(d)\n" +
			"     │   │   └─ ProcessTable\n" +
			"     │   │       └─ Table\n" +
			"     │   │           ├─ name: mytable\n" +
			"     │   │           └─ columns: [s]\n" +
			"     │   └─ TableAlias(c)\n" +
			"     │       └─ Concat\n" +
			"     │           ├─ TableAlias(c)\n" +
			"     │           │   └─ IndexedTableAccess(mytable)\n" +
			"     │           │       ├─ index: [mytable.i]\n" +
			"     │           │       ├─ keys: [2 (bigint)]\n" +
			"     │           │       ├─ colSet: (5,6)\n" +
			"     │           │       ├─ tableId: 3\n" +
			"     │           │       └─ Table\n" +
			"     │           │           ├─ name: mytable\n" +
			"     │           │           └─ columns: [i]\n" +
			"     │           └─ TableAlias(c)\n" +
			"     │               └─ IndexedTableAccess(mytable)\n" +
			"     │                   ├─ index: [mytable.i]\n" +
			"     │                   ├─ keys: [d.s:0!null]\n" +
			"     │                   ├─ colSet: (5,6)\n" +
			"     │                   ├─ tableId: 3\n" +
			"     │                   └─ Table\n" +
			"     │                       ├─ name: mytable\n" +
			"     │                       └─ columns: [i]\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ a.i:2!null\n" +
			"         │   └─ b.i:4!null\n" +
			"         ├─ TableAlias(a)\n" +
			"         │   └─ IndexedTableAccess(mytable)\n" +
			"         │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │       ├─ colSet: (1,2)\n" +
			"         │       ├─ tableId: 1\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: mytable\n" +
			"         │           └─ columns: [i s]\n" +
			"         └─ TableAlias(b)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ static: [{[NULL, ∞)}]\n" +
			"                 ├─ colSet: (3,4)\n" +
			"                 ├─ tableId: 2\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3)\n" +
			"     ├─ ((b.i = c.i) AND (a.i = c.i))\n" +
			"     ├─ LookupJoin (estimated cost=-2.705 rows=3)\n" +
			"     │   ├─ ((c.i = d.s) OR (c.i = 2))\n" +
			"     │   ├─ TableAlias(d)\n" +
			"     │   │   └─ Table\n" +
			"     │   │       ├─ name: mytable\n" +
			"     │   │       └─ columns: [s]\n" +
			"     │   └─ TableAlias(c)\n" +
			"     │       └─ Concat\n" +
			"     │           ├─ TableAlias(c)\n" +
			"     │           │   └─ IndexedTableAccess(mytable)\n" +
			"     │           │       ├─ index: [mytable.i]\n" +
			"     │           │       ├─ columns: [i]\n" +
			"     │           │       └─ keys: 2\n" +
			"     │           └─ TableAlias(c)\n" +
			"     │               └─ IndexedTableAccess(mytable)\n" +
			"     │                   ├─ index: [mytable.i]\n" +
			"     │                   ├─ columns: [i]\n" +
			"     │                   └─ keys: d.s\n" +
			"     └─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"         ├─ cmp: (a.i = b.i)\n" +
			"         ├─ TableAlias(a)\n" +
			"         │   └─ IndexedTableAccess(mytable)\n" +
			"         │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │       └─ columns: [i s]\n" +
			"         └─ TableAlias(b)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ ((b.i = c.i) AND (a.i = c.i))\n" +
			"     ├─ LookupJoin (estimated cost=-2.705 rows=3) (actual rows=3 loops=1)\n" +
			"     │   ├─ ((c.i = d.s) OR (c.i = 2))\n" +
			"     │   ├─ TableAlias(d)\n" +
			"     │   │   └─ Table\n" +
			"     │   │       ├─ name: mytable\n" +
			"     │   │       └─ columns: [s]\n" +
			"     │   └─ TableAlias(c)\n" +
			"     │       └─ Concat\n" +
			"     │           ├─ TableAlias(c)\n" +
			"     │           │   └─ IndexedTableAccess(mytable)\n" +
			"     │           │       ├─ index: [mytable.i]\n" +
			"     │           │       ├─ columns: [i]\n" +
			"     │           │       └─ keys: 2\n" +
			"     │           └─ TableAlias(c)\n" +
			"     │               └─ IndexedTableAccess(mytable)\n" +
			"     │                   ├─ index: [mytable.i]\n" +
			"     │                   ├─ columns: [i]\n" +
			"     │                   └─ keys: d.s\n" +
			"     └─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=3)\n" +
			"         ├─ cmp: (a.i = b.i)\n" +
			"         ├─ TableAlias(a)\n" +
			"         │   └─ IndexedTableAccess(mytable)\n" +
			"         │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │       └─ columns: [i s]\n" +
			"         └─ TableAlias(b)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a CROSS JOIN mytable b CROSS JOIN mytable c CROSS JOIN mytable d where a.i = b.i AND b.s = c.s`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:0!null, a.s:1!null]\n" +
			" └─ CrossJoin\n" +
			"     ├─ TableAlias(d)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: []\n" +
			"     └─ LookupJoin\n" +
			"         ├─ MergeJoin\n" +
			"         │   ├─ cmp: Eq\n" +
			"         │   │   ├─ a.i:0!null\n" +
			"         │   │   └─ b.i:2!null\n" +
			"         │   ├─ TableAlias(a)\n" +
			"         │   │   └─ IndexedTableAccess(mytable)\n" +
			"         │   │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │   │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │   │       ├─ colSet: (1,2)\n" +
			"         │   │       ├─ tableId: 1\n" +
			"         │   │       └─ Table\n" +
			"         │   │           ├─ name: mytable\n" +
			"         │   │           └─ columns: [i s]\n" +
			"         │   └─ TableAlias(b)\n" +
			"         │       └─ IndexedTableAccess(mytable)\n" +
			"         │           ├─ index: [mytable.i]\n" +
			"         │           ├─ static: [{[NULL, ∞)}]\n" +
			"         │           ├─ colSet: (3,4)\n" +
			"         │           ├─ tableId: 2\n" +
			"         │           └─ Table\n" +
			"         │               ├─ name: mytable\n" +
			"         │               └─ columns: [i s]\n" +
			"         └─ TableAlias(c)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.s]\n" +
			"                 ├─ keys: [b.s:3!null]\n" +
			"                 ├─ colSet: (5,6)\n" +
			"                 ├─ tableId: 3\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     └─ columns: [s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ CrossJoin (estimated cost=10.090 rows=3)\n" +
			"     ├─ TableAlias(d)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: []\n" +
			"     └─ LookupJoin (estimated cost=9.900 rows=3)\n" +
			"         ├─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"         │   ├─ cmp: (a.i = b.i)\n" +
			"         │   ├─ TableAlias(a)\n" +
			"         │   │   └─ IndexedTableAccess(mytable)\n" +
			"         │   │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │   │       └─ columns: [i s]\n" +
			"         │   └─ TableAlias(b)\n" +
			"         │       └─ IndexedTableAccess(mytable)\n" +
			"         │           ├─ index: [mytable.i]\n" +
			"         │           ├─ filters: [{[NULL, ∞)}]\n" +
			"         │           └─ columns: [i s]\n" +
			"         └─ TableAlias(c)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.s]\n" +
			"                 ├─ columns: [s]\n" +
			"                 └─ keys: b.s\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ CrossJoin (estimated cost=10.090 rows=3) (actual rows=9 loops=1)\n" +
			"     ├─ TableAlias(d)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: []\n" +
			"     └─ LookupJoin (estimated cost=9.900 rows=3) (actual rows=3 loops=3)\n" +
			"         ├─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=3)\n" +
			"         │   ├─ cmp: (a.i = b.i)\n" +
			"         │   ├─ TableAlias(a)\n" +
			"         │   │   └─ IndexedTableAccess(mytable)\n" +
			"         │   │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │   │       └─ columns: [i s]\n" +
			"         │   └─ TableAlias(b)\n" +
			"         │       └─ IndexedTableAccess(mytable)\n" +
			"         │           ├─ index: [mytable.i]\n" +
			"         │           ├─ filters: [{[NULL, ∞)}]\n" +
			"         │           └─ columns: [i s]\n" +
			"         └─ TableAlias(c)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.s]\n" +
			"                 ├─ columns: [s]\n" +
			"                 └─ keys: b.s\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM mytable a inner join mytable b on (a.i = b.s) WHERE a.i BETWEEN 10 AND 20`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:0!null, a.s:1!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ static: [{[10, 20]}]\n" +
			"     │       ├─ colSet: (1,2)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.s]\n" +
			"             ├─ keys: [a.i:0!null]\n" +
			"             ├─ colSet: (3,4)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ LookupJoin (estimated cost=3.300 rows=1)\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ filters: [{[10, 20]}]\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.s]\n" +
			"             ├─ columns: [s]\n" +
			"             └─ keys: a.i\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ LookupJoin (estimated cost=3.300 rows=1) (actual rows=0 loops=1)\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ filters: [{[10, 20]}]\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.s]\n" +
			"             ├─ columns: [s]\n" +
			"             └─ keys: a.i\n" +
			"",
	},
	{
		Query: `SELECT lefttable.i, righttable.s
			FROM (SELECT * FROM mytable) lefttable
			JOIN (SELECT * FROM mytable) righttable
			ON lefttable.i = righttable.i AND righttable.s = lefttable.s
			ORDER BY lefttable.i ASC`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [lefttable.i:0!null, righttable.s:3!null]\n" +
			" └─ Sort(lefttable.i:0!null ASC nullsFirst)\n" +
			"     └─ HashJoin\n" +
			"         ├─ AND\n" +
			"         │   ├─ Eq\n" +
			"         │   │   ├─ lefttable.i:0!null\n" +
			"         │   │   └─ righttable.i:2!null\n" +
			"         │   └─ Eq\n" +
			"         │       ├─ righttable.s:3!null\n" +
			"         │       └─ lefttable.s:1!null\n" +
			"         ├─ SubqueryAlias\n" +
			"         │   ├─ name: lefttable\n" +
			"         │   ├─ outerVisibility: false\n" +
			"         │   ├─ isLateral: false\n" +
			"         │   ├─ cacheable: true\n" +
			"         │   ├─ colSet: (3,4)\n" +
			"         │   ├─ tableId: 2\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: mytable\n" +
			"         │       ├─ columns: [i s]\n" +
			"         │       ├─ colSet: (1,2)\n" +
			"         │       └─ tableId: 1\n" +
			"         └─ HashLookup\n" +
			"             ├─ left-key: TUPLE(lefttable.i:0!null, lefttable.s:1!null)\n" +
			"             ├─ right-key: TUPLE(righttable.i:0!null, righttable.s:1!null)\n" +
			"             └─ SubqueryAlias\n" +
			"                 ├─ name: righttable\n" +
			"                 ├─ outerVisibility: false\n" +
			"                 ├─ isLateral: false\n" +
			"                 ├─ cacheable: true\n" +
			"                 ├─ colSet: (7,8)\n" +
			"                 ├─ tableId: 4\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     ├─ columns: [i s]\n" +
			"                     ├─ colSet: (5,6)\n" +
			"                     └─ tableId: 3\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [lefttable.i, righttable.s]\n" +
			" └─ Sort(lefttable.i ASC)\n" +
			"     └─ HashJoin\n" +
			"         ├─ ((lefttable.i = righttable.i) AND (righttable.s = lefttable.s))\n" +
			"         ├─ SubqueryAlias\n" +
			"         │   ├─ name: lefttable\n" +
			"         │   ├─ outerVisibility: false\n" +
			"         │   ├─ isLateral: false\n" +
			"         │   ├─ cacheable: true\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: mytable\n" +
			"         │       └─ columns: [i s]\n" +
			"         └─ HashLookup\n" +
			"             ├─ left-key: (lefttable.i, lefttable.s)\n" +
			"             ├─ right-key: (righttable.i, righttable.s)\n" +
			"             └─ SubqueryAlias\n" +
			"                 ├─ name: righttable\n" +
			"                 ├─ outerVisibility: false\n" +
			"                 ├─ isLateral: false\n" +
			"                 ├─ cacheable: true\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [lefttable.i, righttable.s]\n" +
			" └─ Sort(lefttable.i ASC)\n" +
			"     └─ HashJoin\n" +
			"         ├─ ((lefttable.i = righttable.i) AND (righttable.s = lefttable.s))\n" +
			"         ├─ SubqueryAlias\n" +
			"         │   ├─ name: lefttable\n" +
			"         │   ├─ outerVisibility: false\n" +
			"         │   ├─ isLateral: false\n" +
			"         │   ├─ cacheable: true\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: mytable\n" +
			"         │       └─ columns: [i s]\n" +
			"         └─ HashLookup\n" +
			"             ├─ left-key: (lefttable.i, lefttable.s)\n" +
			"             ├─ right-key: (righttable.i, righttable.s)\n" +
			"             └─ SubqueryAlias\n" +
			"                 ├─ name: righttable\n" +
			"                 ├─ outerVisibility: false\n" +
			"                 ├─ isLateral: false\n" +
			"                 ├─ cacheable: true\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT s2, i2, i FROM mytable RIGHT JOIN (SELECT * FROM othertable) othertable ON i2 = i`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [othertable.s2:0!null, othertable.i2:1!null, mytable.i:2!null]\n" +
			" └─ LeftOuterHashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ othertable.i2:1!null\n" +
			"     │   └─ mytable.i:2!null\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: othertable\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   ├─ colSet: (5,6)\n" +
			"     │   ├─ tableId: 3\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: othertable\n" +
			"     │       ├─ columns: [s2 i2]\n" +
			"     │       ├─ colSet: (3,4)\n" +
			"     │       └─ tableId: 2\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(othertable.i2:1!null)\n" +
			"         ├─ right-key: TUPLE(mytable.i:0!null)\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [othertable.s2, othertable.i2, mytable.i]\n" +
			" └─ LeftOuterHashJoin (estimated cost=110.030 rows=3)\n" +
			"     ├─ (othertable.i2 = mytable.i)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: othertable\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: othertable\n" +
			"     │       └─ columns: [s2 i2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (othertable.i2)\n" +
			"         ├─ right-key: (mytable.i)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [othertable.s2, othertable.i2, mytable.i]\n" +
			" └─ LeftOuterHashJoin (estimated cost=110.030 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ (othertable.i2 = mytable.i)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: othertable\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: othertable\n" +
			"     │       └─ columns: [s2 i2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (othertable.i2)\n" +
			"         ├─ right-key: (mytable.i)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT s2, i2, i FROM mytable INNER JOIN (SELECT * FROM othertable) othertable ON i2 = i`,
		ExpectedPlan: "HashJoin\n" +
			" ├─ Eq\n" +
			" │   ├─ othertable.i2:1!null\n" +
			" │   └─ mytable.i:2!null\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: othertable\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   ├─ colSet: (5,6)\n" +
			" │   ├─ tableId: 3\n" +
			" │   └─ Table\n" +
			" │       ├─ name: othertable\n" +
			" │       ├─ columns: [s2 i2]\n" +
			" │       ├─ colSet: (3,4)\n" +
			" │       └─ tableId: 2\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: TUPLE(othertable.i2:1!null)\n" +
			"     ├─ right-key: TUPLE(mytable.i:0!null)\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "HashJoin (estimated cost=111.000 rows=100)\n" +
			" ├─ (othertable.i2 = mytable.i)\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: othertable\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Table\n" +
			" │       ├─ name: othertable\n" +
			" │       └─ columns: [s2 i2]\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: (othertable.i2)\n" +
			"     ├─ right-key: (mytable.i)\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "HashJoin (estimated cost=111.000 rows=100) (actual rows=3 loops=1)\n" +
			" ├─ (othertable.i2 = mytable.i)\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: othertable\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Table\n" +
			" │       ├─ name: othertable\n" +
			" │       └─ columns: [s2 i2]\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: (othertable.i2)\n" +
			"     ├─ right-key: (mytable.i)\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT * FROM (SELECT * FROM othertable) othertable_alias WHERE s2 = 'a'`,
		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: othertable_alias\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (3,4)\n" +
			" ├─ tableId: 2\n" +
			" └─ Filter\n" +
			"     ├─ Eq\n" +
			"     │   ├─ othertable.s2:0!null\n" +
			"     │   └─ a (longtext)\n" +
			"     └─ IndexedTableAccess(othertable)\n" +
			"         ├─ index: [othertable.s2]\n" +
			"         ├─ static: [{[a, a]}]\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: othertable\n" +
			"             └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: othertable_alias\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Filter\n" +
			"     ├─ (othertable.s2 = 'a')\n" +
			"     └─ IndexedTableAccess(othertable)\n" +
			"         ├─ index: [othertable.s2]\n" +
			"         ├─ filters: [{[a, a]}]\n" +
			"         └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: othertable_alias\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Filter\n" +
			"     ├─ (othertable.s2 = 'a')\n" +
			"     └─ IndexedTableAccess(othertable)\n" +
			"         ├─ index: [othertable.s2]\n" +
			"         ├─ filters: [{[a, a]}]\n" +
			"         └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT * FROM (SELECT * FROM (SELECT * FROM (SELECT * FROM othertable) othertable_one) othertable_two) othertable_three WHERE s2 = 'a'`,
		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: othertable_three\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (7,8)\n" +
			" ├─ tableId: 4\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: othertable_two\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (5,6)\n" +
			"     ├─ tableId: 3\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: othertable_one\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (3,4)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Filter\n" +
			"             ├─ Eq\n" +
			"             │   ├─ othertable.s2:0!null\n" +
			"             │   └─ a (longtext)\n" +
			"             └─ IndexedTableAccess(othertable)\n" +
			"                 ├─ index: [othertable.s2]\n" +
			"                 ├─ static: [{[a, a]}]\n" +
			"                 ├─ colSet: (1,2)\n" +
			"                 ├─ tableId: 1\n" +
			"                 └─ Table\n" +
			"                     ├─ name: othertable\n" +
			"                     └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: othertable_three\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: othertable_two\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: othertable_one\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Filter\n" +
			"             ├─ (othertable.s2 = 'a')\n" +
			"             └─ IndexedTableAccess(othertable)\n" +
			"                 ├─ index: [othertable.s2]\n" +
			"                 ├─ filters: [{[a, a]}]\n" +
			"                 └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: othertable_three\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: othertable_two\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: othertable_one\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Filter\n" +
			"             ├─ (othertable.s2 = 'a')\n" +
			"             └─ IndexedTableAccess(othertable)\n" +
			"                 ├─ index: [othertable.s2]\n" +
			"                 ├─ filters: [{[a, a]}]\n" +
			"                 └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT othertable.s2, othertable.i2, mytable.i FROM mytable INNER JOIN (SELECT * FROM othertable) othertable ON othertable.i2 = mytable.i WHERE othertable.s2 > 'a'`,
		ExpectedPlan: "HashJoin\n" +
			" ├─ Eq\n" +
			" │   ├─ othertable.i2:1!null\n" +
			" │   └─ mytable.i:2!null\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: othertable\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   ├─ colSet: (5,6)\n" +
			" │   ├─ tableId: 3\n" +
			" │   └─ Filter\n" +
			" │       ├─ GreaterThan\n" +
			" │       │   ├─ othertable.s2:0!null\n" +
			" │       │   └─ a (longtext)\n" +
			" │       └─ IndexedTableAccess(othertable)\n" +
			" │           ├─ index: [othertable.s2]\n" +
			" │           ├─ static: [{(a, ∞)}]\n" +
			" │           ├─ colSet: (3,4)\n" +
			" │           ├─ tableId: 2\n" +
			" │           └─ Table\n" +
			" │               ├─ name: othertable\n" +
			" │               └─ columns: [s2 i2]\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: TUPLE(othertable.i2:1!null)\n" +
			"     ├─ right-key: TUPLE(mytable.i:0!null)\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "HashJoin (estimated cost=111.000 rows=100)\n" +
			" ├─ (othertable.i2 = mytable.i)\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: othertable\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Filter\n" +
			" │       ├─ (othertable.s2 > 'a')\n" +
			" │       └─ IndexedTableAccess(othertable)\n" +
			" │           ├─ index: [othertable.s2]\n" +
			" │           ├─ filters: [{(a, ∞)}]\n" +
			" │           └─ columns: [s2 i2]\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: (othertable.i2)\n" +
			"     ├─ right-key: (mytable.i)\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "HashJoin (estimated cost=111.000 rows=100) (actual rows=3 loops=1)\n" +
			" ├─ (othertable.i2 = mytable.i)\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: othertable\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Filter\n" +
			" │       ├─ (othertable.s2 > 'a')\n" +
			" │       └─ IndexedTableAccess(othertable)\n" +
			" │           ├─ index: [othertable.s2]\n" +
			" │           ├─ filters: [{(a, ∞)}]\n" +
			" │           └─ columns: [s2 i2]\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: (othertable.i2)\n" +
			"     ├─ right-key: (mytable.i)\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT mytable.i, mytable.s FROM mytable WHERE mytable.i = (SELECT i2 FROM othertable LIMIT 1)`,
		ExpectedPlan: "SemiJoin\n" +
			" ├─ Eq\n" +
			" │   ├─ mytable.i:0!null\n" +
			" │   └─ othertable.i2:2!null\n" +
			" ├─ ProcessTable\n" +
			" │   └─ Table\n" +
			" │       ├─ name: mytable\n" +
			" │       └─ columns: [i s]\n" +
			" └─ Limit(1)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [othertable.i2:1!null]\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: othertable\n" +
			"                 └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "SemiJoin (estimated cost=7.545 rows=3)\n" +
			" ├─ (mytable.i = othertable.i2)\n" +
			" ├─ Table\n" +
			" │   └─ name: mytable\n" +
			" └─ Limit(1)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [othertable.i2]\n" +
			"         └─ Table\n" +
			"             └─ name: othertable\n" +
			"",
		ExpectedAnalysis: "SemiJoin (estimated cost=7.545 rows=3) (actual rows=1 loops=1)\n" +
			" ├─ (mytable.i = othertable.i2)\n" +
			" ├─ Table\n" +
			" │   └─ name: mytable\n" +
			" └─ Limit(1)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [othertable.i2]\n" +
			"         └─ Table\n" +
			"             └─ name: othertable\n" +
			"",
	},
	{
		Query: `SELECT mytable.i, mytable.s FROM mytable WHERE mytable.i IN (SELECT i2 FROM othertable)`,
		ExpectedPlan: "SemiJoin\n" +
			" ├─ Eq\n" +
			" │   ├─ mytable.i:0!null\n" +
			" │   └─ othertable.i2:2!null\n" +
			" ├─ ProcessTable\n" +
			" │   └─ Table\n" +
			" │       ├─ name: mytable\n" +
			" │       └─ columns: [i s]\n" +
			" └─ Project\n" +
			"     ├─ columns: [othertable.i2:1!null]\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: othertable\n" +
			"             └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "SemiJoin (estimated cost=7.545 rows=3)\n" +
			" ├─ (mytable.i = othertable.i2)\n" +
			" ├─ Table\n" +
			" │   └─ name: mytable\n" +
			" └─ Project\n" +
			"     ├─ columns: [othertable.i2]\n" +
			"     └─ Table\n" +
			"         └─ name: othertable\n" +
			"",
		ExpectedAnalysis: "SemiJoin (estimated cost=7.545 rows=3) (actual rows=3 loops=1)\n" +
			" ├─ (mytable.i = othertable.i2)\n" +
			" ├─ Table\n" +
			" │   └─ name: mytable\n" +
			" └─ Project\n" +
			"     ├─ columns: [othertable.i2]\n" +
			"     └─ Table\n" +
			"         └─ name: othertable\n" +
			"",
	},
	{
		Query: `SELECT mytable.i, mytable.s FROM mytable WHERE mytable.i IN (SELECT i2 FROM othertable WHERE mytable.i = othertable.i2)`,
		ExpectedPlan: "Filter\n" +
			" ├─ InSubquery\n" +
			" │   ├─ left: mytable.i:0!null\n" +
			" │   └─ right: Subquery\n" +
			" │       ├─ cacheable: false\n" +
			" │       ├─ alias-string: select i2 from othertable where mytable.i = othertable.i2\n" +
			" │       └─ Filter\n" +
			" │           ├─ Eq\n" +
			" │           │   ├─ mytable.i:0!null\n" +
			" │           │   └─ othertable.i2:2!null\n" +
			" │           └─ IndexedTableAccess(othertable)\n" +
			" │               ├─ index: [othertable.i2]\n" +
			" │               ├─ keys: [mytable.i:0!null]\n" +
			" │               ├─ colSet: (3,4)\n" +
			" │               ├─ tableId: 2\n" +
			" │               └─ Table\n" +
			" │                   ├─ name: othertable\n" +
			" │                   └─ columns: [i2]\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ InSubquery\n" +
			" │   ├─ left: mytable.i\n" +
			" │   └─ right: Subquery\n" +
			" │       ├─ cacheable: false\n" +
			" │       └─ Filter\n" +
			" │           ├─ (mytable.i = othertable.i2)\n" +
			" │           └─ IndexedTableAccess(othertable)\n" +
			" │               ├─ index: [othertable.i2]\n" +
			" │               ├─ columns: [i2]\n" +
			" │               └─ keys: mytable.i\n" +
			" └─ Table\n" +
			"     └─ name: mytable\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ InSubquery\n" +
			" │   ├─ left: mytable.i\n" +
			" │   └─ right: Subquery\n" +
			" │       ├─ cacheable: false\n" +
			" │       └─ Filter\n" +
			" │           ├─ (mytable.i = othertable.i2)\n" +
			" │           └─ IndexedTableAccess(othertable)\n" +
			" │               ├─ index: [othertable.i2]\n" +
			" │               ├─ columns: [i2]\n" +
			" │               └─ keys: mytable.i\n" +
			" └─ Table\n" +
			"     └─ name: mytable\n" +
			"",
	},
	{
		Query: `SELECT * FROM mytable mt INNER JOIN othertable ot ON mt.i = ot.i2 AND mt.i > 2`,
		ExpectedPlan: "LookupJoin\n" +
			" ├─ TableAlias(mt)\n" +
			" │   └─ IndexedTableAccess(mytable)\n" +
			" │       ├─ index: [mytable.i]\n" +
			" │       ├─ static: [{(2, ∞)}]\n" +
			" │       ├─ colSet: (1,2)\n" +
			" │       ├─ tableId: 1\n" +
			" │       └─ Table\n" +
			" │           ├─ name: mytable\n" +
			" │           └─ columns: [i s]\n" +
			" └─ TableAlias(ot)\n" +
			"     └─ IndexedTableAccess(othertable)\n" +
			"         ├─ index: [othertable.i2]\n" +
			"         ├─ keys: [mt.i:0!null]\n" +
			"         ├─ colSet: (3,4)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: othertable\n" +
			"             └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "LookupJoin (estimated cost=3.300 rows=1)\n" +
			" ├─ TableAlias(mt)\n" +
			" │   └─ IndexedTableAccess(mytable)\n" +
			" │       ├─ index: [mytable.i]\n" +
			" │       ├─ filters: [{(2, ∞)}]\n" +
			" │       └─ columns: [i s]\n" +
			" └─ TableAlias(ot)\n" +
			"     └─ IndexedTableAccess(othertable)\n" +
			"         ├─ index: [othertable.i2]\n" +
			"         ├─ columns: [s2 i2]\n" +
			"         └─ keys: mt.i\n" +
			"",
		ExpectedAnalysis: "LookupJoin (estimated cost=3.300 rows=1) (actual rows=1 loops=1)\n" +
			" ├─ TableAlias(mt)\n" +
			" │   └─ IndexedTableAccess(mytable)\n" +
			" │       ├─ index: [mytable.i]\n" +
			" │       ├─ filters: [{(2, ∞)}]\n" +
			" │       └─ columns: [i s]\n" +
			" └─ TableAlias(ot)\n" +
			"     └─ IndexedTableAccess(othertable)\n" +
			"         ├─ index: [othertable.i2]\n" +
			"         ├─ columns: [s2 i2]\n" +
			"         └─ keys: mt.i\n" +
			"",
	},
	{
		Query: `SELECT /*+ JOIN_ORDER(mt, o) */ * FROM mytable mt INNER JOIN one_pk o ON mt.i = o.pk AND mt.s = o.c2`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ mt.i:0!null\n" +
			" │   └─ o.pk:2!null\n" +
			" ├─ sel: Eq\n" +
			" │   ├─ mt.s:1!null\n" +
			" │   └─ o.c2:4\n" +
			" ├─ TableAlias(mt)\n" +
			" │   └─ IndexedTableAccess(mytable)\n" +
			" │       ├─ index: [mytable.i,mytable.s]\n" +
			" │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │       ├─ colSet: (1,2)\n" +
			" │       ├─ tableId: 1\n" +
			" │       └─ Table\n" +
			" │           ├─ name: mytable\n" +
			" │           └─ columns: [i s]\n" +
			" └─ TableAlias(o)\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (3-8)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: one_pk\n" +
			"             └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=7.100 rows=3)\n" +
			" ├─ cmp: (mt.i = o.pk)\n" +
			" ├─ sel: (mt.s = o.c2)\n" +
			" ├─ TableAlias(mt)\n" +
			" │   └─ IndexedTableAccess(mytable)\n" +
			" │       ├─ index: [mytable.i,mytable.s]\n" +
			" │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │       └─ columns: [i s]\n" +
			" └─ TableAlias(o)\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=7.100 rows=3) (actual rows=0 loops=1)\n" +
			" ├─ cmp: (mt.i = o.pk)\n" +
			" ├─ sel: (mt.s = o.c2)\n" +
			" ├─ TableAlias(mt)\n" +
			" │   └─ IndexedTableAccess(mytable)\n" +
			" │       ├─ index: [mytable.i,mytable.s]\n" +
			" │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │       └─ columns: [i s]\n" +
			" └─ TableAlias(o)\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
	},
	{
		Query: `SELECT i, i2, s2 FROM mytable RIGHT JOIN othertable ON i = i2 - 1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mytable.i:2!null, othertable.i2:1!null, othertable.s2:0!null]\n" +
			" └─ LeftOuterJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ mytable.i:2!null\n" +
			"     │   └─ (othertable.i2:1!null - 1 (tinyint))\n" +
			"     ├─ ProcessTable\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: othertable\n" +
			"     │       └─ columns: [s2 i2]\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			" └─ LeftOuterJoin (estimated cost=8.090 rows=3)\n" +
			"     ├─ (mytable.i = (othertable.i2 - 1))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: othertable\n" +
			"     │   └─ columns: [s2 i2]\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mytable.i, othertable.i2, othertable.s2]\n" +
			" └─ LeftOuterJoin (estimated cost=8.090 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ (mytable.i = (othertable.i2 - 1))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: othertable\n" +
			"     │   └─ columns: [s2 i2]\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT * FROM tabletest, mytable mt INNER JOIN othertable ot ON mt.i = ot.i2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [tabletest.i:4!null, tabletest.s:5!null, mt.i:0!null, mt.s:1!null, ot.s2:2!null, ot.i2:3!null]\n" +
			" └─ CrossJoin\n" +
			"     ├─ MergeJoin\n" +
			"     │   ├─ cmp: Eq\n" +
			"     │   │   ├─ mt.i:0!null\n" +
			"     │   │   └─ ot.i2:3!null\n" +
			"     │   ├─ TableAlias(mt)\n" +
			"     │   │   └─ IndexedTableAccess(mytable)\n" +
			"     │   │       ├─ index: [mytable.i,mytable.s]\n" +
			"     │   │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │       ├─ colSet: (3,4)\n" +
			"     │   │       ├─ tableId: 2\n" +
			"     │   │       └─ Table\n" +
			"     │   │           ├─ name: mytable\n" +
			"     │   │           └─ columns: [i s]\n" +
			"     │   └─ TableAlias(ot)\n" +
			"     │       └─ IndexedTableAccess(othertable)\n" +
			"     │           ├─ index: [othertable.i2]\n" +
			"     │           ├─ static: [{[NULL, ∞)}]\n" +
			"     │           ├─ colSet: (5,6)\n" +
			"     │           ├─ tableId: 3\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: othertable\n" +
			"     │               └─ columns: [s2 i2]\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: tabletest\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [tabletest.i, tabletest.s, mt.i, mt.s, ot.s2, ot.i2]\n" +
			" └─ CrossJoin (estimated cost=10.090 rows=3)\n" +
			"     ├─ MergeJoin (estimated cost=6.090 rows=3)\n" +
			"     │   ├─ cmp: (mt.i = ot.i2)\n" +
			"     │   ├─ TableAlias(mt)\n" +
			"     │   │   └─ IndexedTableAccess(mytable)\n" +
			"     │   │       ├─ index: [mytable.i,mytable.s]\n" +
			"     │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │       └─ columns: [i s]\n" +
			"     │   └─ TableAlias(ot)\n" +
			"     │       └─ IndexedTableAccess(othertable)\n" +
			"     │           ├─ index: [othertable.i2]\n" +
			"     │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           └─ columns: [s2 i2]\n" +
			"     └─ Table\n" +
			"         ├─ name: tabletest\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [tabletest.i, tabletest.s, mt.i, mt.s, ot.s2, ot.i2]\n" +
			" └─ CrossJoin (estimated cost=10.090 rows=3) (actual rows=9 loops=1)\n" +
			"     ├─ MergeJoin (estimated cost=6.090 rows=3) (actual rows=3 loops=1)\n" +
			"     │   ├─ cmp: (mt.i = ot.i2)\n" +
			"     │   ├─ TableAlias(mt)\n" +
			"     │   │   └─ IndexedTableAccess(mytable)\n" +
			"     │   │       ├─ index: [mytable.i,mytable.s]\n" +
			"     │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │       └─ columns: [i s]\n" +
			"     │   └─ TableAlias(ot)\n" +
			"     │       └─ IndexedTableAccess(othertable)\n" +
			"     │           ├─ index: [othertable.i2]\n" +
			"     │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           └─ columns: [s2 i2]\n" +
			"     └─ Table\n" +
			"         ├─ name: tabletest\n" +
			"         └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT t1.timestamp FROM reservedWordsTable t1 JOIN reservedWordsTable t2 ON t1.TIMESTAMP = t2.tImEstamp`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [t1.timestamp:1!null]\n" +
			" └─ InnerJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ t1.TIMESTAMP:1!null\n" +
			"     │   └─ t2.tImEstamp:0!null\n" +
			"     ├─ TableAlias(t2)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: reservedWordsTable\n" +
			"     │           └─ columns: [timestamp]\n" +
			"     └─ TableAlias(t1)\n" +
			"         └─ Table\n" +
			"             ├─ name: reservedWordsTable\n" +
			"             ├─ columns: [timestamp]\n" +
			"             ├─ colSet: (1-4)\n" +
			"             └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [t1.timestamp]\n" +
			" └─ InnerJoin (estimated cost=2.010 rows=1)\n" +
			"     ├─ (t1.TIMESTAMP = t2.tImEstamp)\n" +
			"     ├─ TableAlias(t2)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: reservedWordsTable\n" +
			"     │       └─ columns: [timestamp]\n" +
			"     └─ TableAlias(t1)\n" +
			"         └─ Table\n" +
			"             ├─ name: reservedWordsTable\n" +
			"             └─ columns: [timestamp]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [t1.timestamp]\n" +
			" └─ InnerJoin (estimated cost=2.010 rows=1) (actual rows=1 loops=1)\n" +
			"     ├─ (t1.TIMESTAMP = t2.tImEstamp)\n" +
			"     ├─ TableAlias(t2)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: reservedWordsTable\n" +
			"     │       └─ columns: [timestamp]\n" +
			"     └─ TableAlias(t1)\n" +
			"         └─ Table\n" +
			"             ├─ name: reservedWordsTable\n" +
			"             └─ columns: [timestamp]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk JOIN two_pk ON one_pk.pk=two_pk.pk1 AND one_pk.pk=two_pk.pk2`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ one_pk.pk:0!null\n" +
			" │   └─ two_pk.pk1:1!null\n" +
			" ├─ sel: Eq\n" +
			" │   ├─ one_pk.pk:0!null\n" +
			" │   └─ two_pk.pk2:2!null\n" +
			" ├─ IndexedTableAccess(one_pk)\n" +
			" │   ├─ index: [one_pk.pk]\n" +
			" │   ├─ static: [{[NULL, ∞)}]\n" +
			" │   ├─ colSet: (1-6)\n" +
			" │   ├─ tableId: 1\n" +
			" │   └─ Table\n" +
			" │       ├─ name: one_pk\n" +
			" │       └─ columns: [pk]\n" +
			" └─ IndexedTableAccess(two_pk)\n" +
			"     ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     ├─ colSet: (7-13)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Table\n" +
			"         ├─ name: two_pk\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=8.120 rows=4)\n" +
			" ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			" ├─ sel: (one_pk.pk = two_pk.pk2)\n" +
			" ├─ IndexedTableAccess(one_pk)\n" +
			" │   ├─ index: [one_pk.pk]\n" +
			" │   ├─ filters: [{[NULL, ∞)}]\n" +
			" │   └─ columns: [pk]\n" +
			" └─ IndexedTableAccess(two_pk)\n" +
			"     ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=8.120 rows=4) (actual rows=2 loops=1)\n" +
			" ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			" ├─ sel: (one_pk.pk = two_pk.pk2)\n" +
			" ├─ IndexedTableAccess(one_pk)\n" +
			" │   ├─ index: [one_pk.pk]\n" +
			" │   ├─ filters: [{[NULL, ∞)}]\n" +
			" │   └─ columns: [pk]\n" +
			" └─ IndexedTableAccess(two_pk)\n" +
			"     ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk JOIN two_pk ON one_pk.pk=two_pk.pk1 AND one_pk.pk=two_pk.pk2 OR one_pk.c2 = two_pk.c3`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:3!null, two_pk.pk1:0!null, two_pk.pk2:1!null]\n" +
			" └─ InnerJoin\n" +
			"     ├─ Or\n" +
			"     │   ├─ AND\n" +
			"     │   │   ├─ Eq\n" +
			"     │   │   │   ├─ one_pk.pk:3!null\n" +
			"     │   │   │   └─ two_pk.pk1:0!null\n" +
			"     │   │   └─ Eq\n" +
			"     │   │       ├─ one_pk.pk:3!null\n" +
			"     │   │       └─ two_pk.pk2:1!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ one_pk.c2:4\n" +
			"     │       └─ two_pk.c3:2!null\n" +
			"     ├─ ProcessTable\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: two_pk\n" +
			"     │       └─ columns: [pk1 pk2 c3]\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: one_pk\n" +
			"             └─ columns: [pk c2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ InnerJoin (estimated cost=17.160 rows=5)\n" +
			"     ├─ (((one_pk.pk = two_pk.pk1) AND (one_pk.pk = two_pk.pk2)) OR (one_pk.c2 = two_pk.c3))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: two_pk\n" +
			"     │   └─ columns: [pk1 pk2 c3]\n" +
			"     └─ Table\n" +
			"         ├─ name: one_pk\n" +
			"         └─ columns: [pk c2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ InnerJoin (estimated cost=17.160 rows=5) (actual rows=2 loops=1)\n" +
			"     ├─ (((one_pk.pk = two_pk.pk1) AND (one_pk.pk = two_pk.pk2)) OR (one_pk.c2 = two_pk.c3))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: two_pk\n" +
			"     │   └─ columns: [pk1 pk2 c3]\n" +
			"     └─ Table\n" +
			"         ├─ name: one_pk\n" +
			"         └─ columns: [pk c2]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk opk JOIN two_pk tpk ON opk.pk=tpk.pk1 AND opk.pk=tpk.pk2`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ opk.pk:0!null\n" +
			" │   └─ tpk.pk1:1!null\n" +
			" ├─ sel: Eq\n" +
			" │   ├─ opk.pk:0!null\n" +
			" │   └─ tpk.pk2:2!null\n" +
			" ├─ TableAlias(opk)\n" +
			" │   └─ IndexedTableAccess(one_pk)\n" +
			" │       ├─ index: [one_pk.pk]\n" +
			" │       ├─ static: [{[NULL, ∞)}]\n" +
			" │       ├─ colSet: (1-6)\n" +
			" │       ├─ tableId: 1\n" +
			" │       └─ Table\n" +
			" │           ├─ name: one_pk\n" +
			" │           └─ columns: [pk]\n" +
			" └─ TableAlias(tpk)\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         ├─ colSet: (7-13)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: two_pk\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=8.120 rows=4)\n" +
			" ├─ cmp: (opk.pk = tpk.pk1)\n" +
			" ├─ sel: (opk.pk = tpk.pk2)\n" +
			" ├─ TableAlias(opk)\n" +
			" │   └─ IndexedTableAccess(one_pk)\n" +
			" │       ├─ index: [one_pk.pk]\n" +
			" │       ├─ filters: [{[NULL, ∞)}]\n" +
			" │       └─ columns: [pk]\n" +
			" └─ TableAlias(tpk)\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=8.120 rows=4) (actual rows=2 loops=1)\n" +
			" ├─ cmp: (opk.pk = tpk.pk1)\n" +
			" ├─ sel: (opk.pk = tpk.pk2)\n" +
			" ├─ TableAlias(opk)\n" +
			" │   └─ IndexedTableAccess(one_pk)\n" +
			" │       ├─ index: [one_pk.pk]\n" +
			" │       ├─ filters: [{[NULL, ∞)}]\n" +
			" │       └─ columns: [pk]\n" +
			" └─ TableAlias(tpk)\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk JOIN two_pk ON one_pk.pk=two_pk.pk1 AND one_pk.pk=two_pk.pk2`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ one_pk.pk:0!null\n" +
			" │   └─ two_pk.pk1:1!null\n" +
			" ├─ sel: Eq\n" +
			" │   ├─ one_pk.pk:0!null\n" +
			" │   └─ two_pk.pk2:2!null\n" +
			" ├─ IndexedTableAccess(one_pk)\n" +
			" │   ├─ index: [one_pk.pk]\n" +
			" │   ├─ static: [{[NULL, ∞)}]\n" +
			" │   ├─ colSet: (1-6)\n" +
			" │   ├─ tableId: 1\n" +
			" │   └─ Table\n" +
			" │       ├─ name: one_pk\n" +
			" │       └─ columns: [pk]\n" +
			" └─ IndexedTableAccess(two_pk)\n" +
			"     ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     ├─ colSet: (7-13)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Table\n" +
			"         ├─ name: two_pk\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=8.120 rows=4)\n" +
			" ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			" ├─ sel: (one_pk.pk = two_pk.pk2)\n" +
			" ├─ IndexedTableAccess(one_pk)\n" +
			" │   ├─ index: [one_pk.pk]\n" +
			" │   ├─ filters: [{[NULL, ∞)}]\n" +
			" │   └─ columns: [pk]\n" +
			" └─ IndexedTableAccess(two_pk)\n" +
			"     ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=8.120 rows=4) (actual rows=2 loops=1)\n" +
			" ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			" ├─ sel: (one_pk.pk = two_pk.pk2)\n" +
			" ├─ IndexedTableAccess(one_pk)\n" +
			" │   ├─ index: [one_pk.pk]\n" +
			" │   ├─ filters: [{[NULL, ∞)}]\n" +
			" │   └─ columns: [pk]\n" +
			" └─ IndexedTableAccess(two_pk)\n" +
			"     ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk LEFT JOIN two_pk ON one_pk.pk <=> two_pk.pk1 AND one_pk.pk = two_pk.pk2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, two_pk.pk1:1!null, two_pk.pk2:2!null]\n" +
			" └─ LeftOuterJoin\n" +
			"     ├─ AND\n" +
			"     │   ├─ (one_pk.pk:0!null <=> two_pk.pk1:1!null)\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ one_pk.pk:0!null\n" +
			"     │       └─ two_pk.pk2:2!null\n" +
			"     ├─ ProcessTable\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: one_pk\n" +
			"     │       └─ columns: [pk]\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: two_pk\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ LeftOuterJoin (estimated cost=15.160 rows=5)\n" +
			"     ├─ ((one_pk.pk <=> two_pk.pk1) AND (one_pk.pk = two_pk.pk2))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: one_pk\n" +
			"     │   └─ columns: [pk]\n" +
			"     └─ Table\n" +
			"         ├─ name: two_pk\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ LeftOuterJoin (estimated cost=15.160 rows=5) (actual rows=4 loops=1)\n" +
			"     ├─ ((one_pk.pk <=> two_pk.pk1) AND (one_pk.pk = two_pk.pk2))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: one_pk\n" +
			"     │   └─ columns: [pk]\n" +
			"     └─ Table\n" +
			"         ├─ name: two_pk\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk LEFT JOIN two_pk ON one_pk.pk = two_pk.pk1 AND one_pk.pk <=> two_pk.pk2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, two_pk.pk1:1!null, two_pk.pk2:2!null]\n" +
			" └─ LeftOuterMergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ one_pk.pk:0!null\n" +
			"     │   └─ two_pk.pk1:1!null\n" +
			"     ├─ sel: (one_pk.pk:0!null <=> two_pk.pk2:2!null)\n" +
			"     ├─ IndexedTableAccess(one_pk)\n" +
			"     │   ├─ index: [one_pk.pk]\n" +
			"     │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │   ├─ colSet: (1-6)\n" +
			"     │   ├─ tableId: 1\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: one_pk\n" +
			"     │       └─ columns: [pk]\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         ├─ colSet: (7-13)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: two_pk\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=8.160 rows=5)\n" +
			"     ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			"     ├─ sel: (one_pk.pk <=> two_pk.pk2)\n" +
			"     ├─ IndexedTableAccess(one_pk)\n" +
			"     │   ├─ index: [one_pk.pk]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [pk]\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=8.160 rows=5) (actual rows=4 loops=1)\n" +
			"     ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			"     ├─ sel: (one_pk.pk <=> two_pk.pk2)\n" +
			"     ├─ IndexedTableAccess(one_pk)\n" +
			"     │   ├─ index: [one_pk.pk]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [pk]\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk LEFT JOIN two_pk ON one_pk.pk <=> two_pk.pk1 AND one_pk.pk <=> two_pk.pk2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, two_pk.pk1:1!null, two_pk.pk2:2!null]\n" +
			" └─ LeftOuterJoin\n" +
			"     ├─ AND\n" +
			"     │   ├─ (one_pk.pk:0!null <=> two_pk.pk1:1!null)\n" +
			"     │   └─ (one_pk.pk:0!null <=> two_pk.pk2:2!null)\n" +
			"     ├─ ProcessTable\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: one_pk\n" +
			"     │       └─ columns: [pk]\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: two_pk\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ LeftOuterJoin (estimated cost=15.160 rows=5)\n" +
			"     ├─ ((one_pk.pk <=> two_pk.pk1) AND (one_pk.pk <=> two_pk.pk2))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: one_pk\n" +
			"     │   └─ columns: [pk]\n" +
			"     └─ Table\n" +
			"         ├─ name: two_pk\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ LeftOuterJoin (estimated cost=15.160 rows=5) (actual rows=4 loops=1)\n" +
			"     ├─ ((one_pk.pk <=> two_pk.pk1) AND (one_pk.pk <=> two_pk.pk2))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: one_pk\n" +
			"     │   └─ columns: [pk]\n" +
			"     └─ Table\n" +
			"         ├─ name: two_pk\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk RIGHT JOIN two_pk ON one_pk.pk=two_pk.pk1 AND one_pk.pk=two_pk.pk2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:2!null, two_pk.pk1:0!null, two_pk.pk2:1!null]\n" +
			" └─ LeftOuterMergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ TUPLE(two_pk.pk1:0!null, two_pk.pk2:1!null)\n" +
			"     │   └─ TUPLE(one_pk.pk:2!null, one_pk.pk:2!null)\n" +
			"     ├─ IndexedTableAccess(two_pk)\n" +
			"     │   ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   ├─ colSet: (7-13)\n" +
			"     │   ├─ tableId: 2\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: two_pk\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (1-6)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: one_pk\n" +
			"             └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=8.150 rows=5)\n" +
			"     ├─ cmp: ((two_pk.pk1, two_pk.pk2) = (one_pk.pk, one_pk.pk))\n" +
			"     ├─ IndexedTableAccess(two_pk)\n" +
			"     │   ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   └─ columns: [pk1 pk2]\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=8.150 rows=5) (actual rows=4 loops=1)\n" +
			"     ├─ cmp: ((two_pk.pk1, two_pk.pk2) = (one_pk.pk, one_pk.pk))\n" +
			"     ├─ IndexedTableAccess(two_pk)\n" +
			"     │   ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   └─ columns: [pk1 pk2]\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT * FROM (SELECT * FROM othertable) othertable_alias WHERE othertable_alias.i2 = 1`,
		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: othertable_alias\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (3,4)\n" +
			" ├─ tableId: 2\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ static: [{[1, 1]}]\n" +
			"     ├─ colSet: (1,2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: othertable\n" +
			"         └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: othertable_alias\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ filters: [{[1, 1]}]\n" +
			"     └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: othertable_alias\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ filters: [{[1, 1]}]\n" +
			"     └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT * FROM (SELECT * FROM othertable WHERE i2 = 1) othertable_alias WHERE othertable_alias.i2 = 1`,
		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: othertable_alias\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (3,4)\n" +
			" ├─ tableId: 2\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ static: [{[1, 1]}]\n" +
			"     ├─ colSet: (1,2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: othertable\n" +
			"         └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: othertable_alias\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ filters: [{[1, 1]}]\n" +
			"     └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: othertable_alias\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ IndexedTableAccess(othertable)\n" +
			"     ├─ index: [othertable.i2]\n" +
			"     ├─ filters: [{[1, 1]}]\n" +
			"     └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT * FROM datetime_table ORDER BY date_col ASC`,
		ExpectedPlan: "IndexedTableAccess(datetime_table)\n" +
			" ├─ index: [datetime_table.date_col]\n" +
			" ├─ static: [{[NULL, ∞)}]\n" +
			" ├─ colSet: (1-5)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: datetime_table\n" +
			"     └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(datetime_table)\n" +
			" ├─ index: [datetime_table.date_col]\n" +
			" ├─ filters: [{[NULL, ∞)}]\n" +
			" └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(datetime_table)\n" +
			" ├─ index: [datetime_table.date_col]\n" +
			" ├─ filters: [{[NULL, ∞)}]\n" +
			" └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
	},
	{
		Query: `SELECT * FROM datetime_table ORDER BY date_col ASC LIMIT 100`,
		ExpectedPlan: "Limit(100)\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.date_col]\n" +
			"     ├─ static: [{[NULL, ∞)}]\n" +
			"     ├─ colSet: (1-5)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: datetime_table\n" +
			"         └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedEstimates: "Limit(100)\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.date_col]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedAnalysis: "Limit(100)\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.date_col]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
	},
	{
		Query: `SELECT * FROM datetime_table ORDER BY date_col ASC LIMIT 100 OFFSET 100`,
		ExpectedPlan: "Limit(100)\n" +
			" └─ Offset(100)\n" +
			"     └─ IndexedTableAccess(datetime_table)\n" +
			"         ├─ index: [datetime_table.date_col]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedEstimates: "Limit(100)\n" +
			" └─ Offset(100)\n" +
			"     └─ IndexedTableAccess(datetime_table)\n" +
			"         ├─ index: [datetime_table.date_col]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedAnalysis: "Limit(100)\n" +
			" └─ Offset(100)\n" +
			"     └─ IndexedTableAccess(datetime_table)\n" +
			"         ├─ index: [datetime_table.date_col]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
	},
	{
		Query: `SELECT * FROM datetime_table where date_col = '2020-01-01'`,
		ExpectedPlan: "Filter\n" +
			" ├─ Eq\n" +
			" │   ├─ datetime_table.date_col:1\n" +
			" │   └─ 2020-01-01 (longtext)\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.date_col]\n" +
			"     ├─ static: [{[2020-01-01 00:00:00 +0000 UTC, 2020-01-01 00:00:00 +0000 UTC]}]\n" +
			"     ├─ colSet: (1-5)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: datetime_table\n" +
			"         └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (datetime_table.date_col = '2020-01-01')\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.date_col]\n" +
			"     ├─ filters: [{[2020-01-01 00:00:00 +0000 UTC, 2020-01-01 00:00:00 +0000 UTC]}]\n" +
			"     └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (datetime_table.date_col = '2020-01-01')\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.date_col]\n" +
			"     ├─ filters: [{[2020-01-01 00:00:00 +0000 UTC, 2020-01-01 00:00:00 +0000 UTC]}]\n" +
			"     └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
	},
	{
		Query: `SELECT * FROM datetime_table where date_col > '2020-01-01'`,
		ExpectedPlan: "Filter\n" +
			" ├─ GreaterThan\n" +
			" │   ├─ datetime_table.date_col:1\n" +
			" │   └─ 2020-01-01 (longtext)\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.date_col]\n" +
			"     ├─ static: [{(2020-01-01 00:00:00 +0000 UTC, ∞)}]\n" +
			"     ├─ colSet: (1-5)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: datetime_table\n" +
			"         └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (datetime_table.date_col > '2020-01-01')\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.date_col]\n" +
			"     ├─ filters: [{(2020-01-01 00:00:00 +0000 UTC, ∞)}]\n" +
			"     └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (datetime_table.date_col > '2020-01-01')\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.date_col]\n" +
			"     ├─ filters: [{(2020-01-01 00:00:00 +0000 UTC, ∞)}]\n" +
			"     └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
	},
	{
		Query: `SELECT * FROM datetime_table where datetime_col = '2020-01-01'`,
		ExpectedPlan: "Filter\n" +
			" ├─ Eq\n" +
			" │   ├─ datetime_table.datetime_col:2\n" +
			" │   └─ 2020-01-01 (longtext)\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.datetime_col]\n" +
			"     ├─ static: [{[2020-01-01 00:00:00 +0000 UTC, 2020-01-01 00:00:00 +0000 UTC]}]\n" +
			"     ├─ colSet: (1-5)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: datetime_table\n" +
			"         └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (datetime_table.datetime_col = '2020-01-01')\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.datetime_col]\n" +
			"     ├─ filters: [{[2020-01-01 00:00:00 +0000 UTC, 2020-01-01 00:00:00 +0000 UTC]}]\n" +
			"     └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (datetime_table.datetime_col = '2020-01-01')\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.datetime_col]\n" +
			"     ├─ filters: [{[2020-01-01 00:00:00 +0000 UTC, 2020-01-01 00:00:00 +0000 UTC]}]\n" +
			"     └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
	},
	{
		Query: `SELECT * FROM datetime_table where datetime_col > '2020-01-01'`,
		ExpectedPlan: "Filter\n" +
			" ├─ GreaterThan\n" +
			" │   ├─ datetime_table.datetime_col:2\n" +
			" │   └─ 2020-01-01 (longtext)\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.datetime_col]\n" +
			"     ├─ static: [{(2020-01-01 00:00:00 +0000 UTC, ∞)}]\n" +
			"     ├─ colSet: (1-5)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: datetime_table\n" +
			"         └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (datetime_table.datetime_col > '2020-01-01')\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.datetime_col]\n" +
			"     ├─ filters: [{(2020-01-01 00:00:00 +0000 UTC, ∞)}]\n" +
			"     └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (datetime_table.datetime_col > '2020-01-01')\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.datetime_col]\n" +
			"     ├─ filters: [{(2020-01-01 00:00:00 +0000 UTC, ∞)}]\n" +
			"     └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
	},
	{
		Query: `SELECT * FROM datetime_table where timestamp_col = '2020-01-01'`,
		ExpectedPlan: "Filter\n" +
			" ├─ Eq\n" +
			" │   ├─ datetime_table.timestamp_col:3\n" +
			" │   └─ 2020-01-01 (longtext)\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.timestamp_col]\n" +
			"     ├─ static: [{[2020-01-01 00:00:00 +0000 UTC, 2020-01-01 00:00:00 +0000 UTC]}]\n" +
			"     ├─ colSet: (1-5)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: datetime_table\n" +
			"         └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (datetime_table.timestamp_col = '2020-01-01')\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.timestamp_col]\n" +
			"     ├─ filters: [{[2020-01-01 00:00:00 +0000 UTC, 2020-01-01 00:00:00 +0000 UTC]}]\n" +
			"     └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (datetime_table.timestamp_col = '2020-01-01')\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.timestamp_col]\n" +
			"     ├─ filters: [{[2020-01-01 00:00:00 +0000 UTC, 2020-01-01 00:00:00 +0000 UTC]}]\n" +
			"     └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
	},
	{
		Query: `SELECT * FROM datetime_table where timestamp_col > '2020-01-01'`,
		ExpectedPlan: "Filter\n" +
			" ├─ GreaterThan\n" +
			" │   ├─ datetime_table.timestamp_col:3\n" +
			" │   └─ 2020-01-01 (longtext)\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.timestamp_col]\n" +
			"     ├─ static: [{(2020-01-01 00:00:00 +0000 UTC, ∞)}]\n" +
			"     ├─ colSet: (1-5)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: datetime_table\n" +
			"         └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (datetime_table.timestamp_col > '2020-01-01')\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.timestamp_col]\n" +
			"     ├─ filters: [{(2020-01-01 00:00:00 +0000 UTC, ∞)}]\n" +
			"     └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (datetime_table.timestamp_col > '2020-01-01')\n" +
			" └─ IndexedTableAccess(datetime_table)\n" +
			"     ├─ index: [datetime_table.timestamp_col]\n" +
			"     ├─ filters: [{(2020-01-01 00:00:00 +0000 UTC, ∞)}]\n" +
			"     └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
	},
	{
		Query: `SELECT * FROM datetime_table dt1 join datetime_table dt2 on dt1.timestamp_col = dt2.timestamp_col`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ dt1.timestamp_col:3\n" +
			" │   └─ dt2.timestamp_col:8\n" +
			" ├─ TableAlias(dt1)\n" +
			" │   └─ IndexedTableAccess(datetime_table)\n" +
			" │       ├─ index: [datetime_table.timestamp_col]\n" +
			" │       ├─ static: [{[NULL, ∞)}]\n" +
			" │       ├─ colSet: (1-5)\n" +
			" │       ├─ tableId: 1\n" +
			" │       └─ Table\n" +
			" │           ├─ name: datetime_table\n" +
			" │           └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			" └─ TableAlias(dt2)\n" +
			"     └─ IndexedTableAccess(datetime_table)\n" +
			"         ├─ index: [datetime_table.timestamp_col]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (6-10)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: datetime_table\n" +
			"             └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=6.120 rows=3)\n" +
			" ├─ cmp: (dt1.timestamp_col = dt2.timestamp_col)\n" +
			" ├─ TableAlias(dt1)\n" +
			" │   └─ IndexedTableAccess(datetime_table)\n" +
			" │       ├─ index: [datetime_table.timestamp_col]\n" +
			" │       ├─ filters: [{[NULL, ∞)}]\n" +
			" │       └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			" └─ TableAlias(dt2)\n" +
			"     └─ IndexedTableAccess(datetime_table)\n" +
			"         ├─ index: [datetime_table.timestamp_col]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=6.120 rows=3) (actual rows=3 loops=1)\n" +
			" ├─ cmp: (dt1.timestamp_col = dt2.timestamp_col)\n" +
			" ├─ TableAlias(dt1)\n" +
			" │   └─ IndexedTableAccess(datetime_table)\n" +
			" │       ├─ index: [datetime_table.timestamp_col]\n" +
			" │       ├─ filters: [{[NULL, ∞)}]\n" +
			" │       └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			" └─ TableAlias(dt2)\n" +
			"     └─ IndexedTableAccess(datetime_table)\n" +
			"         ├─ index: [datetime_table.timestamp_col]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
	},
	{
		Query: `SELECT * FROM datetime_table dt1 join datetime_table dt2 on dt1.date_col = dt2.timestamp_col`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ dt1.date_col:1\n" +
			" │   └─ dt2.timestamp_col:8\n" +
			" ├─ TableAlias(dt1)\n" +
			" │   └─ IndexedTableAccess(datetime_table)\n" +
			" │       ├─ index: [datetime_table.date_col]\n" +
			" │       ├─ static: [{[NULL, ∞)}]\n" +
			" │       ├─ colSet: (1-5)\n" +
			" │       ├─ tableId: 1\n" +
			" │       └─ Table\n" +
			" │           ├─ name: datetime_table\n" +
			" │           └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			" └─ TableAlias(dt2)\n" +
			"     └─ IndexedTableAccess(datetime_table)\n" +
			"         ├─ index: [datetime_table.timestamp_col]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (6-10)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: datetime_table\n" +
			"             └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=6.120 rows=3)\n" +
			" ├─ cmp: (dt1.date_col = dt2.timestamp_col)\n" +
			" ├─ TableAlias(dt1)\n" +
			" │   └─ IndexedTableAccess(datetime_table)\n" +
			" │       ├─ index: [datetime_table.date_col]\n" +
			" │       ├─ filters: [{[NULL, ∞)}]\n" +
			" │       └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			" └─ TableAlias(dt2)\n" +
			"     └─ IndexedTableAccess(datetime_table)\n" +
			"         ├─ index: [datetime_table.timestamp_col]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=6.120 rows=3) (actual rows=0 loops=1)\n" +
			" ├─ cmp: (dt1.date_col = dt2.timestamp_col)\n" +
			" ├─ TableAlias(dt1)\n" +
			" │   └─ IndexedTableAccess(datetime_table)\n" +
			" │       ├─ index: [datetime_table.date_col]\n" +
			" │       ├─ filters: [{[NULL, ∞)}]\n" +
			" │       └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			" └─ TableAlias(dt2)\n" +
			"     └─ IndexedTableAccess(datetime_table)\n" +
			"         ├─ index: [datetime_table.timestamp_col]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
	},
	{
		Query: `SELECT * FROM datetime_table dt1 join datetime_table dt2 on dt1.datetime_col = dt2.timestamp_col`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ dt1.datetime_col:2\n" +
			" │   └─ dt2.timestamp_col:8\n" +
			" ├─ TableAlias(dt1)\n" +
			" │   └─ IndexedTableAccess(datetime_table)\n" +
			" │       ├─ index: [datetime_table.datetime_col]\n" +
			" │       ├─ static: [{[NULL, ∞)}]\n" +
			" │       ├─ colSet: (1-5)\n" +
			" │       ├─ tableId: 1\n" +
			" │       └─ Table\n" +
			" │           ├─ name: datetime_table\n" +
			" │           └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			" └─ TableAlias(dt2)\n" +
			"     └─ IndexedTableAccess(datetime_table)\n" +
			"         ├─ index: [datetime_table.timestamp_col]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (6-10)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: datetime_table\n" +
			"             └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=6.120 rows=3)\n" +
			" ├─ cmp: (dt1.datetime_col = dt2.timestamp_col)\n" +
			" ├─ TableAlias(dt1)\n" +
			" │   └─ IndexedTableAccess(datetime_table)\n" +
			" │       ├─ index: [datetime_table.datetime_col]\n" +
			" │       ├─ filters: [{[NULL, ∞)}]\n" +
			" │       └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			" └─ TableAlias(dt2)\n" +
			"     └─ IndexedTableAccess(datetime_table)\n" +
			"         ├─ index: [datetime_table.timestamp_col]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=6.120 rows=3) (actual rows=0 loops=1)\n" +
			" ├─ cmp: (dt1.datetime_col = dt2.timestamp_col)\n" +
			" ├─ TableAlias(dt1)\n" +
			" │   └─ IndexedTableAccess(datetime_table)\n" +
			" │       ├─ index: [datetime_table.datetime_col]\n" +
			" │       ├─ filters: [{[NULL, ∞)}]\n" +
			" │       └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			" └─ TableAlias(dt2)\n" +
			"     └─ IndexedTableAccess(datetime_table)\n" +
			"         ├─ index: [datetime_table.timestamp_col]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i date_col datetime_col timestamp_col time_col]\n" +
			"",
	},
	{
		Query: `SELECT dt1.i FROM datetime_table dt1
			join datetime_table dt2 on dt1.date_col = date(date_sub(dt2.timestamp_col, interval 2 day))
			order by 1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [dt1.i:1!null]\n" +
			" └─ Sort(dt1.i:1!null ASC nullsFirst)\n" +
			"     └─ InnerJoin\n" +
			"         ├─ Eq\n" +
			"         │   ├─ dt1.date_col:2\n" +
			"         │   └─ DATE(date_sub(dt2.timestamp_col,INTERVAL 2 DAY))\n" +
			"         ├─ TableAlias(dt2)\n" +
			"         │   └─ ProcessTable\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: datetime_table\n" +
			"         │           └─ columns: [timestamp_col]\n" +
			"         └─ TableAlias(dt1)\n" +
			"             └─ Table\n" +
			"                 ├─ name: datetime_table\n" +
			"                 ├─ columns: [i date_col]\n" +
			"                 ├─ colSet: (1-5)\n" +
			"                 └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [dt1.i]\n" +
			" └─ Sort(dt1.i ASC)\n" +
			"     └─ InnerJoin\n" +
			"         ├─ (dt1.date_col = DATE(date_sub(dt2.timestamp_col,INTERVAL 2 DAY)))\n" +
			"         ├─ TableAlias(dt2)\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: datetime_table\n" +
			"         │       └─ columns: [timestamp_col]\n" +
			"         └─ TableAlias(dt1)\n" +
			"             └─ Table\n" +
			"                 ├─ name: datetime_table\n" +
			"                 └─ columns: [i date_col]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [dt1.i]\n" +
			" └─ Sort(dt1.i ASC)\n" +
			"     └─ InnerJoin\n" +
			"         ├─ (dt1.date_col = DATE(date_sub(dt2.timestamp_col,INTERVAL 2 DAY)))\n" +
			"         ├─ TableAlias(dt2)\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: datetime_table\n" +
			"         │       └─ columns: [timestamp_col]\n" +
			"         └─ TableAlias(dt1)\n" +
			"             └─ Table\n" +
			"                 ├─ name: datetime_table\n" +
			"                 └─ columns: [i date_col]\n" +
			"",
	},
	{
		Query: `SELECT dt1.i FROM datetime_table dt1
			join datetime_table dt2 on dt1.date_col = date(date_sub(dt2.timestamp_col, interval 2 day))
			order by 1 limit 3 offset 0`,
		ExpectedPlan: "Limit(3)\n" +
			" └─ Project\n" +
			"     ├─ columns: [dt1.i:1!null]\n" +
			"     └─ Sort(dt1.i:1!null ASC nullsFirst)\n" +
			"         └─ InnerJoin\n" +
			"             ├─ Eq\n" +
			"             │   ├─ dt1.date_col:2\n" +
			"             │   └─ DATE(date_sub(dt2.timestamp_col,INTERVAL 2 DAY))\n" +
			"             ├─ TableAlias(dt2)\n" +
			"             │   └─ ProcessTable\n" +
			"             │       └─ Table\n" +
			"             │           ├─ name: datetime_table\n" +
			"             │           └─ columns: [timestamp_col]\n" +
			"             └─ TableAlias(dt1)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: datetime_table\n" +
			"                     ├─ columns: [i date_col]\n" +
			"                     ├─ colSet: (1-5)\n" +
			"                     └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Limit(3)\n" +
			" └─ Project\n" +
			"     ├─ columns: [dt1.i]\n" +
			"     └─ Sort(dt1.i ASC)\n" +
			"         └─ InnerJoin\n" +
			"             ├─ (dt1.date_col = DATE(date_sub(dt2.timestamp_col,INTERVAL 2 DAY)))\n" +
			"             ├─ TableAlias(dt2)\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: datetime_table\n" +
			"             │       └─ columns: [timestamp_col]\n" +
			"             └─ TableAlias(dt1)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: datetime_table\n" +
			"                     └─ columns: [i date_col]\n" +
			"",
		ExpectedAnalysis: "Limit(3)\n" +
			" └─ Project\n" +
			"     ├─ columns: [dt1.i]\n" +
			"     └─ Sort(dt1.i ASC)\n" +
			"         └─ InnerJoin\n" +
			"             ├─ (dt1.date_col = DATE(date_sub(dt2.timestamp_col,INTERVAL 2 DAY)))\n" +
			"             ├─ TableAlias(dt2)\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: datetime_table\n" +
			"             │       └─ columns: [timestamp_col]\n" +
			"             └─ TableAlias(dt1)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: datetime_table\n" +
			"                     └─ columns: [i date_col]\n" +
			"",
	},
	{
		Query: `SELECT dt1.i FROM datetime_table dt1
			join datetime_table dt2 on dt1.date_col = date(date_sub(dt2.timestamp_col, interval 2 day))
			order by 1 limit 3`,
		ExpectedPlan: "Limit(3)\n" +
			" └─ Project\n" +
			"     ├─ columns: [dt1.i:1!null]\n" +
			"     └─ Sort(dt1.i:1!null ASC nullsFirst)\n" +
			"         └─ InnerJoin\n" +
			"             ├─ Eq\n" +
			"             │   ├─ dt1.date_col:2\n" +
			"             │   └─ DATE(date_sub(dt2.timestamp_col,INTERVAL 2 DAY))\n" +
			"             ├─ TableAlias(dt2)\n" +
			"             │   └─ ProcessTable\n" +
			"             │       └─ Table\n" +
			"             │           ├─ name: datetime_table\n" +
			"             │           └─ columns: [timestamp_col]\n" +
			"             └─ TableAlias(dt1)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: datetime_table\n" +
			"                     ├─ columns: [i date_col]\n" +
			"                     ├─ colSet: (1-5)\n" +
			"                     └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Limit(3)\n" +
			" └─ Project\n" +
			"     ├─ columns: [dt1.i]\n" +
			"     └─ Sort(dt1.i ASC)\n" +
			"         └─ InnerJoin\n" +
			"             ├─ (dt1.date_col = DATE(date_sub(dt2.timestamp_col,INTERVAL 2 DAY)))\n" +
			"             ├─ TableAlias(dt2)\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: datetime_table\n" +
			"             │       └─ columns: [timestamp_col]\n" +
			"             └─ TableAlias(dt1)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: datetime_table\n" +
			"                     └─ columns: [i date_col]\n" +
			"",
		ExpectedAnalysis: "Limit(3)\n" +
			" └─ Project\n" +
			"     ├─ columns: [dt1.i]\n" +
			"     └─ Sort(dt1.i ASC)\n" +
			"         └─ InnerJoin\n" +
			"             ├─ (dt1.date_col = DATE(date_sub(dt2.timestamp_col,INTERVAL 2 DAY)))\n" +
			"             ├─ TableAlias(dt2)\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: datetime_table\n" +
			"             │       └─ columns: [timestamp_col]\n" +
			"             └─ TableAlias(dt1)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: datetime_table\n" +
			"                     └─ columns: [i date_col]\n" +
			"",
	},
	{
		Query: `SELECT pk FROM one_pk
						JOIN two_pk tpk ON one_pk.pk=tpk.pk1 AND one_pk.pk=tpk.pk2
						JOIN two_pk tpk2 ON tpk2.pk1=TPK.pk2 AND TPK2.pk2=tpk.pk1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ MergeJoin\n" +
			"     │   ├─ cmp: Eq\n" +
			"     │   │   ├─ one_pk.pk:0!null\n" +
			"     │   │   └─ tpk.pk1:1!null\n" +
			"     │   ├─ sel: Eq\n" +
			"     │   │   ├─ one_pk.pk:0!null\n" +
			"     │   │   └─ tpk.pk2:2!null\n" +
			"     │   ├─ IndexedTableAccess(one_pk)\n" +
			"     │   │   ├─ index: [one_pk.pk]\n" +
			"     │   │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │   │   ├─ colSet: (1-6)\n" +
			"     │   │   ├─ tableId: 1\n" +
			"     │   │   └─ Table\n" +
			"     │   │       ├─ name: one_pk\n" +
			"     │   │       └─ columns: [pk]\n" +
			"     │   └─ TableAlias(tpk)\n" +
			"     │       └─ IndexedTableAccess(two_pk)\n" +
			"     │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │           ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           ├─ colSet: (7-13)\n" +
			"     │           ├─ tableId: 2\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: two_pk\n" +
			"     │               └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(tpk2)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ keys: [tpk.pk2:2!null tpk.pk1:1!null]\n" +
			"             ├─ colSet: (14-20)\n" +
			"             ├─ tableId: 3\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk]\n" +
			" └─ LookupJoin (estimated cost=13.200 rows=4)\n" +
			"     ├─ MergeJoin (estimated cost=8.120 rows=4)\n" +
			"     │   ├─ cmp: (one_pk.pk = tpk.pk1)\n" +
			"     │   ├─ sel: (one_pk.pk = tpk.pk2)\n" +
			"     │   ├─ IndexedTableAccess(one_pk)\n" +
			"     │   │   ├─ index: [one_pk.pk]\n" +
			"     │   │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │   └─ columns: [pk]\n" +
			"     │   └─ TableAlias(tpk)\n" +
			"     │       └─ IndexedTableAccess(two_pk)\n" +
			"     │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(tpk2)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ columns: [pk1 pk2]\n" +
			"             └─ keys: tpk.pk2, tpk.pk1\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk]\n" +
			" └─ LookupJoin (estimated cost=13.200 rows=4) (actual rows=2 loops=1)\n" +
			"     ├─ MergeJoin (estimated cost=8.120 rows=4) (actual rows=2 loops=1)\n" +
			"     │   ├─ cmp: (one_pk.pk = tpk.pk1)\n" +
			"     │   ├─ sel: (one_pk.pk = tpk.pk2)\n" +
			"     │   ├─ IndexedTableAccess(one_pk)\n" +
			"     │   │   ├─ index: [one_pk.pk]\n" +
			"     │   │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │   └─ columns: [pk]\n" +
			"     │   └─ TableAlias(tpk)\n" +
			"     │       └─ IndexedTableAccess(two_pk)\n" +
			"     │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(tpk2)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ columns: [pk1 pk2]\n" +
			"             └─ keys: tpk.pk2, tpk.pk1\n" +
			"",
	},
	{
		Query: `SELECT /* JOIN_ORDER(tpk, one_pk, tpk2) */
						pk FROM one_pk
						JOIN two_pk tpk ON one_pk.pk=tpk.pk1 AND one_pk.pk=tpk.pk2
						JOIN two_pk tpk2 ON tpk2.pk1=TPK.pk2 AND TPK2.pk2=tpk.pk1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ MergeJoin\n" +
			"     │   ├─ cmp: Eq\n" +
			"     │   │   ├─ one_pk.pk:0!null\n" +
			"     │   │   └─ tpk.pk1:1!null\n" +
			"     │   ├─ sel: Eq\n" +
			"     │   │   ├─ one_pk.pk:0!null\n" +
			"     │   │   └─ tpk.pk2:2!null\n" +
			"     │   ├─ IndexedTableAccess(one_pk)\n" +
			"     │   │   ├─ index: [one_pk.pk]\n" +
			"     │   │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │   │   ├─ colSet: (1-6)\n" +
			"     │   │   ├─ tableId: 1\n" +
			"     │   │   └─ Table\n" +
			"     │   │       ├─ name: one_pk\n" +
			"     │   │       └─ columns: [pk]\n" +
			"     │   └─ TableAlias(tpk)\n" +
			"     │       └─ IndexedTableAccess(two_pk)\n" +
			"     │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │           ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           ├─ colSet: (7-13)\n" +
			"     │           ├─ tableId: 2\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: two_pk\n" +
			"     │               └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(tpk2)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ keys: [tpk.pk2:2!null tpk.pk1:1!null]\n" +
			"             ├─ colSet: (14-20)\n" +
			"             ├─ tableId: 3\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk]\n" +
			" └─ LookupJoin (estimated cost=13.200 rows=4)\n" +
			"     ├─ MergeJoin (estimated cost=8.120 rows=4)\n" +
			"     │   ├─ cmp: (one_pk.pk = tpk.pk1)\n" +
			"     │   ├─ sel: (one_pk.pk = tpk.pk2)\n" +
			"     │   ├─ IndexedTableAccess(one_pk)\n" +
			"     │   │   ├─ index: [one_pk.pk]\n" +
			"     │   │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │   └─ columns: [pk]\n" +
			"     │   └─ TableAlias(tpk)\n" +
			"     │       └─ IndexedTableAccess(two_pk)\n" +
			"     │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(tpk2)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ columns: [pk1 pk2]\n" +
			"             └─ keys: tpk.pk2, tpk.pk1\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk]\n" +
			" └─ LookupJoin (estimated cost=13.200 rows=4) (actual rows=2 loops=1)\n" +
			"     ├─ MergeJoin (estimated cost=8.120 rows=4) (actual rows=2 loops=1)\n" +
			"     │   ├─ cmp: (one_pk.pk = tpk.pk1)\n" +
			"     │   ├─ sel: (one_pk.pk = tpk.pk2)\n" +
			"     │   ├─ IndexedTableAccess(one_pk)\n" +
			"     │   │   ├─ index: [one_pk.pk]\n" +
			"     │   │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │   └─ columns: [pk]\n" +
			"     │   └─ TableAlias(tpk)\n" +
			"     │       └─ IndexedTableAccess(two_pk)\n" +
			"     │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(tpk2)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ columns: [pk1 pk2]\n" +
			"             └─ keys: tpk.pk2, tpk.pk1\n" +
			"",
	},
	{
		Query: `SELECT /* JOIN_ORDER(tpk, one_pk, tpk2) */
						pk FROM one_pk
						JOIN two_pk tpk ON one_pk.pk=tpk.pk1 AND one_pk.pk=tpk.pk2
						LEFT JOIN two_pk tpk2 ON tpk2.pk1=TPK.pk2 AND TPK2.pk2=tpk.pk1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null]\n" +
			" └─ LeftOuterJoin\n" +
			"     ├─ AND\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ tpk2.pk1:3!null\n" +
			"     │   │   └─ tpk.pk2:2!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ tpk2.pk2:4!null\n" +
			"     │       └─ tpk.pk1:1!null\n" +
			"     ├─ MergeJoin\n" +
			"     │   ├─ cmp: Eq\n" +
			"     │   │   ├─ one_pk.pk:0!null\n" +
			"     │   │   └─ tpk.pk1:1!null\n" +
			"     │   ├─ sel: Eq\n" +
			"     │   │   ├─ one_pk.pk:0!null\n" +
			"     │   │   └─ tpk.pk2:2!null\n" +
			"     │   ├─ IndexedTableAccess(one_pk)\n" +
			"     │   │   ├─ index: [one_pk.pk]\n" +
			"     │   │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │   │   ├─ colSet: (1-6)\n" +
			"     │   │   ├─ tableId: 1\n" +
			"     │   │   └─ Table\n" +
			"     │   │       ├─ name: one_pk\n" +
			"     │   │       └─ columns: [pk]\n" +
			"     │   └─ TableAlias(tpk)\n" +
			"     │       └─ IndexedTableAccess(two_pk)\n" +
			"     │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │           ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           ├─ colSet: (7-13)\n" +
			"     │           ├─ tableId: 2\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: two_pk\n" +
			"     │               └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(tpk2)\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk]\n" +
			" └─ LeftOuterJoin (estimated cost=15.160 rows=5)\n" +
			"     ├─ ((tpk2.pk1 = tpk.pk2) AND (tpk2.pk2 = tpk.pk1))\n" +
			"     ├─ MergeJoin (estimated cost=8.120 rows=4)\n" +
			"     │   ├─ cmp: (one_pk.pk = tpk.pk1)\n" +
			"     │   ├─ sel: (one_pk.pk = tpk.pk2)\n" +
			"     │   ├─ IndexedTableAccess(one_pk)\n" +
			"     │   │   ├─ index: [one_pk.pk]\n" +
			"     │   │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │   └─ columns: [pk]\n" +
			"     │   └─ TableAlias(tpk)\n" +
			"     │       └─ IndexedTableAccess(two_pk)\n" +
			"     │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(tpk2)\n" +
			"         └─ Table\n" +
			"             ├─ name: two_pk\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk]\n" +
			" └─ LeftOuterJoin (estimated cost=15.160 rows=5) (actual rows=2 loops=1)\n" +
			"     ├─ ((tpk2.pk1 = tpk.pk2) AND (tpk2.pk2 = tpk.pk1))\n" +
			"     ├─ MergeJoin (estimated cost=8.120 rows=4) (actual rows=2 loops=1)\n" +
			"     │   ├─ cmp: (one_pk.pk = tpk.pk1)\n" +
			"     │   ├─ sel: (one_pk.pk = tpk.pk2)\n" +
			"     │   ├─ IndexedTableAccess(one_pk)\n" +
			"     │   │   ├─ index: [one_pk.pk]\n" +
			"     │   │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │   └─ columns: [pk]\n" +
			"     │   └─ TableAlias(tpk)\n" +
			"     │       └─ IndexedTableAccess(two_pk)\n" +
			"     │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(tpk2)\n" +
			"         └─ Table\n" +
			"             ├─ name: two_pk\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk,tpk.pk1,tpk2.pk1,tpk.pk2,tpk2.pk2 FROM one_pk
						JOIN two_pk tpk ON pk=tpk.pk1 AND pk-1=tpk.pk2
						JOIN two_pk tpk2 ON pk-1=TPK2.pk1 AND pk=tpk2.pk2
						ORDER BY 1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, tpk.pk1:1!null, tpk2.pk1:3!null, tpk.pk2:2!null, tpk2.pk2:4!null]\n" +
			" └─ Sort(one_pk.pk:0!null ASC nullsFirst)\n" +
			"     └─ HashJoin\n" +
			"         ├─ AND\n" +
			"         │   ├─ Eq\n" +
			"         │   │   ├─ (one_pk.pk:0!null - 1 (tinyint))\n" +
			"         │   │   └─ tpk2.pk1:3!null\n" +
			"         │   └─ Eq\n" +
			"         │       ├─ one_pk.pk:0!null\n" +
			"         │       └─ tpk2.pk2:4!null\n" +
			"         ├─ MergeJoin\n" +
			"         │   ├─ cmp: Eq\n" +
			"         │   │   ├─ one_pk.pk:0!null\n" +
			"         │   │   └─ tpk.pk1:1!null\n" +
			"         │   ├─ sel: Eq\n" +
			"         │   │   ├─ (one_pk.pk:0!null - 1 (tinyint))\n" +
			"         │   │   └─ tpk.pk2:2!null\n" +
			"         │   ├─ IndexedTableAccess(one_pk)\n" +
			"         │   │   ├─ index: [one_pk.pk]\n" +
			"         │   │   ├─ static: [{[NULL, ∞)}]\n" +
			"         │   │   ├─ colSet: (1-6)\n" +
			"         │   │   ├─ tableId: 1\n" +
			"         │   │   └─ Table\n" +
			"         │   │       ├─ name: one_pk\n" +
			"         │   │       └─ columns: [pk]\n" +
			"         │   └─ TableAlias(tpk)\n" +
			"         │       └─ IndexedTableAccess(two_pk)\n" +
			"         │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         │           ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │           ├─ colSet: (7-13)\n" +
			"         │           ├─ tableId: 2\n" +
			"         │           └─ Table\n" +
			"         │               ├─ name: two_pk\n" +
			"         │               └─ columns: [pk1 pk2]\n" +
			"         └─ HashLookup\n" +
			"             ├─ left-key: TUPLE((one_pk.pk:0!null - 1 (tinyint)), one_pk.pk:0!null)\n" +
			"             ├─ right-key: TUPLE(tpk2.pk1:0!null, tpk2.pk2:1!null)\n" +
			"             └─ TableAlias(tpk2)\n" +
			"                 └─ ProcessTable\n" +
			"                     └─ Table\n" +
			"                         ├─ name: two_pk\n" +
			"                         └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, tpk.pk1, tpk2.pk1, tpk.pk2, tpk2.pk2]\n" +
			" └─ Sort(one_pk.pk ASC)\n" +
			"     └─ HashJoin\n" +
			"         ├─ (((one_pk.pk - 1) = tpk2.pk1) AND (one_pk.pk = tpk2.pk2))\n" +
			"         ├─ MergeJoin\n" +
			"         │   ├─ cmp: (one_pk.pk = tpk.pk1)\n" +
			"         │   ├─ sel: ((one_pk.pk - 1) = tpk.pk2)\n" +
			"         │   ├─ IndexedTableAccess(one_pk)\n" +
			"         │   │   ├─ index: [one_pk.pk]\n" +
			"         │   │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   │   └─ columns: [pk]\n" +
			"         │   └─ TableAlias(tpk)\n" +
			"         │       └─ IndexedTableAccess(two_pk)\n" +
			"         │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │           └─ columns: [pk1 pk2]\n" +
			"         └─ HashLookup\n" +
			"             ├─ left-key: ((one_pk.pk - 1), one_pk.pk)\n" +
			"             ├─ right-key: (tpk2.pk1, tpk2.pk2)\n" +
			"             └─ TableAlias(tpk2)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: two_pk\n" +
			"                     └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, tpk.pk1, tpk2.pk1, tpk.pk2, tpk2.pk2]\n" +
			" └─ Sort(one_pk.pk ASC)\n" +
			"     └─ HashJoin\n" +
			"         ├─ (((one_pk.pk - 1) = tpk2.pk1) AND (one_pk.pk = tpk2.pk2))\n" +
			"         ├─ MergeJoin\n" +
			"         │   ├─ cmp: (one_pk.pk = tpk.pk1)\n" +
			"         │   ├─ sel: ((one_pk.pk - 1) = tpk.pk2)\n" +
			"         │   ├─ IndexedTableAccess(one_pk)\n" +
			"         │   │   ├─ index: [one_pk.pk]\n" +
			"         │   │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   │   └─ columns: [pk]\n" +
			"         │   └─ TableAlias(tpk)\n" +
			"         │       └─ IndexedTableAccess(two_pk)\n" +
			"         │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │           └─ columns: [pk1 pk2]\n" +
			"         └─ HashLookup\n" +
			"             ├─ left-key: ((one_pk.pk - 1), one_pk.pk)\n" +
			"             ├─ right-key: (tpk2.pk1, tpk2.pk2)\n" +
			"             └─ TableAlias(tpk2)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: two_pk\n" +
			"                     └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk FROM one_pk
						LEFT JOIN two_pk tpk ON one_pk.pk=tpk.pk1 AND one_pk.pk=tpk.pk2
						LEFT JOIN two_pk tpk2 ON tpk2.pk1=TPK.pk2 AND TPK2.pk2=tpk.pk1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null]\n" +
			" └─ LeftOuterHashJoin\n" +
			"     ├─ AND\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ tpk2.pk1:3!null\n" +
			"     │   │   └─ tpk.pk2:2!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ tpk2.pk2:4!null\n" +
			"     │       └─ tpk.pk1:1!null\n" +
			"     ├─ LeftOuterMergeJoin\n" +
			"     │   ├─ cmp: Eq\n" +
			"     │   │   ├─ one_pk.pk:0!null\n" +
			"     │   │   └─ tpk.pk1:1!null\n" +
			"     │   ├─ sel: Eq\n" +
			"     │   │   ├─ one_pk.pk:0!null\n" +
			"     │   │   └─ tpk.pk2:2!null\n" +
			"     │   ├─ IndexedTableAccess(one_pk)\n" +
			"     │   │   ├─ index: [one_pk.pk]\n" +
			"     │   │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │   │   ├─ colSet: (1-6)\n" +
			"     │   │   ├─ tableId: 1\n" +
			"     │   │   └─ Table\n" +
			"     │   │       ├─ name: one_pk\n" +
			"     │   │       └─ columns: [pk]\n" +
			"     │   └─ TableAlias(tpk)\n" +
			"     │       └─ IndexedTableAccess(two_pk)\n" +
			"     │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │           ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           ├─ colSet: (7-13)\n" +
			"     │           ├─ tableId: 2\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: two_pk\n" +
			"     │               └─ columns: [pk1 pk2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(tpk.pk2:2!null, tpk.pk1:1!null)\n" +
			"         ├─ right-key: TUPLE(tpk2.pk1:0!null, tpk2.pk2:1!null)\n" +
			"         └─ TableAlias(tpk2)\n" +
			"             └─ ProcessTable\n" +
			"                 └─ Table\n" +
			"                     ├─ name: two_pk\n" +
			"                     └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk]\n" +
			" └─ LeftOuterHashJoin (estimated cost=17.100 rows=5)\n" +
			"     ├─ ((tpk2.pk1 = tpk.pk2) AND (tpk2.pk2 = tpk.pk1))\n" +
			"     ├─ LeftOuterMergeJoin (estimated cost=8.160 rows=5)\n" +
			"     │   ├─ cmp: (one_pk.pk = tpk.pk1)\n" +
			"     │   ├─ sel: (one_pk.pk = tpk.pk2)\n" +
			"     │   ├─ IndexedTableAccess(one_pk)\n" +
			"     │   │   ├─ index: [one_pk.pk]\n" +
			"     │   │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │   └─ columns: [pk]\n" +
			"     │   └─ TableAlias(tpk)\n" +
			"     │       └─ IndexedTableAccess(two_pk)\n" +
			"     │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (tpk.pk2, tpk.pk1)\n" +
			"         ├─ right-key: (tpk2.pk1, tpk2.pk2)\n" +
			"         └─ TableAlias(tpk2)\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk]\n" +
			" └─ LeftOuterHashJoin (estimated cost=17.100 rows=5) (actual rows=4 loops=1)\n" +
			"     ├─ ((tpk2.pk1 = tpk.pk2) AND (tpk2.pk2 = tpk.pk1))\n" +
			"     ├─ LeftOuterMergeJoin (estimated cost=8.160 rows=5) (actual rows=4 loops=1)\n" +
			"     │   ├─ cmp: (one_pk.pk = tpk.pk1)\n" +
			"     │   ├─ sel: (one_pk.pk = tpk.pk2)\n" +
			"     │   ├─ IndexedTableAccess(one_pk)\n" +
			"     │   │   ├─ index: [one_pk.pk]\n" +
			"     │   │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │   └─ columns: [pk]\n" +
			"     │   └─ TableAlias(tpk)\n" +
			"     │       └─ IndexedTableAccess(two_pk)\n" +
			"     │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (tpk.pk2, tpk.pk1)\n" +
			"         ├─ right-key: (tpk2.pk1, tpk2.pk2)\n" +
			"         └─ TableAlias(tpk2)\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk FROM one_pk
						LEFT JOIN two_pk tpk ON one_pk.pk=tpk.pk1 AND one_pk.pk=tpk.pk2
						JOIN two_pk tpk2 ON tpk2.pk1=TPK.pk2 AND TPK2.pk2=tpk.pk1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ LeftOuterMergeJoin\n" +
			"     │   ├─ cmp: Eq\n" +
			"     │   │   ├─ one_pk.pk:0!null\n" +
			"     │   │   └─ tpk.pk1:1!null\n" +
			"     │   ├─ sel: Eq\n" +
			"     │   │   ├─ one_pk.pk:0!null\n" +
			"     │   │   └─ tpk.pk2:2!null\n" +
			"     │   ├─ IndexedTableAccess(one_pk)\n" +
			"     │   │   ├─ index: [one_pk.pk]\n" +
			"     │   │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │   │   ├─ colSet: (1-6)\n" +
			"     │   │   ├─ tableId: 1\n" +
			"     │   │   └─ Table\n" +
			"     │   │       ├─ name: one_pk\n" +
			"     │   │       └─ columns: [pk]\n" +
			"     │   └─ TableAlias(tpk)\n" +
			"     │       └─ IndexedTableAccess(two_pk)\n" +
			"     │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │           ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           ├─ colSet: (7-13)\n" +
			"     │           ├─ tableId: 2\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: two_pk\n" +
			"     │               └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(tpk2)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ keys: [tpk.pk2:2!null tpk.pk1:1!null]\n" +
			"             ├─ colSet: (14-20)\n" +
			"             ├─ tableId: 3\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk]\n" +
			" └─ LookupJoin (estimated cost=16.500 rows=5)\n" +
			"     ├─ LeftOuterMergeJoin (estimated cost=8.160 rows=5)\n" +
			"     │   ├─ cmp: (one_pk.pk = tpk.pk1)\n" +
			"     │   ├─ sel: (one_pk.pk = tpk.pk2)\n" +
			"     │   ├─ IndexedTableAccess(one_pk)\n" +
			"     │   │   ├─ index: [one_pk.pk]\n" +
			"     │   │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │   └─ columns: [pk]\n" +
			"     │   └─ TableAlias(tpk)\n" +
			"     │       └─ IndexedTableAccess(two_pk)\n" +
			"     │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(tpk2)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ columns: [pk1 pk2]\n" +
			"             └─ keys: tpk.pk2, tpk.pk1\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk]\n" +
			" └─ LookupJoin (estimated cost=16.500 rows=5) (actual rows=2 loops=1)\n" +
			"     ├─ LeftOuterMergeJoin (estimated cost=8.160 rows=5) (actual rows=4 loops=1)\n" +
			"     │   ├─ cmp: (one_pk.pk = tpk.pk1)\n" +
			"     │   ├─ sel: (one_pk.pk = tpk.pk2)\n" +
			"     │   ├─ IndexedTableAccess(one_pk)\n" +
			"     │   │   ├─ index: [one_pk.pk]\n" +
			"     │   │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │   └─ columns: [pk]\n" +
			"     │   └─ TableAlias(tpk)\n" +
			"     │       └─ IndexedTableAccess(two_pk)\n" +
			"     │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(tpk2)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ columns: [pk1 pk2]\n" +
			"             └─ keys: tpk.pk2, tpk.pk1\n" +
			"",
	},
	{
		Query: `SELECT pk FROM one_pk
						JOIN two_pk tpk ON one_pk.pk=tpk.pk1 AND one_pk.pk=tpk.pk2
						LEFT JOIN two_pk tpk2 ON tpk2.pk1=TPK.pk2 AND TPK2.pk2=tpk.pk1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null]\n" +
			" └─ LeftOuterJoin\n" +
			"     ├─ AND\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ tpk2.pk1:3!null\n" +
			"     │   │   └─ tpk.pk2:2!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ tpk2.pk2:4!null\n" +
			"     │       └─ tpk.pk1:1!null\n" +
			"     ├─ MergeJoin\n" +
			"     │   ├─ cmp: Eq\n" +
			"     │   │   ├─ one_pk.pk:0!null\n" +
			"     │   │   └─ tpk.pk1:1!null\n" +
			"     │   ├─ sel: Eq\n" +
			"     │   │   ├─ one_pk.pk:0!null\n" +
			"     │   │   └─ tpk.pk2:2!null\n" +
			"     │   ├─ IndexedTableAccess(one_pk)\n" +
			"     │   │   ├─ index: [one_pk.pk]\n" +
			"     │   │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │   │   ├─ colSet: (1-6)\n" +
			"     │   │   ├─ tableId: 1\n" +
			"     │   │   └─ Table\n" +
			"     │   │       ├─ name: one_pk\n" +
			"     │   │       └─ columns: [pk]\n" +
			"     │   └─ TableAlias(tpk)\n" +
			"     │       └─ IndexedTableAccess(two_pk)\n" +
			"     │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │           ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           ├─ colSet: (7-13)\n" +
			"     │           ├─ tableId: 2\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: two_pk\n" +
			"     │               └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(tpk2)\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk]\n" +
			" └─ LeftOuterJoin (estimated cost=15.160 rows=5)\n" +
			"     ├─ ((tpk2.pk1 = tpk.pk2) AND (tpk2.pk2 = tpk.pk1))\n" +
			"     ├─ MergeJoin (estimated cost=8.120 rows=4)\n" +
			"     │   ├─ cmp: (one_pk.pk = tpk.pk1)\n" +
			"     │   ├─ sel: (one_pk.pk = tpk.pk2)\n" +
			"     │   ├─ IndexedTableAccess(one_pk)\n" +
			"     │   │   ├─ index: [one_pk.pk]\n" +
			"     │   │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │   └─ columns: [pk]\n" +
			"     │   └─ TableAlias(tpk)\n" +
			"     │       └─ IndexedTableAccess(two_pk)\n" +
			"     │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(tpk2)\n" +
			"         └─ Table\n" +
			"             ├─ name: two_pk\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk]\n" +
			" └─ LeftOuterJoin (estimated cost=15.160 rows=5) (actual rows=2 loops=1)\n" +
			"     ├─ ((tpk2.pk1 = tpk.pk2) AND (tpk2.pk2 = tpk.pk1))\n" +
			"     ├─ MergeJoin (estimated cost=8.120 rows=4) (actual rows=2 loops=1)\n" +
			"     │   ├─ cmp: (one_pk.pk = tpk.pk1)\n" +
			"     │   ├─ sel: (one_pk.pk = tpk.pk2)\n" +
			"     │   ├─ IndexedTableAccess(one_pk)\n" +
			"     │   │   ├─ index: [one_pk.pk]\n" +
			"     │   │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │   └─ columns: [pk]\n" +
			"     │   └─ TableAlias(tpk)\n" +
			"     │       └─ IndexedTableAccess(two_pk)\n" +
			"     │           ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(tpk2)\n" +
			"         └─ Table\n" +
			"             ├─ name: two_pk\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk FROM one_pk
						RIGHT JOIN two_pk tpk ON one_pk.pk=tpk.pk1 AND one_pk.pk=tpk.pk2
						RIGHT JOIN two_pk tpk2 ON tpk.pk1=TPk2.pk2 AND tpk.pk2=TPK2.pk1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:4!null]\n" +
			" └─ LeftOuterHashJoin\n" +
			"     ├─ AND\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ tpk.pk1:2!null\n" +
			"     │   │   └─ tpk2.pk2:1!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ tpk.pk2:3!null\n" +
			"     │       └─ tpk2.pk1:0!null\n" +
			"     ├─ TableAlias(tpk2)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: two_pk\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(tpk2.pk2:1!null, tpk2.pk1:0!null)\n" +
			"         ├─ right-key: TUPLE(tpk.pk1:0!null, tpk.pk2:1!null)\n" +
			"         └─ LeftOuterMergeJoin\n" +
			"             ├─ cmp: Eq\n" +
			"             │   ├─ TUPLE(tpk.pk1:2!null, tpk.pk2:3!null)\n" +
			"             │   └─ TUPLE(one_pk.pk:4!null, one_pk.pk:4!null)\n" +
			"             ├─ TableAlias(tpk)\n" +
			"             │   └─ IndexedTableAccess(two_pk)\n" +
			"             │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             │       ├─ colSet: (7-13)\n" +
			"             │       ├─ tableId: 2\n" +
			"             │       └─ Table\n" +
			"             │           ├─ name: two_pk\n" +
			"             │           └─ columns: [pk1 pk2]\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ static: [{[NULL, ∞)}]\n" +
			"                 ├─ colSet: (1-6)\n" +
			"                 ├─ tableId: 1\n" +
			"                 └─ Table\n" +
			"                     ├─ name: one_pk\n" +
			"                     └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk]\n" +
			" └─ LeftOuterHashJoin (estimated cost=19.090 rows=5)\n" +
			"     ├─ ((tpk.pk1 = tpk2.pk2) AND (tpk.pk2 = tpk2.pk1))\n" +
			"     ├─ TableAlias(tpk2)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: two_pk\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (tpk2.pk2, tpk2.pk1)\n" +
			"         ├─ right-key: (tpk.pk1, tpk.pk2)\n" +
			"         └─ LeftOuterMergeJoin\n" +
			"             ├─ cmp: ((tpk.pk1, tpk.pk2) = (one_pk.pk, one_pk.pk))\n" +
			"             ├─ TableAlias(tpk)\n" +
			"             │   └─ IndexedTableAccess(two_pk)\n" +
			"             │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             │       └─ columns: [pk1 pk2]\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk]\n" +
			" └─ LeftOuterHashJoin (estimated cost=19.090 rows=5) (actual rows=4 loops=1)\n" +
			"     ├─ ((tpk.pk1 = tpk2.pk2) AND (tpk.pk2 = tpk2.pk1))\n" +
			"     ├─ TableAlias(tpk2)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: two_pk\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (tpk2.pk2, tpk2.pk1)\n" +
			"         ├─ right-key: (tpk.pk1, tpk.pk2)\n" +
			"         └─ LeftOuterMergeJoin\n" +
			"             ├─ cmp: ((tpk.pk1, tpk.pk2) = (one_pk.pk, one_pk.pk))\n" +
			"             ├─ TableAlias(tpk)\n" +
			"             │   └─ IndexedTableAccess(two_pk)\n" +
			"             │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             │       └─ columns: [pk1 pk2]\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT i,pk1,pk2 FROM mytable JOIN two_pk ON i-1=pk1 AND i-2=pk2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mytable.i:2!null, two_pk.pk1:0!null, two_pk.pk2:1!null]\n" +
			" └─ HashJoin\n" +
			"     ├─ AND\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ (mytable.i:2!null - 1 (tinyint))\n" +
			"     │   │   └─ two_pk.pk1:0!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ (mytable.i:2!null - 2 (tinyint))\n" +
			"     │       └─ two_pk.pk2:1!null\n" +
			"     ├─ ProcessTable\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: two_pk\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(two_pk.pk1:0!null, two_pk.pk2:1!null)\n" +
			"         ├─ right-key: TUPLE((mytable.i:0!null - 1 (tinyint)), (mytable.i:0!null - 2 (tinyint)))\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mytable.i, two_pk.pk1, two_pk.pk2]\n" +
			" └─ HashJoin (estimated cost=13.070 rows=3)\n" +
			"     ├─ (((mytable.i - 1) = two_pk.pk1) AND ((mytable.i - 2) = two_pk.pk2))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: two_pk\n" +
			"     │   └─ columns: [pk1 pk2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (two_pk.pk1, two_pk.pk2)\n" +
			"         ├─ right-key: ((mytable.i - 1), (mytable.i - 2))\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mytable.i, two_pk.pk1, two_pk.pk2]\n" +
			" └─ HashJoin (estimated cost=13.070 rows=3) (actual rows=1 loops=1)\n" +
			"     ├─ (((mytable.i - 1) = two_pk.pk1) AND ((mytable.i - 2) = two_pk.pk2))\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: two_pk\n" +
			"     │   └─ columns: [pk1 pk2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (two_pk.pk1, two_pk.pk2)\n" +
			"         ├─ right-key: ((mytable.i - 1), (mytable.i - 2))\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk LEFT JOIN two_pk ON pk=pk1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, two_pk.pk1:1!null, two_pk.pk2:2!null]\n" +
			" └─ LeftOuterMergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ one_pk.pk:0!null\n" +
			"     │   └─ two_pk.pk1:1!null\n" +
			"     ├─ IndexedTableAccess(one_pk)\n" +
			"     │   ├─ index: [one_pk.pk]\n" +
			"     │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │   ├─ colSet: (1-6)\n" +
			"     │   ├─ tableId: 1\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: one_pk\n" +
			"     │       └─ columns: [pk]\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         ├─ colSet: (7-13)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: two_pk\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=8.160 rows=5)\n" +
			"     ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			"     ├─ IndexedTableAccess(one_pk)\n" +
			"     │   ├─ index: [one_pk.pk]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [pk]\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=8.160 rows=5) (actual rows=6 loops=1)\n" +
			"     ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			"     ├─ IndexedTableAccess(one_pk)\n" +
			"     │   ├─ index: [one_pk.pk]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [pk]\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk,i,f FROM one_pk LEFT JOIN niltable ON pk=i`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, niltable.i:1!null, niltable.f:2]\n" +
			" └─ LeftOuterMergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ one_pk.pk:0!null\n" +
			"     │   └─ niltable.i:1!null\n" +
			"     ├─ IndexedTableAccess(one_pk)\n" +
			"     │   ├─ index: [one_pk.pk]\n" +
			"     │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │   ├─ colSet: (1-6)\n" +
			"     │   ├─ tableId: 1\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: one_pk\n" +
			"     │       └─ columns: [pk]\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (7-10)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: niltable\n" +
			"             └─ columns: [i f]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=10.180 rows=5)\n" +
			"     ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"     ├─ IndexedTableAccess(one_pk)\n" +
			"     │   ├─ index: [one_pk.pk]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [pk]\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i f]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=10.180 rows=5) (actual rows=4 loops=1)\n" +
			"     ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"     ├─ IndexedTableAccess(one_pk)\n" +
			"     │   ├─ index: [one_pk.pk]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [pk]\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i f]\n" +
			"",
	},
	{
		Query: `SELECT pk,i,f FROM one_pk RIGHT JOIN niltable ON pk=i`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:2!null, niltable.i:0!null, niltable.f:1]\n" +
			" └─ LeftOuterMergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ niltable.i:0!null\n" +
			"     │   └─ one_pk.pk:2!null\n" +
			"     ├─ IndexedTableAccess(niltable)\n" +
			"     │   ├─ index: [niltable.i]\n" +
			"     │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │   ├─ colSet: (7-10)\n" +
			"     │   ├─ tableId: 2\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: niltable\n" +
			"     │       └─ columns: [i f]\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (1-6)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: one_pk\n" +
			"             └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=10.180 rows=5)\n" +
			"     ├─ cmp: (niltable.i = one_pk.pk)\n" +
			"     ├─ IndexedTableAccess(niltable)\n" +
			"     │   ├─ index: [niltable.i]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [i f]\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=10.180 rows=5) (actual rows=6 loops=1)\n" +
			"     ├─ cmp: (niltable.i = one_pk.pk)\n" +
			"     ├─ IndexedTableAccess(niltable)\n" +
			"     │   ├─ index: [niltable.i]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [i f]\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT pk,nt.i,nt2.i FROM one_pk
						RIGHT JOIN niltable nt ON pk=nt.i
						RIGHT JOIN niltable nt2 ON pk=nt2.i + 1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:2!null, nt.i:1!null, nt2.i:0!null]\n" +
			" └─ LeftOuterHashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ one_pk.pk:2!null\n" +
			"     │   └─ (nt2.i:0!null + 1 (tinyint))\n" +
			"     ├─ TableAlias(nt2)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: niltable\n" +
			"     │           └─ columns: [i]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE((nt2.i:0!null + 1 (tinyint)))\n" +
			"         ├─ right-key: TUPLE(one_pk.pk:1!null)\n" +
			"         └─ LeftOuterMergeJoin\n" +
			"             ├─ cmp: Eq\n" +
			"             │   ├─ nt.i:1!null\n" +
			"             │   └─ one_pk.pk:2!null\n" +
			"             ├─ TableAlias(nt)\n" +
			"             │   └─ IndexedTableAccess(niltable)\n" +
			"             │       ├─ index: [niltable.i]\n" +
			"             │       ├─ static: [{[NULL, ∞)}]\n" +
			"             │       ├─ colSet: (7-10)\n" +
			"             │       ├─ tableId: 2\n" +
			"             │       └─ Table\n" +
			"             │           ├─ name: niltable\n" +
			"             │           └─ columns: [i]\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ static: [{[NULL, ∞)}]\n" +
			"                 ├─ colSet: (1-6)\n" +
			"                 ├─ tableId: 1\n" +
			"                 └─ Table\n" +
			"                     ├─ name: one_pk\n" +
			"                     └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, nt.i, nt2.i]\n" +
			" └─ LeftOuterHashJoin (estimated cost=21.120 rows=6)\n" +
			"     ├─ (one_pk.pk = (nt2.i + 1))\n" +
			"     ├─ TableAlias(nt2)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: niltable\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: ((nt2.i + 1))\n" +
			"         ├─ right-key: (one_pk.pk)\n" +
			"         └─ LeftOuterMergeJoin\n" +
			"             ├─ cmp: (nt.i = one_pk.pk)\n" +
			"             ├─ TableAlias(nt)\n" +
			"             │   └─ IndexedTableAccess(niltable)\n" +
			"             │       ├─ index: [niltable.i]\n" +
			"             │       ├─ filters: [{[NULL, ∞)}]\n" +
			"             │       └─ columns: [i]\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, nt.i, nt2.i]\n" +
			" └─ LeftOuterHashJoin (estimated cost=21.120 rows=6) (actual rows=6 loops=1)\n" +
			"     ├─ (one_pk.pk = (nt2.i + 1))\n" +
			"     ├─ TableAlias(nt2)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: niltable\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: ((nt2.i + 1))\n" +
			"         ├─ right-key: (one_pk.pk)\n" +
			"         └─ LeftOuterMergeJoin\n" +
			"             ├─ cmp: (nt.i = one_pk.pk)\n" +
			"             ├─ TableAlias(nt)\n" +
			"             │   └─ IndexedTableAccess(niltable)\n" +
			"             │       ├─ index: [niltable.i]\n" +
			"             │       ├─ filters: [{[NULL, ∞)}]\n" +
			"             │       └─ columns: [i]\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT pk,i,f FROM one_pk LEFT JOIN niltable ON pk=i AND f IS NOT NULL`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, niltable.i:1!null, niltable.f:2]\n" +
			" └─ LeftOuterMergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ one_pk.pk:0!null\n" +
			"     │   └─ niltable.i:1!null\n" +
			"     ├─ sel: NOT\n" +
			"     │   └─ niltable.f:2 IS NULL\n" +
			"     ├─ IndexedTableAccess(one_pk)\n" +
			"     │   ├─ index: [one_pk.pk]\n" +
			"     │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │   ├─ colSet: (1-6)\n" +
			"     │   ├─ tableId: 1\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: one_pk\n" +
			"     │       └─ columns: [pk]\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (7-10)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: niltable\n" +
			"             └─ columns: [i f]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=10.180 rows=5)\n" +
			"     ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"     ├─ sel: (NOT(niltable.f IS NULL))\n" +
			"     ├─ IndexedTableAccess(one_pk)\n" +
			"     │   ├─ index: [one_pk.pk]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [pk]\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i f]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=10.180 rows=5) (actual rows=4 loops=1)\n" +
			"     ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"     ├─ sel: (NOT(niltable.f IS NULL))\n" +
			"     ├─ IndexedTableAccess(one_pk)\n" +
			"     │   ├─ index: [one_pk.pk]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [pk]\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i f]\n" +
			"",
	},
	{
		Query: `SELECT pk,i,f FROM one_pk RIGHT JOIN niltable ON pk=i and pk > 0`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:2!null, niltable.i:0!null, niltable.f:1]\n" +
			" └─ LeftOuterMergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ niltable.i:0!null\n" +
			"     │   └─ one_pk.pk:2!null\n" +
			"     ├─ sel: GreaterThan\n" +
			"     │   ├─ one_pk.pk:2!null\n" +
			"     │   └─ 0 (smallint)\n" +
			"     ├─ IndexedTableAccess(niltable)\n" +
			"     │   ├─ index: [niltable.i]\n" +
			"     │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │   ├─ colSet: (7-10)\n" +
			"     │   ├─ tableId: 2\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: niltable\n" +
			"     │       └─ columns: [i f]\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (1-6)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: one_pk\n" +
			"             └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=10.180 rows=5)\n" +
			"     ├─ cmp: (niltable.i = one_pk.pk)\n" +
			"     ├─ sel: (one_pk.pk > 0)\n" +
			"     ├─ IndexedTableAccess(niltable)\n" +
			"     │   ├─ index: [niltable.i]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [i f]\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=10.180 rows=5) (actual rows=6 loops=1)\n" +
			"     ├─ cmp: (niltable.i = one_pk.pk)\n" +
			"     ├─ sel: (one_pk.pk > 0)\n" +
			"     ├─ IndexedTableAccess(niltable)\n" +
			"     │   ├─ index: [niltable.i]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [i f]\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT pk,i,f FROM one_pk LEFT JOIN niltable ON pk=i WHERE f IS NOT NULL`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, niltable.i:1!null, niltable.f:2]\n" +
			" └─ Filter\n" +
			"     ├─ NOT\n" +
			"     │   └─ niltable.f:2 IS NULL\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ one_pk.pk:0!null\n" +
			"         │   └─ niltable.i:1!null\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ static: [{[NULL, ∞)}]\n" +
			"         │   ├─ colSet: (1-6)\n" +
			"         │   ├─ tableId: 1\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: one_pk\n" +
			"         │       └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(niltable)\n" +
			"             ├─ index: [niltable.i]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (7-10)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: niltable\n" +
			"                 └─ columns: [i f]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Filter\n" +
			"     ├─ (NOT(niltable.f IS NULL))\n" +
			"     └─ LeftOuterMergeJoin (estimated cost=10.180 rows=5)\n" +
			"         ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(niltable)\n" +
			"             ├─ index: [niltable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [i f]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Filter\n" +
			"     ├─ (NOT(niltable.f IS NULL))\n" +
			"     └─ LeftOuterMergeJoin (estimated cost=10.180 rows=5) (actual rows=4 loops=1)\n" +
			"         ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(niltable)\n" +
			"             ├─ index: [niltable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [i f]\n" +
			"",
	},
	{
		Query: `SELECT pk,i,f FROM one_pk LEFT JOIN niltable ON pk=i WHERE i2 > 1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, niltable.i:1!null, niltable.f:3]\n" +
			" └─ Filter\n" +
			"     ├─ GreaterThan\n" +
			"     │   ├─ niltable.i2:2\n" +
			"     │   └─ 1 (bigint)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ one_pk.pk:0!null\n" +
			"         │   └─ niltable.i:1!null\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ static: [{[NULL, ∞)}]\n" +
			"         │   ├─ colSet: (1-6)\n" +
			"         │   ├─ tableId: 1\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: one_pk\n" +
			"         │       └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(niltable)\n" +
			"             ├─ index: [niltable.i]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (7-10)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: niltable\n" +
			"                 └─ columns: [i i2 f]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Filter\n" +
			"     ├─ (niltable.i2 > 1)\n" +
			"     └─ LeftOuterMergeJoin (estimated cost=10.180 rows=5)\n" +
			"         ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(niltable)\n" +
			"             ├─ index: [niltable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [i i2 f]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Filter\n" +
			"     ├─ (niltable.i2 > 1)\n" +
			"     └─ LeftOuterMergeJoin (estimated cost=10.180 rows=5) (actual rows=4 loops=1)\n" +
			"         ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(niltable)\n" +
			"             ├─ index: [niltable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [i i2 f]\n" +
			"",
	},
	{
		Query: `SELECT pk,i,f FROM one_pk LEFT JOIN niltable ON pk=i WHERE i > 1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, niltable.i:1!null, niltable.f:2]\n" +
			" └─ Filter\n" +
			"     ├─ GreaterThan\n" +
			"     │   ├─ niltable.i:1!null\n" +
			"     │   └─ 1 (bigint)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ one_pk.pk:0!null\n" +
			"         │   └─ niltable.i:1!null\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ static: [{[NULL, ∞)}]\n" +
			"         │   ├─ colSet: (1-6)\n" +
			"         │   ├─ tableId: 1\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: one_pk\n" +
			"         │       └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(niltable)\n" +
			"             ├─ index: [niltable.i]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (7-10)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: niltable\n" +
			"                 └─ columns: [i f]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Filter\n" +
			"     ├─ (niltable.i > 1)\n" +
			"     └─ LeftOuterMergeJoin (estimated cost=10.180 rows=5)\n" +
			"         ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(niltable)\n" +
			"             ├─ index: [niltable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [i f]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Filter\n" +
			"     ├─ (niltable.i > 1)\n" +
			"     └─ LeftOuterMergeJoin (estimated cost=10.180 rows=5) (actual rows=4 loops=1)\n" +
			"         ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(niltable)\n" +
			"             ├─ index: [niltable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [i f]\n" +
			"",
	},
	{
		Query: `SELECT pk,i,f FROM one_pk LEFT JOIN niltable ON pk=i WHERE c1 > 10`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, niltable.i:2!null, niltable.f:3]\n" +
			" └─ LeftOuterMergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ one_pk.pk:0!null\n" +
			"     │   └─ niltable.i:2!null\n" +
			"     ├─ Filter\n" +
			"     │   ├─ GreaterThan\n" +
			"     │   │   ├─ one_pk.c1:1\n" +
			"     │   │   └─ 10 (smallint)\n" +
			"     │   └─ IndexedTableAccess(one_pk)\n" +
			"     │       ├─ index: [one_pk.pk]\n" +
			"     │       ├─ static: [{[NULL, ∞)}]\n" +
			"     │       ├─ colSet: (1-6)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: one_pk\n" +
			"     │           └─ columns: [pk c1]\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (7-10)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: niltable\n" +
			"             └─ columns: [i f]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=9.150 rows=3)\n" +
			"     ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"     ├─ Filter\n" +
			"     │   ├─ (one_pk.c1 > 10)\n" +
			"     │   └─ IndexedTableAccess(one_pk)\n" +
			"     │       ├─ index: [one_pk.pk]\n" +
			"     │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │       └─ columns: [pk c1]\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i f]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=9.150 rows=3) (actual rows=2 loops=1)\n" +
			"     ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"     ├─ Filter\n" +
			"     │   ├─ (one_pk.c1 > 10)\n" +
			"     │   └─ IndexedTableAccess(one_pk)\n" +
			"     │       ├─ index: [one_pk.pk]\n" +
			"     │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │       └─ columns: [pk c1]\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i f]\n" +
			"",
	},
	{
		Query: `SELECT pk,i,f FROM one_pk RIGHT JOIN niltable ON pk=i WHERE f IS NOT NULL`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:2!null, niltable.i:0!null, niltable.f:1]\n" +
			" └─ LeftOuterMergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ niltable.i:0!null\n" +
			"     │   └─ one_pk.pk:2!null\n" +
			"     ├─ Filter\n" +
			"     │   ├─ NOT\n" +
			"     │   │   └─ niltable.f:1 IS NULL\n" +
			"     │   └─ IndexedTableAccess(niltable)\n" +
			"     │       ├─ index: [niltable.i]\n" +
			"     │       ├─ static: [{[NULL, ∞)}]\n" +
			"     │       ├─ colSet: (7-10)\n" +
			"     │       ├─ tableId: 2\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: niltable\n" +
			"     │           └─ columns: [i f]\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (1-6)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: one_pk\n" +
			"             └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=9.170 rows=5)\n" +
			"     ├─ cmp: (niltable.i = one_pk.pk)\n" +
			"     ├─ Filter\n" +
			"     │   ├─ (NOT(niltable.f IS NULL))\n" +
			"     │   └─ IndexedTableAccess(niltable)\n" +
			"     │       ├─ index: [niltable.i]\n" +
			"     │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │       └─ columns: [i f]\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=9.170 rows=5) (actual rows=3 loops=1)\n" +
			"     ├─ cmp: (niltable.i = one_pk.pk)\n" +
			"     ├─ Filter\n" +
			"     │   ├─ (NOT(niltable.f IS NULL))\n" +
			"     │   └─ IndexedTableAccess(niltable)\n" +
			"     │       ├─ index: [niltable.i]\n" +
			"     │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │       └─ columns: [i f]\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT pk,i,f FROM one_pk LEFT JOIN niltable ON pk=i WHERE pk > 1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, niltable.i:1!null, niltable.f:2]\n" +
			" └─ LeftOuterMergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ one_pk.pk:0!null\n" +
			"     │   └─ niltable.i:1!null\n" +
			"     ├─ Filter\n" +
			"     │   ├─ GreaterThan\n" +
			"     │   │   ├─ one_pk.pk:0!null\n" +
			"     │   │   └─ 1 (smallint)\n" +
			"     │   └─ IndexedTableAccess(one_pk)\n" +
			"     │       ├─ index: [one_pk.pk]\n" +
			"     │       ├─ static: [{[NULL, ∞)}]\n" +
			"     │       ├─ colSet: (1-6)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: one_pk\n" +
			"     │           └─ columns: [pk]\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (7-10)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: niltable\n" +
			"             └─ columns: [i f]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=10.190 rows=6)\n" +
			"     ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"     ├─ Filter\n" +
			"     │   ├─ (one_pk.pk > 1)\n" +
			"     │   └─ IndexedTableAccess(one_pk)\n" +
			"     │       ├─ index: [one_pk.pk]\n" +
			"     │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │       └─ columns: [pk]\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i f]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ LeftOuterMergeJoin (estimated cost=10.190 rows=6) (actual rows=2 loops=1)\n" +
			"     ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"     ├─ Filter\n" +
			"     │   ├─ (one_pk.pk > 1)\n" +
			"     │   └─ IndexedTableAccess(one_pk)\n" +
			"     │       ├─ index: [one_pk.pk]\n" +
			"     │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │       └─ columns: [pk]\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i f]\n" +
			"",
	},
	{
		Query: `SELECT l.i, r.i2 FROM niltable l INNER JOIN niltable r ON l.i2 <=> r.i2 ORDER BY 1 ASC`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [l.i:1!null, r.i2:0]\n" +
			" └─ Sort(l.i:1!null ASC nullsFirst)\n" +
			"     └─ InnerJoin\n" +
			"         ├─ (l.i2:2 <=> r.i2:0)\n" +
			"         ├─ TableAlias(r)\n" +
			"         │   └─ ProcessTable\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: niltable\n" +
			"         │           └─ columns: [i2]\n" +
			"         └─ TableAlias(l)\n" +
			"             └─ Table\n" +
			"                 ├─ name: niltable\n" +
			"                 ├─ columns: [i i2]\n" +
			"                 ├─ colSet: (1-4)\n" +
			"                 └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [l.i, r.i2]\n" +
			" └─ Sort(l.i ASC)\n" +
			"     └─ InnerJoin\n" +
			"         ├─ (l.i2 <=> r.i2)\n" +
			"         ├─ TableAlias(r)\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: niltable\n" +
			"         │       └─ columns: [i2]\n" +
			"         └─ TableAlias(l)\n" +
			"             └─ Table\n" +
			"                 ├─ name: niltable\n" +
			"                 └─ columns: [i i2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [l.i, r.i2]\n" +
			" └─ Sort(l.i ASC)\n" +
			"     └─ InnerJoin\n" +
			"         ├─ (l.i2 <=> r.i2)\n" +
			"         ├─ TableAlias(r)\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: niltable\n" +
			"         │       └─ columns: [i2]\n" +
			"         └─ TableAlias(l)\n" +
			"             └─ Table\n" +
			"                 ├─ name: niltable\n" +
			"                 └─ columns: [i i2]\n" +
			"",
	},
	{
		Query: `SELECT pk,i,f FROM one_pk RIGHT JOIN niltable ON pk=i WHERE pk > 0`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:2!null, niltable.i:0!null, niltable.f:1]\n" +
			" └─ Filter\n" +
			"     ├─ GreaterThan\n" +
			"     │   ├─ one_pk.pk:2!null\n" +
			"     │   └─ 0 (smallint)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ niltable.i:0!null\n" +
			"         │   └─ one_pk.pk:2!null\n" +
			"         ├─ IndexedTableAccess(niltable)\n" +
			"         │   ├─ index: [niltable.i]\n" +
			"         │   ├─ static: [{[NULL, ∞)}]\n" +
			"         │   ├─ colSet: (7-10)\n" +
			"         │   ├─ tableId: 2\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: niltable\n" +
			"         │       └─ columns: [i f]\n" +
			"         └─ IndexedTableAccess(one_pk)\n" +
			"             ├─ index: [one_pk.pk]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (1-6)\n" +
			"             ├─ tableId: 1\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Filter\n" +
			"     ├─ (one_pk.pk > 0)\n" +
			"     └─ LeftOuterMergeJoin (estimated cost=10.180 rows=5)\n" +
			"         ├─ cmp: (niltable.i = one_pk.pk)\n" +
			"         ├─ IndexedTableAccess(niltable)\n" +
			"         │   ├─ index: [niltable.i]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [i f]\n" +
			"         └─ IndexedTableAccess(one_pk)\n" +
			"             ├─ index: [one_pk.pk]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Filter\n" +
			"     ├─ (one_pk.pk > 0)\n" +
			"     └─ LeftOuterMergeJoin (estimated cost=10.180 rows=5) (actual rows=6 loops=1)\n" +
			"         ├─ cmp: (niltable.i = one_pk.pk)\n" +
			"         ├─ IndexedTableAccess(niltable)\n" +
			"         │   ├─ index: [niltable.i]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [i f]\n" +
			"         └─ IndexedTableAccess(one_pk)\n" +
			"             ├─ index: [one_pk.pk]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk JOIN two_pk ON pk=pk1`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ one_pk.pk:0!null\n" +
			" │   └─ two_pk.pk1:1!null\n" +
			" ├─ IndexedTableAccess(one_pk)\n" +
			" │   ├─ index: [one_pk.pk]\n" +
			" │   ├─ static: [{[NULL, ∞)}]\n" +
			" │   ├─ colSet: (1-6)\n" +
			" │   ├─ tableId: 1\n" +
			" │   └─ Table\n" +
			" │       ├─ name: one_pk\n" +
			" │       └─ columns: [pk]\n" +
			" └─ IndexedTableAccess(two_pk)\n" +
			"     ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     ├─ colSet: (7-13)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Table\n" +
			"         ├─ name: two_pk\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=8.120 rows=4)\n" +
			" ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			" ├─ IndexedTableAccess(one_pk)\n" +
			" │   ├─ index: [one_pk.pk]\n" +
			" │   ├─ filters: [{[NULL, ∞)}]\n" +
			" │   └─ columns: [pk]\n" +
			" └─ IndexedTableAccess(two_pk)\n" +
			"     ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=8.120 rows=4) (actual rows=4 loops=1)\n" +
			" ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			" ├─ IndexedTableAccess(one_pk)\n" +
			" │   ├─ index: [one_pk.pk]\n" +
			" │   ├─ filters: [{[NULL, ∞)}]\n" +
			" │   └─ columns: [pk]\n" +
			" └─ IndexedTableAccess(two_pk)\n" +
			"     ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT /*+ JOIN_ORDER(two_pk, one_pk) */ pk,pk1,pk2 FROM one_pk JOIN two_pk ON pk=pk1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:2!null, two_pk.pk1:0!null, two_pk.pk2:1!null]\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ two_pk.pk1:0!null\n" +
			"     │   └─ one_pk.pk:2!null\n" +
			"     ├─ IndexedTableAccess(two_pk)\n" +
			"     │   ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   ├─ colSet: (7-13)\n" +
			"     │   ├─ tableId: 2\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: two_pk\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (1-6)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: one_pk\n" +
			"             └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ MergeJoin (estimated cost=8.120 rows=4)\n" +
			"     ├─ cmp: (two_pk.pk1 = one_pk.pk)\n" +
			"     ├─ IndexedTableAccess(two_pk)\n" +
			"     │   ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   └─ columns: [pk1 pk2]\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ MergeJoin (estimated cost=8.120 rows=4) (actual rows=4 loops=1)\n" +
			"     ├─ cmp: (two_pk.pk1 = one_pk.pk)\n" +
			"     ├─ IndexedTableAccess(two_pk)\n" +
			"     │   ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   └─ columns: [pk1 pk2]\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT a.pk1,a.pk2,b.pk1,b.pk2 FROM two_pk a JOIN two_pk b ON a.pk1=b.pk1 AND a.pk2=b.pk2 ORDER BY 1,2,3`,
		ExpectedPlan: "Sort(a.pk1:0!null ASC nullsFirst, a.pk2:1!null ASC nullsFirst, b.pk1:2!null ASC nullsFirst)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ TUPLE(a.pk1:0!null, a.pk2:1!null)\n" +
			"     │   └─ TUPLE(b.pk1:2!null, b.pk2:3!null)\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(two_pk)\n" +
			"     │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       ├─ colSet: (1-7)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: two_pk\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             ├─ colSet: (8-14)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Sort(a.pk1 ASC, a.pk2 ASC, b.pk1 ASC)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: ((a.pk1, a.pk2) = (b.pk1, b.pk2))\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(two_pk)\n" +
			"     │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Sort(a.pk1 ASC, a.pk2 ASC, b.pk1 ASC)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: ((a.pk1, a.pk2) = (b.pk1, b.pk2))\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(two_pk)\n" +
			"     │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT a.pk1,a.pk2,b.pk1,b.pk2 FROM two_pk a JOIN two_pk b ON a.pk1=b.pk2 AND a.pk2=b.pk1 ORDER BY 1,2,3`,
		ExpectedPlan: "Sort(a.pk1:0!null ASC nullsFirst, a.pk2:1!null ASC nullsFirst, b.pk1:2!null ASC nullsFirst)\n" +
			" └─ LookupJoin\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: two_pk\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ keys: [a.pk2:1!null a.pk1:0!null]\n" +
			"             ├─ colSet: (8-14)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Sort(a.pk1 ASC, a.pk2 ASC, b.pk1 ASC)\n" +
			" └─ LookupJoin\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: two_pk\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ columns: [pk1 pk2]\n" +
			"             └─ keys: a.pk2, a.pk1\n" +
			"",
		ExpectedAnalysis: "Sort(a.pk1 ASC, a.pk2 ASC, b.pk1 ASC)\n" +
			" └─ LookupJoin\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: two_pk\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ columns: [pk1 pk2]\n" +
			"             └─ keys: a.pk2, a.pk1\n" +
			"",
	},
	{
		Query: `SELECT a.pk1,a.pk2,b.pk1,b.pk2 FROM two_pk a JOIN two_pk b ON b.pk1=a.pk1 AND a.pk2=b.pk2 ORDER BY 1,2,3`,
		ExpectedPlan: "Sort(a.pk1:0!null ASC nullsFirst, a.pk2:1!null ASC nullsFirst, b.pk1:2!null ASC nullsFirst)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ TUPLE(a.pk1:0!null, a.pk2:1!null)\n" +
			"     │   └─ TUPLE(b.pk1:2!null, b.pk2:3!null)\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(two_pk)\n" +
			"     │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       ├─ colSet: (1-7)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: two_pk\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             ├─ colSet: (8-14)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Sort(a.pk1 ASC, a.pk2 ASC, b.pk1 ASC)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: ((a.pk1, a.pk2) = (b.pk1, b.pk2))\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(two_pk)\n" +
			"     │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Sort(a.pk1 ASC, a.pk2 ASC, b.pk1 ASC)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: ((a.pk1, a.pk2) = (b.pk1, b.pk2))\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(two_pk)\n" +
			"     │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT a.pk1,a.pk2,b.pk1,b.pk2 FROM two_pk a JOIN two_pk b ON a.pk1+1=b.pk1 AND a.pk2+1=b.pk2 ORDER BY 1,2,3`,
		ExpectedPlan: "Sort(a.pk1:0!null ASC nullsFirst, a.pk2:1!null ASC nullsFirst, b.pk1:2!null ASC nullsFirst)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ TUPLE((a.pk1:0!null + 1 (tinyint)), (a.pk2:1!null + 1 (tinyint)))\n" +
			"     │   └─ TUPLE(b.pk1:2!null, b.pk2:3!null)\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(two_pk)\n" +
			"     │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       ├─ colSet: (1-7)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: two_pk\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             ├─ colSet: (8-14)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Sort(a.pk1 ASC, a.pk2 ASC, b.pk1 ASC)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: (((a.pk1 + 1), (a.pk2 + 1)) = (b.pk1, b.pk2))\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(two_pk)\n" +
			"     │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Sort(a.pk1 ASC, a.pk2 ASC, b.pk1 ASC)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: (((a.pk1 + 1), (a.pk2 + 1)) = (b.pk1, b.pk2))\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(two_pk)\n" +
			"     │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT a.pk1,a.pk2,b.pk1,b.pk2 FROM two_pk a, two_pk b WHERE a.pk1=b.pk1 AND a.pk2=b.pk2 ORDER BY 1,2,3`,
		ExpectedPlan: "Sort(a.pk1:0!null ASC nullsFirst, a.pk2:1!null ASC nullsFirst, b.pk1:2!null ASC nullsFirst)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ TUPLE(a.pk1:0!null, a.pk2:1!null)\n" +
			"     │   └─ TUPLE(b.pk1:2!null, b.pk2:3!null)\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(two_pk)\n" +
			"     │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       ├─ colSet: (1-7)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: two_pk\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             ├─ colSet: (8-14)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Sort(a.pk1 ASC, a.pk2 ASC, b.pk1 ASC)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: ((a.pk1, a.pk2) = (b.pk1, b.pk2))\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(two_pk)\n" +
			"     │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Sort(a.pk1 ASC, a.pk2 ASC, b.pk1 ASC)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: ((a.pk1, a.pk2) = (b.pk1, b.pk2))\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(two_pk)\n" +
			"     │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"     │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT a.pk1,a.pk2,b.pk1,b.pk2 FROM two_pk a, two_pk b WHERE a.pk1=b.pk2 AND a.pk2=b.pk1 ORDER BY 1,2,3`,
		ExpectedPlan: "Sort(a.pk1:0!null ASC nullsFirst, a.pk2:1!null ASC nullsFirst, b.pk1:2!null ASC nullsFirst)\n" +
			" └─ LookupJoin\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: two_pk\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ keys: [a.pk2:1!null a.pk1:0!null]\n" +
			"             ├─ colSet: (8-14)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Sort(a.pk1 ASC, a.pk2 ASC, b.pk1 ASC)\n" +
			" └─ LookupJoin\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: two_pk\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ columns: [pk1 pk2]\n" +
			"             └─ keys: a.pk2, a.pk1\n" +
			"",
		ExpectedAnalysis: "Sort(a.pk1 ASC, a.pk2 ASC, b.pk1 ASC)\n" +
			" └─ LookupJoin\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: two_pk\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ columns: [pk1 pk2]\n" +
			"             └─ keys: a.pk2, a.pk1\n" +
			"",
	},
	{
		Query: `SELECT one_pk.c5,pk1,pk2 FROM one_pk JOIN two_pk ON pk=pk1 ORDER BY 1,2,3`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.c5:1, two_pk.pk1:2!null, two_pk.pk2:3!null]\n" +
			" └─ Sort(one_pk.c5:1 ASC nullsFirst, two_pk.pk1:2!null ASC nullsFirst, two_pk.pk2:3!null ASC nullsFirst)\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ one_pk.pk:0!null\n" +
			"         │   └─ two_pk.pk1:2!null\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ static: [{[NULL, ∞)}]\n" +
			"         │   ├─ colSet: (1-6)\n" +
			"         │   ├─ tableId: 1\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: one_pk\n" +
			"         │       └─ columns: [pk c5]\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             ├─ colSet: (7-13)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.c5, two_pk.pk1, two_pk.pk2]\n" +
			" └─ Sort(one_pk.c5 ASC, two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [pk c5]\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.c5, two_pk.pk1, two_pk.pk2]\n" +
			" └─ Sort(one_pk.c5 ASC, two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [pk c5]\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT opk.c5,pk1,pk2 FROM one_pk opk JOIN two_pk tpk ON opk.pk=tpk.pk1 ORDER BY 1,2,3`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [opk.c5:1, tpk.pk1:2!null, tpk.pk2:3!null]\n" +
			" └─ Sort(opk.c5:1 ASC nullsFirst, tpk.pk1:2!null ASC nullsFirst, tpk.pk2:3!null ASC nullsFirst)\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ opk.pk:0!null\n" +
			"         │   └─ tpk.pk1:2!null\n" +
			"         ├─ TableAlias(opk)\n" +
			"         │   └─ IndexedTableAccess(one_pk)\n" +
			"         │       ├─ index: [one_pk.pk]\n" +
			"         │       ├─ static: [{[NULL, ∞)}]\n" +
			"         │       ├─ colSet: (1-6)\n" +
			"         │       ├─ tableId: 1\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: one_pk\n" +
			"         │           └─ columns: [pk c5]\n" +
			"         └─ TableAlias(tpk)\n" +
			"             └─ IndexedTableAccess(two_pk)\n" +
			"                 ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"                 ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 ├─ colSet: (7-13)\n" +
			"                 ├─ tableId: 2\n" +
			"                 └─ Table\n" +
			"                     ├─ name: two_pk\n" +
			"                     └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [opk.c5, tpk.pk1, tpk.pk2]\n" +
			" └─ Sort(opk.c5 ASC, tpk.pk1 ASC, tpk.pk2 ASC)\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: (opk.pk = tpk.pk1)\n" +
			"         ├─ TableAlias(opk)\n" +
			"         │   └─ IndexedTableAccess(one_pk)\n" +
			"         │       ├─ index: [one_pk.pk]\n" +
			"         │       ├─ filters: [{[NULL, ∞)}]\n" +
			"         │       └─ columns: [pk c5]\n" +
			"         └─ TableAlias(tpk)\n" +
			"             └─ IndexedTableAccess(two_pk)\n" +
			"                 ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"                 ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [opk.c5, tpk.pk1, tpk.pk2]\n" +
			" └─ Sort(opk.c5 ASC, tpk.pk1 ASC, tpk.pk2 ASC)\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: (opk.pk = tpk.pk1)\n" +
			"         ├─ TableAlias(opk)\n" +
			"         │   └─ IndexedTableAccess(one_pk)\n" +
			"         │       ├─ index: [one_pk.pk]\n" +
			"         │       ├─ filters: [{[NULL, ∞)}]\n" +
			"         │       └─ columns: [pk c5]\n" +
			"         └─ TableAlias(tpk)\n" +
			"             └─ IndexedTableAccess(two_pk)\n" +
			"                 ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"                 ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT opk.c5,pk1,pk2 FROM one_pk opk JOIN two_pk tpk ON pk=pk1 ORDER BY 1,2,3`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [opk.c5:1, tpk.pk1:2!null, tpk.pk2:3!null]\n" +
			" └─ Sort(opk.c5:1 ASC nullsFirst, tpk.pk1:2!null ASC nullsFirst, tpk.pk2:3!null ASC nullsFirst)\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ opk.pk:0!null\n" +
			"         │   └─ tpk.pk1:2!null\n" +
			"         ├─ TableAlias(opk)\n" +
			"         │   └─ IndexedTableAccess(one_pk)\n" +
			"         │       ├─ index: [one_pk.pk]\n" +
			"         │       ├─ static: [{[NULL, ∞)}]\n" +
			"         │       ├─ colSet: (1-6)\n" +
			"         │       ├─ tableId: 1\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: one_pk\n" +
			"         │           └─ columns: [pk c5]\n" +
			"         └─ TableAlias(tpk)\n" +
			"             └─ IndexedTableAccess(two_pk)\n" +
			"                 ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"                 ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 ├─ colSet: (7-13)\n" +
			"                 ├─ tableId: 2\n" +
			"                 └─ Table\n" +
			"                     ├─ name: two_pk\n" +
			"                     └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [opk.c5, tpk.pk1, tpk.pk2]\n" +
			" └─ Sort(opk.c5 ASC, tpk.pk1 ASC, tpk.pk2 ASC)\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: (opk.pk = tpk.pk1)\n" +
			"         ├─ TableAlias(opk)\n" +
			"         │   └─ IndexedTableAccess(one_pk)\n" +
			"         │       ├─ index: [one_pk.pk]\n" +
			"         │       ├─ filters: [{[NULL, ∞)}]\n" +
			"         │       └─ columns: [pk c5]\n" +
			"         └─ TableAlias(tpk)\n" +
			"             └─ IndexedTableAccess(two_pk)\n" +
			"                 ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"                 ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [opk.c5, tpk.pk1, tpk.pk2]\n" +
			" └─ Sort(opk.c5 ASC, tpk.pk1 ASC, tpk.pk2 ASC)\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: (opk.pk = tpk.pk1)\n" +
			"         ├─ TableAlias(opk)\n" +
			"         │   └─ IndexedTableAccess(one_pk)\n" +
			"         │       ├─ index: [one_pk.pk]\n" +
			"         │       ├─ filters: [{[NULL, ∞)}]\n" +
			"         │       └─ columns: [pk c5]\n" +
			"         └─ TableAlias(tpk)\n" +
			"             └─ IndexedTableAccess(two_pk)\n" +
			"                 ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"                 ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT opk.c5,pk1,pk2 FROM one_pk opk, two_pk tpk WHERE pk=pk1 ORDER BY 1,2,3`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [opk.c5:1, tpk.pk1:2!null, tpk.pk2:3!null]\n" +
			" └─ Sort(opk.c5:1 ASC nullsFirst, tpk.pk1:2!null ASC nullsFirst, tpk.pk2:3!null ASC nullsFirst)\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ opk.pk:0!null\n" +
			"         │   └─ tpk.pk1:2!null\n" +
			"         ├─ TableAlias(opk)\n" +
			"         │   └─ IndexedTableAccess(one_pk)\n" +
			"         │       ├─ index: [one_pk.pk]\n" +
			"         │       ├─ static: [{[NULL, ∞)}]\n" +
			"         │       ├─ colSet: (1-6)\n" +
			"         │       ├─ tableId: 1\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: one_pk\n" +
			"         │           └─ columns: [pk c5]\n" +
			"         └─ TableAlias(tpk)\n" +
			"             └─ IndexedTableAccess(two_pk)\n" +
			"                 ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"                 ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 ├─ colSet: (7-13)\n" +
			"                 ├─ tableId: 2\n" +
			"                 └─ Table\n" +
			"                     ├─ name: two_pk\n" +
			"                     └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [opk.c5, tpk.pk1, tpk.pk2]\n" +
			" └─ Sort(opk.c5 ASC, tpk.pk1 ASC, tpk.pk2 ASC)\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: (opk.pk = tpk.pk1)\n" +
			"         ├─ TableAlias(opk)\n" +
			"         │   └─ IndexedTableAccess(one_pk)\n" +
			"         │       ├─ index: [one_pk.pk]\n" +
			"         │       ├─ filters: [{[NULL, ∞)}]\n" +
			"         │       └─ columns: [pk c5]\n" +
			"         └─ TableAlias(tpk)\n" +
			"             └─ IndexedTableAccess(two_pk)\n" +
			"                 ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"                 ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [opk.c5, tpk.pk1, tpk.pk2]\n" +
			" └─ Sort(opk.c5 ASC, tpk.pk1 ASC, tpk.pk2 ASC)\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: (opk.pk = tpk.pk1)\n" +
			"         ├─ TableAlias(opk)\n" +
			"         │   └─ IndexedTableAccess(one_pk)\n" +
			"         │       ├─ index: [one_pk.pk]\n" +
			"         │       ├─ filters: [{[NULL, ∞)}]\n" +
			"         │       └─ columns: [pk c5]\n" +
			"         └─ TableAlias(tpk)\n" +
			"             └─ IndexedTableAccess(two_pk)\n" +
			"                 ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"                 ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT one_pk.c5,pk1,pk2 FROM one_pk,two_pk WHERE pk=pk1 ORDER BY 1,2,3`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.c5:1, two_pk.pk1:2!null, two_pk.pk2:3!null]\n" +
			" └─ Sort(one_pk.c5:1 ASC nullsFirst, two_pk.pk1:2!null ASC nullsFirst, two_pk.pk2:3!null ASC nullsFirst)\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ one_pk.pk:0!null\n" +
			"         │   └─ two_pk.pk1:2!null\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ static: [{[NULL, ∞)}]\n" +
			"         │   ├─ colSet: (1-6)\n" +
			"         │   ├─ tableId: 1\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: one_pk\n" +
			"         │       └─ columns: [pk c5]\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             ├─ colSet: (7-13)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.c5, two_pk.pk1, two_pk.pk2]\n" +
			" └─ Sort(one_pk.c5 ASC, two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [pk c5]\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.c5, two_pk.pk1, two_pk.pk2]\n" +
			" └─ Sort(one_pk.c5 ASC, two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			"     └─ MergeJoin\n" +
			"         ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [pk c5]\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT * FROM niltable WHERE i2 = NULL`,
		ExpectedPlan: "Filter\n" +
			" ├─ Eq\n" +
			" │   ├─ niltable.i2:1\n" +
			" │   └─ NULL (null)\n" +
			" └─ IndexedTableAccess(niltable)\n" +
			"     ├─ index: [niltable.i2]\n" +
			"     ├─ static: [{(∞, ∞)}]\n" +
			"     ├─ colSet: (1-4)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: niltable\n" +
			"         └─ columns: [i i2 b f]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (niltable.i2 = NULL)\n" +
			" └─ IndexedTableAccess(niltable)\n" +
			"     ├─ index: [niltable.i2]\n" +
			"     ├─ filters: [{(∞, ∞)}]\n" +
			"     └─ columns: [i i2 b f]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (niltable.i2 = NULL)\n" +
			" └─ IndexedTableAccess(niltable)\n" +
			"     ├─ index: [niltable.i2]\n" +
			"     ├─ filters: [{(∞, ∞)}]\n" +
			"     └─ columns: [i i2 b f]\n" +
			"",
	},
	{
		Query: `SELECT * FROM niltable WHERE i2 <> NULL`,
		ExpectedPlan: "Filter\n" +
			" ├─ NOT\n" +
			" │   └─ Eq\n" +
			" │       ├─ niltable.i2:1\n" +
			" │       └─ NULL (null)\n" +
			" └─ IndexedTableAccess(niltable)\n" +
			"     ├─ index: [niltable.i2]\n" +
			"     ├─ static: [{(∞, ∞)}]\n" +
			"     ├─ colSet: (1-4)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: niltable\n" +
			"         └─ columns: [i i2 b f]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (NOT((niltable.i2 = NULL)))\n" +
			" └─ IndexedTableAccess(niltable)\n" +
			"     ├─ index: [niltable.i2]\n" +
			"     ├─ filters: [{(∞, ∞)}]\n" +
			"     └─ columns: [i i2 b f]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (NOT((niltable.i2 = NULL)))\n" +
			" └─ IndexedTableAccess(niltable)\n" +
			"     ├─ index: [niltable.i2]\n" +
			"     ├─ filters: [{(∞, ∞)}]\n" +
			"     └─ columns: [i i2 b f]\n" +
			"",
	},
	{
		Query: `SELECT * FROM niltable WHERE i2 > NULL`,
		ExpectedPlan: "Filter\n" +
			" ├─ GreaterThan\n" +
			" │   ├─ niltable.i2:1\n" +
			" │   └─ NULL (null)\n" +
			" └─ IndexedTableAccess(niltable)\n" +
			"     ├─ index: [niltable.i2]\n" +
			"     ├─ static: [{(∞, ∞)}]\n" +
			"     ├─ colSet: (1-4)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: niltable\n" +
			"         └─ columns: [i i2 b f]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (niltable.i2 > NULL)\n" +
			" └─ IndexedTableAccess(niltable)\n" +
			"     ├─ index: [niltable.i2]\n" +
			"     ├─ filters: [{(∞, ∞)}]\n" +
			"     └─ columns: [i i2 b f]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (niltable.i2 > NULL)\n" +
			" └─ IndexedTableAccess(niltable)\n" +
			"     ├─ index: [niltable.i2]\n" +
			"     ├─ filters: [{(∞, ∞)}]\n" +
			"     └─ columns: [i i2 b f]\n" +
			"",
	},
	{
		Query: `SELECT * FROM niltable WHERE i2 <=> NULL`,
		ExpectedPlan: "Filter\n" +
			" ├─ (niltable.i2:1 <=> NULL (null))\n" +
			" └─ IndexedTableAccess(niltable)\n" +
			"     ├─ index: [niltable.i2]\n" +
			"     ├─ static: [{[NULL, NULL]}]\n" +
			"     ├─ colSet: (1-4)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: niltable\n" +
			"         └─ columns: [i i2 b f]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (niltable.i2 <=> NULL)\n" +
			" └─ IndexedTableAccess(niltable)\n" +
			"     ├─ index: [niltable.i2]\n" +
			"     ├─ filters: [{[NULL, NULL]}]\n" +
			"     └─ columns: [i i2 b f]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (niltable.i2 <=> NULL)\n" +
			" └─ IndexedTableAccess(niltable)\n" +
			"     ├─ index: [niltable.i2]\n" +
			"     ├─ filters: [{[NULL, NULL]}]\n" +
			"     └─ columns: [i i2 b f]\n" +
			"",
	},
	{
		Query: `SELECT pk,i,f FROM one_pk LEFT JOIN niltable ON pk=i ORDER BY 1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, niltable.i:1!null, niltable.f:2]\n" +
			" └─ Sort(one_pk.pk:0!null ASC nullsFirst)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ one_pk.pk:0!null\n" +
			"         │   └─ niltable.i:1!null\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ static: [{[NULL, ∞)}]\n" +
			"         │   ├─ colSet: (1-6)\n" +
			"         │   ├─ tableId: 1\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: one_pk\n" +
			"         │       └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(niltable)\n" +
			"             ├─ index: [niltable.i]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (7-10)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: niltable\n" +
			"                 └─ columns: [i f]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Sort(one_pk.pk ASC)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(niltable)\n" +
			"             ├─ index: [niltable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [i f]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Sort(one_pk.pk ASC)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(niltable)\n" +
			"             ├─ index: [niltable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [i f]\n" +
			"",
	},
	{
		Query: `SELECT pk,i,f FROM one_pk LEFT JOIN niltable ON pk=i WHERE f IS NOT NULL ORDER BY 1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, niltable.i:1!null, niltable.f:2]\n" +
			" └─ Sort(one_pk.pk:0!null ASC nullsFirst)\n" +
			"     └─ Filter\n" +
			"         ├─ NOT\n" +
			"         │   └─ niltable.f:2 IS NULL\n" +
			"         └─ LeftOuterMergeJoin\n" +
			"             ├─ cmp: Eq\n" +
			"             │   ├─ one_pk.pk:0!null\n" +
			"             │   └─ niltable.i:1!null\n" +
			"             ├─ IndexedTableAccess(one_pk)\n" +
			"             │   ├─ index: [one_pk.pk]\n" +
			"             │   ├─ static: [{[NULL, ∞)}]\n" +
			"             │   ├─ colSet: (1-6)\n" +
			"             │   ├─ tableId: 1\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: one_pk\n" +
			"             │       └─ columns: [pk]\n" +
			"             └─ IndexedTableAccess(niltable)\n" +
			"                 ├─ index: [niltable.i]\n" +
			"                 ├─ static: [{[NULL, ∞)}]\n" +
			"                 ├─ colSet: (7-10)\n" +
			"                 ├─ tableId: 2\n" +
			"                 └─ Table\n" +
			"                     ├─ name: niltable\n" +
			"                     └─ columns: [i f]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Sort(one_pk.pk ASC)\n" +
			"     └─ Filter\n" +
			"         ├─ (NOT(niltable.f IS NULL))\n" +
			"         └─ LeftOuterMergeJoin\n" +
			"             ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"             ├─ IndexedTableAccess(one_pk)\n" +
			"             │   ├─ index: [one_pk.pk]\n" +
			"             │   ├─ filters: [{[NULL, ∞)}]\n" +
			"             │   └─ columns: [pk]\n" +
			"             └─ IndexedTableAccess(niltable)\n" +
			"                 ├─ index: [niltable.i]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 └─ columns: [i f]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Sort(one_pk.pk ASC)\n" +
			"     └─ Filter\n" +
			"         ├─ (NOT(niltable.f IS NULL))\n" +
			"         └─ LeftOuterMergeJoin\n" +
			"             ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"             ├─ IndexedTableAccess(one_pk)\n" +
			"             │   ├─ index: [one_pk.pk]\n" +
			"             │   ├─ filters: [{[NULL, ∞)}]\n" +
			"             │   └─ columns: [pk]\n" +
			"             └─ IndexedTableAccess(niltable)\n" +
			"                 ├─ index: [niltable.i]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 └─ columns: [i f]\n" +
			"",
	},
	{
		Query: `SELECT pk,i,f FROM one_pk LEFT JOIN niltable ON pk=i WHERE pk > 1 ORDER BY 1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, niltable.i:1!null, niltable.f:2]\n" +
			" └─ Sort(one_pk.pk:0!null ASC nullsFirst)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ one_pk.pk:0!null\n" +
			"         │   └─ niltable.i:1!null\n" +
			"         ├─ Filter\n" +
			"         │   ├─ GreaterThan\n" +
			"         │   │   ├─ one_pk.pk:0!null\n" +
			"         │   │   └─ 1 (smallint)\n" +
			"         │   └─ IndexedTableAccess(one_pk)\n" +
			"         │       ├─ index: [one_pk.pk]\n" +
			"         │       ├─ static: [{[NULL, ∞)}]\n" +
			"         │       ├─ colSet: (1-6)\n" +
			"         │       ├─ tableId: 1\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: one_pk\n" +
			"         │           └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(niltable)\n" +
			"             ├─ index: [niltable.i]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (7-10)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: niltable\n" +
			"                 └─ columns: [i f]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Sort(one_pk.pk ASC)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"         ├─ Filter\n" +
			"         │   ├─ (one_pk.pk > 1)\n" +
			"         │   └─ IndexedTableAccess(one_pk)\n" +
			"         │       ├─ index: [one_pk.pk]\n" +
			"         │       ├─ filters: [{[NULL, ∞)}]\n" +
			"         │       └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(niltable)\n" +
			"             ├─ index: [niltable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [i f]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Sort(one_pk.pk ASC)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: (one_pk.pk = niltable.i)\n" +
			"         ├─ Filter\n" +
			"         │   ├─ (one_pk.pk > 1)\n" +
			"         │   └─ IndexedTableAccess(one_pk)\n" +
			"         │       ├─ index: [one_pk.pk]\n" +
			"         │       ├─ filters: [{[NULL, ∞)}]\n" +
			"         │       └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(niltable)\n" +
			"             ├─ index: [niltable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [i f]\n" +
			"",
	},
	{
		Query: `SELECT pk,i,f FROM one_pk RIGHT JOIN niltable ON pk=i ORDER BY 2,3`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:2!null, niltable.i:0!null, niltable.f:1]\n" +
			" └─ Sort(niltable.i:0!null ASC nullsFirst, niltable.f:1 ASC nullsFirst)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ niltable.i:0!null\n" +
			"         │   └─ one_pk.pk:2!null\n" +
			"         ├─ IndexedTableAccess(niltable)\n" +
			"         │   ├─ index: [niltable.i]\n" +
			"         │   ├─ static: [{[NULL, ∞)}]\n" +
			"         │   ├─ colSet: (7-10)\n" +
			"         │   ├─ tableId: 2\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: niltable\n" +
			"         │       └─ columns: [i f]\n" +
			"         └─ IndexedTableAccess(one_pk)\n" +
			"             ├─ index: [one_pk.pk]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (1-6)\n" +
			"             ├─ tableId: 1\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Sort(niltable.i ASC, niltable.f ASC)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: (niltable.i = one_pk.pk)\n" +
			"         ├─ IndexedTableAccess(niltable)\n" +
			"         │   ├─ index: [niltable.i]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [i f]\n" +
			"         └─ IndexedTableAccess(one_pk)\n" +
			"             ├─ index: [one_pk.pk]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Sort(niltable.i ASC, niltable.f ASC)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: (niltable.i = one_pk.pk)\n" +
			"         ├─ IndexedTableAccess(niltable)\n" +
			"         │   ├─ index: [niltable.i]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [i f]\n" +
			"         └─ IndexedTableAccess(one_pk)\n" +
			"             ├─ index: [one_pk.pk]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT pk,i,f FROM one_pk RIGHT JOIN niltable ON pk=i WHERE f IS NOT NULL ORDER BY 2,3`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:2!null, niltable.i:0!null, niltable.f:1]\n" +
			" └─ Sort(niltable.i:0!null ASC nullsFirst, niltable.f:1 ASC nullsFirst)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ niltable.i:0!null\n" +
			"         │   └─ one_pk.pk:2!null\n" +
			"         ├─ Filter\n" +
			"         │   ├─ NOT\n" +
			"         │   │   └─ niltable.f:1 IS NULL\n" +
			"         │   └─ IndexedTableAccess(niltable)\n" +
			"         │       ├─ index: [niltable.i]\n" +
			"         │       ├─ static: [{[NULL, ∞)}]\n" +
			"         │       ├─ colSet: (7-10)\n" +
			"         │       ├─ tableId: 2\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: niltable\n" +
			"         │           └─ columns: [i f]\n" +
			"         └─ IndexedTableAccess(one_pk)\n" +
			"             ├─ index: [one_pk.pk]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (1-6)\n" +
			"             ├─ tableId: 1\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Sort(niltable.i ASC, niltable.f ASC)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: (niltable.i = one_pk.pk)\n" +
			"         ├─ Filter\n" +
			"         │   ├─ (NOT(niltable.f IS NULL))\n" +
			"         │   └─ IndexedTableAccess(niltable)\n" +
			"         │       ├─ index: [niltable.i]\n" +
			"         │       ├─ filters: [{[NULL, ∞)}]\n" +
			"         │       └─ columns: [i f]\n" +
			"         └─ IndexedTableAccess(one_pk)\n" +
			"             ├─ index: [one_pk.pk]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Sort(niltable.i ASC, niltable.f ASC)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: (niltable.i = one_pk.pk)\n" +
			"         ├─ Filter\n" +
			"         │   ├─ (NOT(niltable.f IS NULL))\n" +
			"         │   └─ IndexedTableAccess(niltable)\n" +
			"         │       ├─ index: [niltable.i]\n" +
			"         │       ├─ filters: [{[NULL, ∞)}]\n" +
			"         │       └─ columns: [i f]\n" +
			"         └─ IndexedTableAccess(one_pk)\n" +
			"             ├─ index: [one_pk.pk]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT pk,i,f FROM one_pk RIGHT JOIN niltable ON pk=i WHERE pk > 0 ORDER BY 2,3`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:2!null, niltable.i:0!null, niltable.f:1]\n" +
			" └─ Sort(niltable.i:0!null ASC nullsFirst, niltable.f:1 ASC nullsFirst)\n" +
			"     └─ Filter\n" +
			"         ├─ GreaterThan\n" +
			"         │   ├─ one_pk.pk:2!null\n" +
			"         │   └─ 0 (smallint)\n" +
			"         └─ LeftOuterMergeJoin\n" +
			"             ├─ cmp: Eq\n" +
			"             │   ├─ niltable.i:0!null\n" +
			"             │   └─ one_pk.pk:2!null\n" +
			"             ├─ IndexedTableAccess(niltable)\n" +
			"             │   ├─ index: [niltable.i]\n" +
			"             │   ├─ static: [{[NULL, ∞)}]\n" +
			"             │   ├─ colSet: (7-10)\n" +
			"             │   ├─ tableId: 2\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: niltable\n" +
			"             │       └─ columns: [i f]\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ static: [{[NULL, ∞)}]\n" +
			"                 ├─ colSet: (1-6)\n" +
			"                 ├─ tableId: 1\n" +
			"                 └─ Table\n" +
			"                     ├─ name: one_pk\n" +
			"                     └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Sort(niltable.i ASC, niltable.f ASC)\n" +
			"     └─ Filter\n" +
			"         ├─ (one_pk.pk > 0)\n" +
			"         └─ LeftOuterMergeJoin\n" +
			"             ├─ cmp: (niltable.i = one_pk.pk)\n" +
			"             ├─ IndexedTableAccess(niltable)\n" +
			"             │   ├─ index: [niltable.i]\n" +
			"             │   ├─ filters: [{[NULL, ∞)}]\n" +
			"             │   └─ columns: [i f]\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Sort(niltable.i ASC, niltable.f ASC)\n" +
			"     └─ Filter\n" +
			"         ├─ (one_pk.pk > 0)\n" +
			"         └─ LeftOuterMergeJoin\n" +
			"             ├─ cmp: (niltable.i = one_pk.pk)\n" +
			"             ├─ IndexedTableAccess(niltable)\n" +
			"             │   ├─ index: [niltable.i]\n" +
			"             │   ├─ filters: [{[NULL, ∞)}]\n" +
			"             │   └─ columns: [i f]\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT pk,i,f FROM one_pk RIGHT JOIN niltable ON pk=i and pk > 0 ORDER BY 2,3`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:2!null, niltable.i:0!null, niltable.f:1]\n" +
			" └─ Sort(niltable.i:0!null ASC nullsFirst, niltable.f:1 ASC nullsFirst)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ niltable.i:0!null\n" +
			"         │   └─ one_pk.pk:2!null\n" +
			"         ├─ sel: GreaterThan\n" +
			"         │   ├─ one_pk.pk:2!null\n" +
			"         │   └─ 0 (smallint)\n" +
			"         ├─ IndexedTableAccess(niltable)\n" +
			"         │   ├─ index: [niltable.i]\n" +
			"         │   ├─ static: [{[NULL, ∞)}]\n" +
			"         │   ├─ colSet: (7-10)\n" +
			"         │   ├─ tableId: 2\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: niltable\n" +
			"         │       └─ columns: [i f]\n" +
			"         └─ IndexedTableAccess(one_pk)\n" +
			"             ├─ index: [one_pk.pk]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (1-6)\n" +
			"             ├─ tableId: 1\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Sort(niltable.i ASC, niltable.f ASC)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: (niltable.i = one_pk.pk)\n" +
			"         ├─ sel: (one_pk.pk > 0)\n" +
			"         ├─ IndexedTableAccess(niltable)\n" +
			"         │   ├─ index: [niltable.i]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [i f]\n" +
			"         └─ IndexedTableAccess(one_pk)\n" +
			"             ├─ index: [one_pk.pk]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, niltable.i, niltable.f]\n" +
			" └─ Sort(niltable.i ASC, niltable.f ASC)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: (niltable.i = one_pk.pk)\n" +
			"         ├─ sel: (one_pk.pk > 0)\n" +
			"         ├─ IndexedTableAccess(niltable)\n" +
			"         │   ├─ index: [niltable.i]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [i f]\n" +
			"         └─ IndexedTableAccess(one_pk)\n" +
			"             ├─ index: [one_pk.pk]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk JOIN two_pk ON one_pk.pk=two_pk.pk1 AND one_pk.pk=two_pk.pk2 ORDER BY 1,2,3`,
		ExpectedPlan: "Sort(one_pk.pk:0!null ASC nullsFirst, two_pk.pk1:1!null ASC nullsFirst, two_pk.pk2:2!null ASC nullsFirst)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ one_pk.pk:0!null\n" +
			"     │   └─ two_pk.pk1:1!null\n" +
			"     ├─ sel: Eq\n" +
			"     │   ├─ one_pk.pk:0!null\n" +
			"     │   └─ two_pk.pk2:2!null\n" +
			"     ├─ IndexedTableAccess(one_pk)\n" +
			"     │   ├─ index: [one_pk.pk]\n" +
			"     │   ├─ static: [{[NULL, ∞)}]\n" +
			"     │   ├─ colSet: (1-6)\n" +
			"     │   ├─ tableId: 1\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: one_pk\n" +
			"     │       └─ columns: [pk]\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         ├─ colSet: (7-13)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: two_pk\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Sort(one_pk.pk ASC, two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			"     ├─ sel: (one_pk.pk = two_pk.pk2)\n" +
			"     ├─ IndexedTableAccess(one_pk)\n" +
			"     │   ├─ index: [one_pk.pk]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [pk]\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Sort(one_pk.pk ASC, two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			"     ├─ sel: (one_pk.pk = two_pk.pk2)\n" +
			"     ├─ IndexedTableAccess(one_pk)\n" +
			"     │   ├─ index: [one_pk.pk]\n" +
			"     │   ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   └─ columns: [pk]\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk JOIN two_pk ON pk1-pk>0 AND pk2<1`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:2!null, two_pk.pk1:0!null, two_pk.pk2:1!null]\n" +
			" └─ InnerJoin\n" +
			"     ├─ GreaterThan\n" +
			"     │   ├─ (two_pk.pk1:0!null - one_pk.pk:2!null)\n" +
			"     │   └─ 0 (tinyint)\n" +
			"     ├─ Filter\n" +
			"     │   ├─ LessThan\n" +
			"     │   │   ├─ two_pk.pk2:1!null\n" +
			"     │   │   └─ 1 (tinyint)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: two_pk\n" +
			"     │           └─ columns: [pk1 pk2]\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: one_pk\n" +
			"             └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ InnerJoin (estimated cost=13.120 rows=3)\n" +
			"     ├─ ((two_pk.pk1 - one_pk.pk) > 0)\n" +
			"     ├─ Filter\n" +
			"     │   ├─ (two_pk.pk2 < 1)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: two_pk\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ Table\n" +
			"         ├─ name: one_pk\n" +
			"         └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ InnerJoin (estimated cost=13.120 rows=3) (actual rows=1 loops=1)\n" +
			"     ├─ ((two_pk.pk1 - one_pk.pk) > 0)\n" +
			"     ├─ Filter\n" +
			"     │   ├─ (two_pk.pk2 < 1)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: two_pk\n" +
			"     │       └─ columns: [pk1 pk2]\n" +
			"     └─ Table\n" +
			"         ├─ name: one_pk\n" +
			"         └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk JOIN two_pk ORDER BY 1,2,3`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:2!null, two_pk.pk1:0!null, two_pk.pk2:1!null]\n" +
			" └─ Sort(one_pk.pk:2!null ASC nullsFirst, two_pk.pk1:0!null ASC nullsFirst, two_pk.pk2:1!null ASC nullsFirst)\n" +
			"     └─ CrossJoin\n" +
			"         ├─ ProcessTable\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: two_pk\n" +
			"         │       └─ columns: [pk1 pk2]\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ Sort(one_pk.pk ASC, two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			"     └─ CrossJoin\n" +
			"         ├─ Table\n" +
			"         │   ├─ name: two_pk\n" +
			"         │   └─ columns: [pk1 pk2]\n" +
			"         └─ Table\n" +
			"             ├─ name: one_pk\n" +
			"             └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ Sort(one_pk.pk ASC, two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			"     └─ CrossJoin\n" +
			"         ├─ Table\n" +
			"         │   ├─ name: two_pk\n" +
			"         │   └─ columns: [pk1 pk2]\n" +
			"         └─ Table\n" +
			"             ├─ name: one_pk\n" +
			"             └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk LEFT JOIN two_pk ON one_pk.pk=two_pk.pk1 AND one_pk.pk=two_pk.pk2 ORDER BY 1,2,3`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, two_pk.pk1:1!null, two_pk.pk2:2!null]\n" +
			" └─ Sort(one_pk.pk:0!null ASC nullsFirst, two_pk.pk1:1!null ASC nullsFirst, two_pk.pk2:2!null ASC nullsFirst)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ one_pk.pk:0!null\n" +
			"         │   └─ two_pk.pk1:1!null\n" +
			"         ├─ sel: Eq\n" +
			"         │   ├─ one_pk.pk:0!null\n" +
			"         │   └─ two_pk.pk2:2!null\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ static: [{[NULL, ∞)}]\n" +
			"         │   ├─ colSet: (1-6)\n" +
			"         │   ├─ tableId: 1\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: one_pk\n" +
			"         │       └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             ├─ colSet: (7-13)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ Sort(one_pk.pk ASC, two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			"         ├─ sel: (one_pk.pk = two_pk.pk2)\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ Sort(one_pk.pk ASC, two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			"         ├─ sel: (one_pk.pk = two_pk.pk2)\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk LEFT JOIN two_pk ON pk=pk1 ORDER BY 1,2,3`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, two_pk.pk1:1!null, two_pk.pk2:2!null]\n" +
			" └─ Sort(one_pk.pk:0!null ASC nullsFirst, two_pk.pk1:1!null ASC nullsFirst, two_pk.pk2:2!null ASC nullsFirst)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ one_pk.pk:0!null\n" +
			"         │   └─ two_pk.pk1:1!null\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ static: [{[NULL, ∞)}]\n" +
			"         │   ├─ colSet: (1-6)\n" +
			"         │   ├─ tableId: 1\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: one_pk\n" +
			"         │       └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             ├─ colSet: (7-13)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ Sort(one_pk.pk ASC, two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ Sort(one_pk.pk ASC, two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: (one_pk.pk = two_pk.pk1)\n" +
			"         ├─ IndexedTableAccess(one_pk)\n" +
			"         │   ├─ index: [one_pk.pk]\n" +
			"         │   ├─ filters: [{[NULL, ∞)}]\n" +
			"         │   └─ columns: [pk]\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk RIGHT JOIN two_pk ON one_pk.pk=two_pk.pk1 AND one_pk.pk=two_pk.pk2 ORDER BY 1,2,3`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:2!null, two_pk.pk1:0!null, two_pk.pk2:1!null]\n" +
			" └─ Sort(one_pk.pk:2!null ASC nullsFirst, two_pk.pk1:0!null ASC nullsFirst, two_pk.pk2:1!null ASC nullsFirst)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: Eq\n" +
			"         │   ├─ TUPLE(two_pk.pk1:0!null, two_pk.pk2:1!null)\n" +
			"         │   └─ TUPLE(one_pk.pk:2!null, one_pk.pk:2!null)\n" +
			"         ├─ IndexedTableAccess(two_pk)\n" +
			"         │   ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         │   ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │   ├─ colSet: (7-13)\n" +
			"         │   ├─ tableId: 2\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: two_pk\n" +
			"         │       └─ columns: [pk1 pk2]\n" +
			"         └─ IndexedTableAccess(one_pk)\n" +
			"             ├─ index: [one_pk.pk]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (1-6)\n" +
			"             ├─ tableId: 1\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ Sort(one_pk.pk ASC, two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: ((two_pk.pk1, two_pk.pk2) = (one_pk.pk, one_pk.pk))\n" +
			"         ├─ IndexedTableAccess(two_pk)\n" +
			"         │   ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │   └─ columns: [pk1 pk2]\n" +
			"         └─ IndexedTableAccess(one_pk)\n" +
			"             ├─ index: [one_pk.pk]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ Sort(one_pk.pk ASC, two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			"     └─ LeftOuterMergeJoin\n" +
			"         ├─ cmp: ((two_pk.pk1, two_pk.pk2) = (one_pk.pk, one_pk.pk))\n" +
			"         ├─ IndexedTableAccess(two_pk)\n" +
			"         │   ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         │   ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │   └─ columns: [pk1 pk2]\n" +
			"         └─ IndexedTableAccess(one_pk)\n" +
			"             ├─ index: [one_pk.pk]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk opk JOIN two_pk tpk ON opk.pk=tpk.pk1 AND opk.pk=tpk.pk2 ORDER BY 1,2,3`,
		ExpectedPlan: "Sort(opk.pk:0!null ASC nullsFirst, tpk.pk1:1!null ASC nullsFirst, tpk.pk2:2!null ASC nullsFirst)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ opk.pk:0!null\n" +
			"     │   └─ tpk.pk1:1!null\n" +
			"     ├─ sel: Eq\n" +
			"     │   ├─ opk.pk:0!null\n" +
			"     │   └─ tpk.pk2:2!null\n" +
			"     ├─ TableAlias(opk)\n" +
			"     │   └─ IndexedTableAccess(one_pk)\n" +
			"     │       ├─ index: [one_pk.pk]\n" +
			"     │       ├─ static: [{[NULL, ∞)}]\n" +
			"     │       ├─ colSet: (1-6)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: one_pk\n" +
			"     │           └─ columns: [pk]\n" +
			"     └─ TableAlias(tpk)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             ├─ colSet: (7-13)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Sort(opk.pk ASC, tpk.pk1 ASC, tpk.pk2 ASC)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: (opk.pk = tpk.pk1)\n" +
			"     ├─ sel: (opk.pk = tpk.pk2)\n" +
			"     ├─ TableAlias(opk)\n" +
			"     │   └─ IndexedTableAccess(one_pk)\n" +
			"     │       ├─ index: [one_pk.pk]\n" +
			"     │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │       └─ columns: [pk]\n" +
			"     └─ TableAlias(tpk)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Sort(opk.pk ASC, tpk.pk1 ASC, tpk.pk2 ASC)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: (opk.pk = tpk.pk1)\n" +
			"     ├─ sel: (opk.pk = tpk.pk2)\n" +
			"     ├─ TableAlias(opk)\n" +
			"     │   └─ IndexedTableAccess(one_pk)\n" +
			"     │       ├─ index: [one_pk.pk]\n" +
			"     │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │       └─ columns: [pk]\n" +
			"     └─ TableAlias(tpk)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk opk JOIN two_pk tpk ON pk=tpk.pk1 AND pk=tpk.pk2 ORDER BY 1,2,3`,
		ExpectedPlan: "Sort(opk.pk:0!null ASC nullsFirst, tpk.pk1:1!null ASC nullsFirst, tpk.pk2:2!null ASC nullsFirst)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ opk.pk:0!null\n" +
			"     │   └─ tpk.pk1:1!null\n" +
			"     ├─ sel: Eq\n" +
			"     │   ├─ opk.pk:0!null\n" +
			"     │   └─ tpk.pk2:2!null\n" +
			"     ├─ TableAlias(opk)\n" +
			"     │   └─ IndexedTableAccess(one_pk)\n" +
			"     │       ├─ index: [one_pk.pk]\n" +
			"     │       ├─ static: [{[NULL, ∞)}]\n" +
			"     │       ├─ colSet: (1-6)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: one_pk\n" +
			"     │           └─ columns: [pk]\n" +
			"     └─ TableAlias(tpk)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             ├─ colSet: (7-13)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Sort(opk.pk ASC, tpk.pk1 ASC, tpk.pk2 ASC)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: (opk.pk = tpk.pk1)\n" +
			"     ├─ sel: (opk.pk = tpk.pk2)\n" +
			"     ├─ TableAlias(opk)\n" +
			"     │   └─ IndexedTableAccess(one_pk)\n" +
			"     │       ├─ index: [one_pk.pk]\n" +
			"     │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │       └─ columns: [pk]\n" +
			"     └─ TableAlias(tpk)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Sort(opk.pk ASC, tpk.pk1 ASC, tpk.pk2 ASC)\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: (opk.pk = tpk.pk1)\n" +
			"     ├─ sel: (opk.pk = tpk.pk2)\n" +
			"     ├─ TableAlias(opk)\n" +
			"     │   └─ IndexedTableAccess(one_pk)\n" +
			"     │       ├─ index: [one_pk.pk]\n" +
			"     │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │       └─ columns: [pk]\n" +
			"     └─ TableAlias(tpk)\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk,two_pk WHERE one_pk.c1=two_pk.c1 ORDER BY 1,2,3`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, two_pk.pk1:2!null, two_pk.pk2:3!null]\n" +
			" └─ Sort(one_pk.pk:0!null ASC nullsFirst, two_pk.pk1:2!null ASC nullsFirst, two_pk.pk2:3!null ASC nullsFirst)\n" +
			"     └─ HashJoin\n" +
			"         ├─ Eq\n" +
			"         │   ├─ one_pk.c1:1\n" +
			"         │   └─ two_pk.c1:4!null\n" +
			"         ├─ ProcessTable\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: one_pk\n" +
			"         │       └─ columns: [pk c1]\n" +
			"         └─ HashLookup\n" +
			"             ├─ left-key: TUPLE(one_pk.c1:1)\n" +
			"             ├─ right-key: TUPLE(two_pk.c1:2!null)\n" +
			"             └─ ProcessTable\n" +
			"                 └─ Table\n" +
			"                     ├─ name: two_pk\n" +
			"                     └─ columns: [pk1 pk2 c1]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ Sort(one_pk.pk ASC, two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			"     └─ HashJoin\n" +
			"         ├─ (one_pk.c1 = two_pk.c1)\n" +
			"         ├─ Table\n" +
			"         │   ├─ name: one_pk\n" +
			"         │   └─ columns: [pk c1]\n" +
			"         └─ HashLookup\n" +
			"             ├─ left-key: (one_pk.c1)\n" +
			"             ├─ right-key: (two_pk.c1)\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2 c1]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2]\n" +
			" └─ Sort(one_pk.pk ASC, two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			"     └─ HashJoin\n" +
			"         ├─ (one_pk.c1 = two_pk.c1)\n" +
			"         ├─ Table\n" +
			"         │   ├─ name: one_pk\n" +
			"         │   └─ columns: [pk c1]\n" +
			"         └─ HashLookup\n" +
			"             ├─ left-key: (one_pk.c1)\n" +
			"             ├─ right-key: (two_pk.c1)\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2 c1]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2,one_pk.c1 AS foo, two_pk.c1 AS bar FROM one_pk JOIN two_pk ON one_pk.c1=two_pk.c1 ORDER BY 1,2,3`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:0!null, two_pk.pk1:6!null, two_pk.pk2:7!null, one_pk.c1:1 as foo, two_pk.c1:8!null as bar]\n" +
			" └─ Sort(one_pk.pk:0!null ASC nullsFirst, two_pk.pk1:6!null ASC nullsFirst, two_pk.pk2:7!null ASC nullsFirst)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [one_pk.pk:0!null, one_pk.c1:1, one_pk.c2:2, one_pk.c3:3, one_pk.c4:4, one_pk.c5:5, two_pk.pk1:6!null, two_pk.pk2:7!null, two_pk.c1:8!null, two_pk.c2:9!null, two_pk.c3:10!null, two_pk.c4:11!null, two_pk.c5:12!null, one_pk.c1:1 as foo, two_pk.c1:8!null as bar]\n" +
			"         └─ HashJoin\n" +
			"             ├─ Eq\n" +
			"             │   ├─ one_pk.c1:1\n" +
			"             │   └─ two_pk.c1:8!null\n" +
			"             ├─ ProcessTable\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: one_pk\n" +
			"             │       └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"             └─ HashLookup\n" +
			"                 ├─ left-key: TUPLE(one_pk.c1:1)\n" +
			"                 ├─ right-key: TUPLE(two_pk.c1:2!null)\n" +
			"                 └─ ProcessTable\n" +
			"                     └─ Table\n" +
			"                         ├─ name: two_pk\n" +
			"                         └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2, one_pk.c1 as foo, two_pk.c1 as bar]\n" +
			" └─ Sort(one_pk.pk ASC, two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [one_pk.pk, one_pk.c1, one_pk.c2, one_pk.c3, one_pk.c4, one_pk.c5, two_pk.pk1, two_pk.pk2, two_pk.c1, two_pk.c2, two_pk.c3, two_pk.c4, two_pk.c5, one_pk.c1 as foo, two_pk.c1 as bar]\n" +
			"         └─ HashJoin\n" +
			"             ├─ (one_pk.c1 = two_pk.c1)\n" +
			"             ├─ Table\n" +
			"             │   ├─ name: one_pk\n" +
			"             │   └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"             └─ HashLookup\n" +
			"                 ├─ left-key: (one_pk.c1)\n" +
			"                 ├─ right-key: (two_pk.c1)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: two_pk\n" +
			"                     └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2, one_pk.c1 as foo, two_pk.c1 as bar]\n" +
			" └─ Sort(one_pk.pk ASC, two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [one_pk.pk, one_pk.c1, one_pk.c2, one_pk.c3, one_pk.c4, one_pk.c5, two_pk.pk1, two_pk.pk2, two_pk.c1, two_pk.c2, two_pk.c3, two_pk.c4, two_pk.c5, one_pk.c1 as foo, two_pk.c1 as bar]\n" +
			"         └─ HashJoin\n" +
			"             ├─ (one_pk.c1 = two_pk.c1)\n" +
			"             ├─ Table\n" +
			"             │   ├─ name: one_pk\n" +
			"             │   └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"             └─ HashLookup\n" +
			"                 ├─ left-key: (one_pk.c1)\n" +
			"                 ├─ right-key: (two_pk.c1)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: two_pk\n" +
			"                     └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2,one_pk.c1 AS foo,two_pk.c1 AS bar FROM one_pk JOIN two_pk ON one_pk.c1=two_pk.c1 WHERE one_pk.c1=10`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [one_pk.pk:3!null, two_pk.pk1:0!null, two_pk.pk2:1!null, one_pk.c1:4 as foo, two_pk.c1:2!null as bar]\n" +
			" └─ HashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ one_pk.c1:4\n" +
			"     │   └─ two_pk.c1:2!null\n" +
			"     ├─ ProcessTable\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: two_pk\n" +
			"     │       └─ columns: [pk1 pk2 c1]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(two_pk.c1:2!null)\n" +
			"         ├─ right-key: TUPLE(one_pk.c1:1)\n" +
			"         └─ Filter\n" +
			"             ├─ Eq\n" +
			"             │   ├─ one_pk.c1:1\n" +
			"             │   └─ 10 (smallint)\n" +
			"             └─ ProcessTable\n" +
			"                 └─ Table\n" +
			"                     ├─ name: one_pk\n" +
			"                     └─ columns: [pk c1]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2, one_pk.c1 as foo, two_pk.c1 as bar]\n" +
			" └─ HashJoin (estimated cost=13.070 rows=3)\n" +
			"     ├─ (one_pk.c1 = two_pk.c1)\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: two_pk\n" +
			"     │   └─ columns: [pk1 pk2 c1]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (two_pk.c1)\n" +
			"         ├─ right-key: (one_pk.c1)\n" +
			"         └─ Filter\n" +
			"             ├─ (one_pk.c1 = 10)\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk c1]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [one_pk.pk, two_pk.pk1, two_pk.pk2, one_pk.c1 as foo, two_pk.c1 as bar]\n" +
			" └─ HashJoin (estimated cost=13.070 rows=3) (actual rows=1 loops=1)\n" +
			"     ├─ (one_pk.c1 = two_pk.c1)\n" +
			"     ├─ Table\n" +
			"     │   ├─ name: two_pk\n" +
			"     │   └─ columns: [pk1 pk2 c1]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (two_pk.c1)\n" +
			"         ├─ right-key: (one_pk.c1)\n" +
			"         └─ Filter\n" +
			"             ├─ (one_pk.c1 = 10)\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk c1]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk2 FROM one_pk t1, two_pk t2 WHERE pk=1 AND pk2=1 ORDER BY 1,2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [t1.pk:1!null, t2.pk2:0!null]\n" +
			" └─ Sort(t1.pk:1!null ASC nullsFirst, t2.pk2:0!null ASC nullsFirst)\n" +
			"     └─ CrossJoin\n" +
			"         ├─ Filter\n" +
			"         │   ├─ Eq\n" +
			"         │   │   ├─ t2.pk2:0!null\n" +
			"         │   │   └─ 1 (tinyint)\n" +
			"         │   └─ TableAlias(t2)\n" +
			"         │       └─ ProcessTable\n" +
			"         │           └─ Table\n" +
			"         │               ├─ name: two_pk\n" +
			"         │               └─ columns: [pk2]\n" +
			"         └─ TableAlias(t1)\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ static: [{[1, 1]}]\n" +
			"                 ├─ colSet: (1-6)\n" +
			"                 ├─ tableId: 1\n" +
			"                 └─ Table\n" +
			"                     ├─ name: one_pk\n" +
			"                     └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [t1.pk, t2.pk2]\n" +
			" └─ Sort(t1.pk ASC, t2.pk2 ASC)\n" +
			"     └─ CrossJoin\n" +
			"         ├─ Filter\n" +
			"         │   ├─ (t2.pk2 = 1)\n" +
			"         │   └─ TableAlias(t2)\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: two_pk\n" +
			"         │           └─ columns: [pk2]\n" +
			"         └─ TableAlias(t1)\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ filters: [{[1, 1]}]\n" +
			"                 └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [t1.pk, t2.pk2]\n" +
			" └─ Sort(t1.pk ASC, t2.pk2 ASC)\n" +
			"     └─ CrossJoin\n" +
			"         ├─ Filter\n" +
			"         │   ├─ (t2.pk2 = 1)\n" +
			"         │   └─ TableAlias(t2)\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: two_pk\n" +
			"         │           └─ columns: [pk2]\n" +
			"         └─ TableAlias(t1)\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ filters: [{[1, 1]}]\n" +
			"                 └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk t1, two_pk t2 WHERE pk=1 AND pk2=1 AND pk1=1 ORDER BY 1,2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [t1.pk:2!null, t2.pk1:0!null, t2.pk2:1!null]\n" +
			" └─ Sort(t1.pk:2!null ASC nullsFirst, t2.pk1:0!null ASC nullsFirst)\n" +
			"     └─ CrossJoin\n" +
			"         ├─ TableAlias(t2)\n" +
			"         │   └─ IndexedTableAccess(two_pk)\n" +
			"         │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         │       ├─ static: [{[1, 1], [1, 1]}]\n" +
			"         │       ├─ colSet: (7-13)\n" +
			"         │       ├─ tableId: 2\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: two_pk\n" +
			"         │           └─ columns: [pk1 pk2]\n" +
			"         └─ TableAlias(t1)\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ static: [{[1, 1]}]\n" +
			"                 ├─ colSet: (1-6)\n" +
			"                 ├─ tableId: 1\n" +
			"                 └─ Table\n" +
			"                     ├─ name: one_pk\n" +
			"                     └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [t1.pk, t2.pk1, t2.pk2]\n" +
			" └─ Sort(t1.pk ASC, t2.pk1 ASC)\n" +
			"     └─ CrossJoin\n" +
			"         ├─ TableAlias(t2)\n" +
			"         │   └─ IndexedTableAccess(two_pk)\n" +
			"         │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         │       ├─ filters: [{[1, 1], [1, 1]}]\n" +
			"         │       └─ columns: [pk1 pk2]\n" +
			"         └─ TableAlias(t1)\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ filters: [{[1, 1]}]\n" +
			"                 └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [t1.pk, t2.pk1, t2.pk2]\n" +
			" └─ Sort(t1.pk ASC, t2.pk1 ASC)\n" +
			"     └─ CrossJoin\n" +
			"         ├─ TableAlias(t2)\n" +
			"         │   └─ IndexedTableAccess(two_pk)\n" +
			"         │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         │       ├─ filters: [{[1, 1], [1, 1]}]\n" +
			"         │       └─ columns: [pk1 pk2]\n" +
			"         └─ TableAlias(t1)\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ filters: [{[1, 1]}]\n" +
			"                 └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT i FROM mytable mt
		WHERE (SELECT i FROM mytable where i = mt.i and i > 2) IS NOT NULL
		AND (SELECT i2 FROM othertable where i2 = i) IS NOT NULL`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mt.i:0!null]\n" +
			" └─ Filter\n" +
			"     ├─ AND\n" +
			"     │   ├─ NOT\n" +
			"     │   │   └─ Subquery\n" +
			"     │   │       ├─ cacheable: false\n" +
			"     │   │       ├─ alias-string: select i from mytable where i = mt.i and i > 2\n" +
			"     │   │       └─ Filter\n" +
			"     │   │           ├─ Eq\n" +
			"     │   │           │   ├─ mytable.i:2!null\n" +
			"     │   │           │   └─ mt.i:0!null\n" +
			"     │   │           └─ IndexedTableAccess(mytable)\n" +
			"     │   │               ├─ index: [mytable.i]\n" +
			"     │   │               ├─ static: [{(2, ∞)}]\n" +
			"     │   │               ├─ colSet: (3,4)\n" +
			"     │   │               ├─ tableId: 2\n" +
			"     │   │               └─ Table\n" +
			"     │   │                   ├─ name: mytable\n" +
			"     │   │                   └─ columns: [i]\n" +
			"     │   │       IS NULL\n" +
			"     │   └─ NOT\n" +
			"     │       └─ Subquery\n" +
			"     │           ├─ cacheable: false\n" +
			"     │           ├─ alias-string: select i2 from othertable where i2 = i\n" +
			"     │           └─ Filter\n" +
			"     │               ├─ Eq\n" +
			"     │               │   ├─ othertable.i2:2!null\n" +
			"     │               │   └─ mt.i:0!null\n" +
			"     │               └─ IndexedTableAccess(othertable)\n" +
			"     │                   ├─ index: [othertable.i2]\n" +
			"     │                   ├─ keys: [mt.i:0!null]\n" +
			"     │                   ├─ colSet: (5,6)\n" +
			"     │                   ├─ tableId: 3\n" +
			"     │                   └─ Table\n" +
			"     │                       ├─ name: othertable\n" +
			"     │                       └─ columns: [i2]\n" +
			"     │           IS NULL\n" +
			"     └─ TableAlias(mt)\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mt.i]\n" +
			" └─ Filter\n" +
			"     ├─ ((NOT(Subquery\n" +
			"     │   ├─ cacheable: false\n" +
			"     │   └─ Filter\n" +
			"     │       ├─ (mytable.i = mt.i)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.i]\n" +
			"     │           ├─ filters: [{(2, ∞)}]\n" +
			"     │           └─ columns: [i]\n" +
			"     │   IS NULL)) AND (NOT(Subquery\n" +
			"     │   ├─ cacheable: false\n" +
			"     │   └─ Filter\n" +
			"     │       ├─ (othertable.i2 = mt.i)\n" +
			"     │       └─ IndexedTableAccess(othertable)\n" +
			"     │           ├─ index: [othertable.i2]\n" +
			"     │           ├─ columns: [i2]\n" +
			"     │           └─ keys: mt.i\n" +
			"     │   IS NULL)))\n" +
			"     └─ TableAlias(mt)\n" +
			"         └─ Table\n" +
			"             └─ name: mytable\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mt.i]\n" +
			" └─ Filter\n" +
			"     ├─ ((NOT(Subquery\n" +
			"     │   ├─ cacheable: false\n" +
			"     │   └─ Filter\n" +
			"     │       ├─ (mytable.i = mt.i)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.i]\n" +
			"     │           ├─ filters: [{(2, ∞)}]\n" +
			"     │           └─ columns: [i]\n" +
			"     │   IS NULL)) AND (NOT(Subquery\n" +
			"     │   ├─ cacheable: false\n" +
			"     │   └─ Filter\n" +
			"     │       ├─ (othertable.i2 = mt.i)\n" +
			"     │       └─ IndexedTableAccess(othertable)\n" +
			"     │           ├─ index: [othertable.i2]\n" +
			"     │           ├─ columns: [i2]\n" +
			"     │           └─ keys: mt.i\n" +
			"     │   IS NULL)))\n" +
			"     └─ TableAlias(mt)\n" +
			"         └─ Table\n" +
			"             └─ name: mytable\n" +
			"",
	},
	{
		Query: `SELECT i FROM mytable mt
		WHERE (SELECT i FROM mytable where i = mt.i) IS NOT NULL
		AND (SELECT i2 FROM othertable where i2 = i and i > 2) IS NOT NULL`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mt.i:0!null]\n" +
			" └─ Filter\n" +
			"     ├─ AND\n" +
			"     │   ├─ NOT\n" +
			"     │   │   └─ Subquery\n" +
			"     │   │       ├─ cacheable: false\n" +
			"     │   │       ├─ alias-string: select i from mytable where i = mt.i\n" +
			"     │   │       └─ Filter\n" +
			"     │   │           ├─ Eq\n" +
			"     │   │           │   ├─ mytable.i:2!null\n" +
			"     │   │           │   └─ mt.i:0!null\n" +
			"     │   │           └─ IndexedTableAccess(mytable)\n" +
			"     │   │               ├─ index: [mytable.i]\n" +
			"     │   │               ├─ keys: [mt.i:0!null]\n" +
			"     │   │               ├─ colSet: (3,4)\n" +
			"     │   │               ├─ tableId: 2\n" +
			"     │   │               └─ Table\n" +
			"     │   │                   ├─ name: mytable\n" +
			"     │   │                   └─ columns: [i]\n" +
			"     │   │       IS NULL\n" +
			"     │   └─ NOT\n" +
			"     │       └─ Subquery\n" +
			"     │           ├─ cacheable: false\n" +
			"     │           ├─ alias-string: select i2 from othertable where i2 = i and i > 2\n" +
			"     │           └─ Filter\n" +
			"     │               ├─ AND\n" +
			"     │               │   ├─ Eq\n" +
			"     │               │   │   ├─ othertable.i2:2!null\n" +
			"     │               │   │   └─ mt.i:0!null\n" +
			"     │               │   └─ GreaterThan\n" +
			"     │               │       ├─ mt.i:0!null\n" +
			"     │               │       └─ 2 (bigint)\n" +
			"     │               └─ IndexedTableAccess(othertable)\n" +
			"     │                   ├─ index: [othertable.i2]\n" +
			"     │                   ├─ keys: [mt.i:0!null]\n" +
			"     │                   ├─ colSet: (5,6)\n" +
			"     │                   ├─ tableId: 3\n" +
			"     │                   └─ Table\n" +
			"     │                       ├─ name: othertable\n" +
			"     │                       └─ columns: [i2]\n" +
			"     │           IS NULL\n" +
			"     └─ TableAlias(mt)\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mt.i]\n" +
			" └─ Filter\n" +
			"     ├─ ((NOT(Subquery\n" +
			"     │   ├─ cacheable: false\n" +
			"     │   └─ Filter\n" +
			"     │       ├─ (mytable.i = mt.i)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.i]\n" +
			"     │           ├─ columns: [i]\n" +
			"     │           └─ keys: mt.i\n" +
			"     │   IS NULL)) AND (NOT(Subquery\n" +
			"     │   ├─ cacheable: false\n" +
			"     │   └─ Filter\n" +
			"     │       ├─ ((othertable.i2 = mt.i) AND (mt.i > 2))\n" +
			"     │       └─ IndexedTableAccess(othertable)\n" +
			"     │           ├─ index: [othertable.i2]\n" +
			"     │           ├─ columns: [i2]\n" +
			"     │           └─ keys: mt.i\n" +
			"     │   IS NULL)))\n" +
			"     └─ TableAlias(mt)\n" +
			"         └─ Table\n" +
			"             └─ name: mytable\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mt.i]\n" +
			" └─ Filter\n" +
			"     ├─ ((NOT(Subquery\n" +
			"     │   ├─ cacheable: false\n" +
			"     │   └─ Filter\n" +
			"     │       ├─ (mytable.i = mt.i)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.i]\n" +
			"     │           ├─ columns: [i]\n" +
			"     │           └─ keys: mt.i\n" +
			"     │   IS NULL)) AND (NOT(Subquery\n" +
			"     │   ├─ cacheable: false\n" +
			"     │   └─ Filter\n" +
			"     │       ├─ ((othertable.i2 = mt.i) AND (mt.i > 2))\n" +
			"     │       └─ IndexedTableAccess(othertable)\n" +
			"     │           ├─ index: [othertable.i2]\n" +
			"     │           ├─ columns: [i2]\n" +
			"     │           └─ keys: mt.i\n" +
			"     │   IS NULL)))\n" +
			"     └─ TableAlias(mt)\n" +
			"         └─ Table\n" +
			"             └─ name: mytable\n" +
			"",
	},
	{
		Query: `SELECT pk,pk2, (SELECT pk from one_pk where pk = 1 limit 1) FROM one_pk t1, two_pk t2 WHERE pk=1 AND pk2=1 ORDER BY 1,2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [t1.pk:7!null, t2.pk2:1!null, Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   ├─ alias-string: select pk from one_pk where pk = 1 limit 1\n" +
			" │   └─ Limit(1)\n" +
			" │       └─ IndexedTableAccess(one_pk)\n" +
			" │           ├─ index: [one_pk.pk]\n" +
			" │           ├─ static: [{[1, 1]}]\n" +
			" │           ├─ colSet: (14-19)\n" +
			" │           ├─ tableId: 3\n" +
			" │           └─ Table\n" +
			" │               ├─ name: one_pk\n" +
			" │               └─ columns: [pk]\n" +
			" │   as (SELECT pk from one_pk where pk = 1 limit 1)]\n" +
			" └─ Sort(t1.pk:7!null ASC nullsFirst, t2.pk2:1!null ASC nullsFirst)\n" +
			"     └─ CrossJoin\n" +
			"         ├─ Filter\n" +
			"         │   ├─ Eq\n" +
			"         │   │   ├─ t2.pk2:1!null\n" +
			"         │   │   └─ 1 (tinyint)\n" +
			"         │   └─ TableAlias(t2)\n" +
			"         │       └─ ProcessTable\n" +
			"         │           └─ Table\n" +
			"         │               ├─ name: two_pk\n" +
			"         │               └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"         └─ TableAlias(t1)\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ static: [{[1, 1]}]\n" +
			"                 ├─ colSet: (1-6)\n" +
			"                 ├─ tableId: 1\n" +
			"                 └─ Table\n" +
			"                     ├─ name: one_pk\n" +
			"                     └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [t1.pk, t2.pk2, Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Limit(1)\n" +
			" │       └─ IndexedTableAccess(one_pk)\n" +
			" │           ├─ index: [one_pk.pk]\n" +
			" │           ├─ filters: [{[1, 1]}]\n" +
			" │           └─ columns: [pk]\n" +
			" │   as (SELECT pk from one_pk where pk = 1 limit 1)]\n" +
			" └─ Sort(t1.pk ASC, t2.pk2 ASC)\n" +
			"     └─ CrossJoin\n" +
			"         ├─ Filter\n" +
			"         │   ├─ (t2.pk2 = 1)\n" +
			"         │   └─ TableAlias(t2)\n" +
			"         │       └─ Table\n" +
			"         │           └─ name: two_pk\n" +
			"         └─ TableAlias(t1)\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 └─ filters: [{[1, 1]}]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [t1.pk, t2.pk2, Subquery\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Limit(1)\n" +
			" │       └─ IndexedTableAccess(one_pk)\n" +
			" │           ├─ index: [one_pk.pk]\n" +
			" │           ├─ filters: [{[1, 1]}]\n" +
			" │           └─ columns: [pk]\n" +
			" │   as (SELECT pk from one_pk where pk = 1 limit 1)]\n" +
			" └─ Sort(t1.pk ASC, t2.pk2 ASC)\n" +
			"     └─ CrossJoin\n" +
			"         ├─ Filter\n" +
			"         │   ├─ (t2.pk2 = 1)\n" +
			"         │   └─ TableAlias(t2)\n" +
			"         │       └─ Table\n" +
			"         │           └─ name: two_pk\n" +
			"         └─ TableAlias(t1)\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 └─ filters: [{[1, 1]}]\n" +
			"",
	},
	{
		Query: `SELECT ROW_NUMBER() OVER (ORDER BY s2 ASC) idx, i2, s2 FROM othertable WHERE s2 <> 'second' ORDER BY i2 ASC`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [row_number() over ( order by othertable.s2 asc):0!null as idx, othertable.i2:1!null, othertable.s2:2!null]\n" +
			" └─ Sort(othertable.i2:1!null ASC nullsFirst)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [row_number() over ( order by othertable.s2 asc):0!null, othertable.i2:1!null, othertable.s2:2!null, row_number() over ( order by othertable.s2 asc):0!null as idx]\n" +
			"         └─ Window\n" +
			"             ├─ row_number() over ( order by othertable.s2 ASC)\n" +
			"             ├─ othertable.i2:1!null\n" +
			"             ├─ othertable.s2:0!null\n" +
			"             └─ Filter\n" +
			"                 ├─ NOT\n" +
			"                 │   └─ Eq\n" +
			"                 │       ├─ othertable.s2:0!null\n" +
			"                 │       └─ second (longtext)\n" +
			"                 └─ IndexedTableAccess(othertable)\n" +
			"                     ├─ index: [othertable.s2]\n" +
			"                     ├─ static: [{(NULL, second)}, {(second, ∞)}]\n" +
			"                     ├─ colSet: (1,2)\n" +
			"                     ├─ tableId: 1\n" +
			"                     └─ Table\n" +
			"                         ├─ name: othertable\n" +
			"                         └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [row_number() over ( order by othertable.s2 asc) as idx, othertable.i2, othertable.s2]\n" +
			" └─ Sort(othertable.i2 ASC)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [row_number() over ( order by othertable.s2 asc), othertable.i2, othertable.s2, row_number() over ( order by othertable.s2 asc) as idx]\n" +
			"         └─ Window(row_number() over ( order by othertable.s2 ASC), othertable.i2, othertable.s2)\n" +
			"             └─ Filter\n" +
			"                 ├─ (NOT((othertable.s2 = 'second')))\n" +
			"                 └─ IndexedTableAccess(othertable)\n" +
			"                     ├─ index: [othertable.s2]\n" +
			"                     ├─ filters: [{(NULL, second)}, {(second, ∞)}]\n" +
			"                     └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [row_number() over ( order by othertable.s2 asc) as idx, othertable.i2, othertable.s2]\n" +
			" └─ Sort(othertable.i2 ASC)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [row_number() over ( order by othertable.s2 asc), othertable.i2, othertable.s2, row_number() over ( order by othertable.s2 asc) as idx]\n" +
			"         └─ Window(row_number() over ( order by othertable.s2 ASC), othertable.i2, othertable.s2)\n" +
			"             └─ Filter\n" +
			"                 ├─ (NOT((othertable.s2 = 'second')))\n" +
			"                 └─ IndexedTableAccess(othertable)\n" +
			"                     ├─ index: [othertable.s2]\n" +
			"                     ├─ filters: [{(NULL, second)}, {(second, ∞)}]\n" +
			"                     └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT * FROM (SELECT ROW_NUMBER() OVER (ORDER BY s2 ASC) idx, i2, s2 FROM othertable ORDER BY i2 ASC) a WHERE s2 <> 'second'`,
		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: a\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (5-7)\n" +
			" ├─ tableId: 2\n" +
			" └─ Filter\n" +
			"     ├─ NOT\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ othertable.s2:2!null\n" +
			"     │       └─ second (longtext)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [row_number() over ( order by othertable.s2 asc):0!null as idx, othertable.i2:1!null, othertable.s2:2!null]\n" +
			"         └─ Sort(othertable.i2:1!null ASC nullsFirst)\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [row_number() over ( order by othertable.s2 asc):0!null, othertable.i2:1!null, othertable.s2:2!null, row_number() over ( order by othertable.s2 asc):0!null as idx]\n" +
			"                 └─ Window\n" +
			"                     ├─ row_number() over ( order by othertable.s2 ASC)\n" +
			"                     ├─ othertable.i2:1!null\n" +
			"                     ├─ othertable.s2:0!null\n" +
			"                     └─ Table\n" +
			"                         ├─ name: othertable\n" +
			"                         ├─ columns: [s2 i2]\n" +
			"                         ├─ colSet: (1,2)\n" +
			"                         └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: a\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Filter\n" +
			"     ├─ (NOT((othertable.s2 = 'second')))\n" +
			"     └─ Project\n" +
			"         ├─ columns: [row_number() over ( order by othertable.s2 asc) as idx, othertable.i2, othertable.s2]\n" +
			"         └─ Sort(othertable.i2 ASC)\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [row_number() over ( order by othertable.s2 asc), othertable.i2, othertable.s2, row_number() over ( order by othertable.s2 asc) as idx]\n" +
			"                 └─ Window(row_number() over ( order by othertable.s2 ASC), othertable.i2, othertable.s2)\n" +
			"                     └─ Table\n" +
			"                         ├─ name: othertable\n" +
			"                         └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: a\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Filter\n" +
			"     ├─ (NOT((othertable.s2 = 'second')))\n" +
			"     └─ Project\n" +
			"         ├─ columns: [row_number() over ( order by othertable.s2 asc) as idx, othertable.i2, othertable.s2]\n" +
			"         └─ Sort(othertable.i2 ASC)\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [row_number() over ( order by othertable.s2 asc), othertable.i2, othertable.s2, row_number() over ( order by othertable.s2 asc) as idx]\n" +
			"                 └─ Window(row_number() over ( order by othertable.s2 ASC), othertable.i2, othertable.s2)\n" +
			"                     └─ Table\n" +
			"                         ├─ name: othertable\n" +
			"                         └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT ROW_NUMBER() OVER (ORDER BY s2 ASC) idx, i2, s2 FROM othertable WHERE i2 < 2 OR i2 > 2 ORDER BY i2 ASC`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [row_number() over ( order by othertable.s2 asc):0!null as idx, othertable.i2:1!null, othertable.s2:2!null]\n" +
			" └─ Sort(othertable.i2:1!null ASC nullsFirst)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [row_number() over ( order by othertable.s2 asc):0!null, othertable.i2:1!null, othertable.s2:2!null, row_number() over ( order by othertable.s2 asc):0!null as idx]\n" +
			"         └─ Window\n" +
			"             ├─ row_number() over ( order by othertable.s2 ASC)\n" +
			"             ├─ othertable.i2:1!null\n" +
			"             ├─ othertable.s2:0!null\n" +
			"             └─ IndexedTableAccess(othertable)\n" +
			"                 ├─ index: [othertable.i2]\n" +
			"                 ├─ static: [{(NULL, 2)}, {(2, ∞)}]\n" +
			"                 ├─ colSet: (1,2)\n" +
			"                 ├─ tableId: 1\n" +
			"                 └─ Table\n" +
			"                     ├─ name: othertable\n" +
			"                     └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [row_number() over ( order by othertable.s2 asc) as idx, othertable.i2, othertable.s2]\n" +
			" └─ Sort(othertable.i2 ASC)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [row_number() over ( order by othertable.s2 asc), othertable.i2, othertable.s2, row_number() over ( order by othertable.s2 asc) as idx]\n" +
			"         └─ Window(row_number() over ( order by othertable.s2 ASC), othertable.i2, othertable.s2)\n" +
			"             └─ IndexedTableAccess(othertable)\n" +
			"                 ├─ index: [othertable.i2]\n" +
			"                 ├─ filters: [{(NULL, 2)}, {(2, ∞)}]\n" +
			"                 └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [row_number() over ( order by othertable.s2 asc) as idx, othertable.i2, othertable.s2]\n" +
			" └─ Sort(othertable.i2 ASC)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [row_number() over ( order by othertable.s2 asc), othertable.i2, othertable.s2, row_number() over ( order by othertable.s2 asc) as idx]\n" +
			"         └─ Window(row_number() over ( order by othertable.s2 ASC), othertable.i2, othertable.s2)\n" +
			"             └─ IndexedTableAccess(othertable)\n" +
			"                 ├─ index: [othertable.i2]\n" +
			"                 ├─ filters: [{(NULL, 2)}, {(2, ∞)}]\n" +
			"                 └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT * FROM (SELECT ROW_NUMBER() OVER (ORDER BY s2 ASC) idx, i2, s2 FROM othertable ORDER BY i2 ASC) a WHERE i2 < 2 OR i2 > 2`,
		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: a\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (5-7)\n" +
			" ├─ tableId: 2\n" +
			" └─ Filter\n" +
			"     ├─ Or\n" +
			"     │   ├─ LessThan\n" +
			"     │   │   ├─ othertable.i2:1!null\n" +
			"     │   │   └─ 2 (bigint)\n" +
			"     │   └─ GreaterThan\n" +
			"     │       ├─ othertable.i2:1!null\n" +
			"     │       └─ 2 (bigint)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [row_number() over ( order by othertable.s2 asc):0!null as idx, othertable.i2:1!null, othertable.s2:2!null]\n" +
			"         └─ Sort(othertable.i2:1!null ASC nullsFirst)\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [row_number() over ( order by othertable.s2 asc):0!null, othertable.i2:1!null, othertable.s2:2!null, row_number() over ( order by othertable.s2 asc):0!null as idx]\n" +
			"                 └─ Window\n" +
			"                     ├─ row_number() over ( order by othertable.s2 ASC)\n" +
			"                     ├─ othertable.i2:1!null\n" +
			"                     ├─ othertable.s2:0!null\n" +
			"                     └─ Table\n" +
			"                         ├─ name: othertable\n" +
			"                         ├─ columns: [s2 i2]\n" +
			"                         ├─ colSet: (1,2)\n" +
			"                         └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: a\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Filter\n" +
			"     ├─ ((othertable.i2 < 2) OR (othertable.i2 > 2))\n" +
			"     └─ Project\n" +
			"         ├─ columns: [row_number() over ( order by othertable.s2 asc) as idx, othertable.i2, othertable.s2]\n" +
			"         └─ Sort(othertable.i2 ASC)\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [row_number() over ( order by othertable.s2 asc), othertable.i2, othertable.s2, row_number() over ( order by othertable.s2 asc) as idx]\n" +
			"                 └─ Window(row_number() over ( order by othertable.s2 ASC), othertable.i2, othertable.s2)\n" +
			"                     └─ Table\n" +
			"                         ├─ name: othertable\n" +
			"                         └─ columns: [s2 i2]\n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: a\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Filter\n" +
			"     ├─ ((othertable.i2 < 2) OR (othertable.i2 > 2))\n" +
			"     └─ Project\n" +
			"         ├─ columns: [row_number() over ( order by othertable.s2 asc) as idx, othertable.i2, othertable.s2]\n" +
			"         └─ Sort(othertable.i2 ASC)\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [row_number() over ( order by othertable.s2 asc), othertable.i2, othertable.s2, row_number() over ( order by othertable.s2 asc) as idx]\n" +
			"                 └─ Window(row_number() over ( order by othertable.s2 ASC), othertable.i2, othertable.s2)\n" +
			"                     └─ Table\n" +
			"                         ├─ name: othertable\n" +
			"                         └─ columns: [s2 i2]\n" +
			"",
	},
	{
		Query: `SELECT t, n, lag(t, 1, t+1) over (partition by n) FROM bigtable`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [bigtable.t:1!null, bigtable.n:2, lag(bigtable.t, 1, (bigtable.t + 1)) over ( partition by bigtable.n rows between unbounded preceding and unbounded following):0 as lag(t, 1, t+1) over (partition by n)]\n" +
			" └─ Window\n" +
			"     ├─ lag(bigtable.t, 1, (bigtable.t + 1)) over ( partition by bigtable.n ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\n" +
			"     ├─ bigtable.t:0!null\n" +
			"     ├─ bigtable.n:1\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: bigtable\n" +
			"             └─ columns: [t n]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [bigtable.t, bigtable.n, lag(bigtable.t, 1, (bigtable.t + 1)) over ( partition by bigtable.n rows between unbounded preceding and unbounded following) as lag(t, 1, t+1) over (partition by n)]\n" +
			" └─ Window(lag(bigtable.t, 1, (bigtable.t + 1)) over ( partition by bigtable.n ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), bigtable.t, bigtable.n)\n" +
			"     └─ Table\n" +
			"         ├─ name: bigtable\n" +
			"         └─ columns: [t n]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [bigtable.t, bigtable.n, lag(bigtable.t, 1, (bigtable.t + 1)) over ( partition by bigtable.n rows between unbounded preceding and unbounded following) as lag(t, 1, t+1) over (partition by n)]\n" +
			" └─ Window(lag(bigtable.t, 1, (bigtable.t + 1)) over ( partition by bigtable.n ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), bigtable.t, bigtable.n)\n" +
			"     └─ Table\n" +
			"         ├─ name: bigtable\n" +
			"         └─ columns: [t n]\n" +
			"",
	},
	{
		Query: `select i, row_number() over (w3) from mytable window w1 as (w2), w2 as (), w3 as (w1)`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mytable.i:1!null, row_number() over ( rows between unbounded preceding and unbounded following):0!null as row_number() over (w3)]\n" +
			" └─ Window\n" +
			"     ├─ row_number() over ( ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\n" +
			"     ├─ mytable.i:0!null\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mytable.i, row_number() over ( rows between unbounded preceding and unbounded following) as row_number() over (w3)]\n" +
			" └─ Window(row_number() over ( ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), mytable.i)\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mytable.i, row_number() over ( rows between unbounded preceding and unbounded following) as row_number() over (w3)]\n" +
			" └─ Window(row_number() over ( ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), mytable.i)\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i]\n" +
			"",
	},
	{
		Query: `select i, row_number() over (w1 partition by s) from mytable window w1 as (order by i asc)`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mytable.i:1!null, row_number() over ( partition by mytable.s order by mytable.i asc rows between unbounded preceding and unbounded following):0!null as row_number() over (w1 partition by s)]\n" +
			" └─ Window\n" +
			"     ├─ row_number() over ( partition by mytable.s order by mytable.i ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\n" +
			"     ├─ mytable.i:0!null\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mytable.i, row_number() over ( partition by mytable.s order by mytable.i asc rows between unbounded preceding and unbounded following) as row_number() over (w1 partition by s)]\n" +
			" └─ Window(row_number() over ( partition by mytable.s order by mytable.i ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), mytable.i)\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mytable.i, row_number() over ( partition by mytable.s order by mytable.i asc rows between unbounded preceding and unbounded following) as row_number() over (w1 partition by s)]\n" +
			" └─ Window(row_number() over ( partition by mytable.s order by mytable.i ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), mytable.i)\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `DELETE FROM two_pk WHERE c1 > 1`,
		ExpectedPlan: "RowUpdateAccumulator\n" +
			" └─ Delete\n" +
			"     └─ Filter\n" +
			"         ├─ GreaterThan\n" +
			"         │   ├─ two_pk.c1:2!null\n" +
			"         │   └─ 1 (tinyint)\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
	},
	{
		Query: `DELETE FROM two_pk WHERE pk1 = 1 AND pk2 = 2`,
		ExpectedPlan: "RowUpdateAccumulator\n" +
			" └─ Delete\n" +
			"     └─ IndexedTableAccess(two_pk)\n" +
			"         ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         ├─ static: [{[1, 1], [2, 2]}]\n" +
			"         ├─ colSet: (1-7)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: two_pk\n" +
			"             └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
	},
	{
		Query: `UPDATE two_pk SET c1 = 1 WHERE c1 > 1`,
		ExpectedPlan: "RowUpdateAccumulator\n" +
			" └─ Update\n" +
			"     └─ UpdateSource(SET two_pk.c1:2!null = 1 (tinyint))\n" +
			"         └─ Filter\n" +
			"             ├─ GreaterThan\n" +
			"             │   ├─ two_pk.c1:2!null\n" +
			"             │   └─ 1 (tinyint)\n" +
			"             └─ ProcessTable\n" +
			"                 └─ Table\n" +
			"                     ├─ name: two_pk\n" +
			"                     └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
	},
	{
		Query: `UPDATE two_pk SET c1 = 1 WHERE pk1 = 1 AND pk2 = 2`,
		ExpectedPlan: "RowUpdateAccumulator\n" +
			" └─ Update\n" +
			"     └─ UpdateSource(SET two_pk.c1:2!null = 1 (tinyint))\n" +
			"         └─ IndexedTableAccess(two_pk)\n" +
			"             ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"             ├─ static: [{[1, 1], [2, 2]}]\n" +
			"             ├─ colSet: (1-7)\n" +
			"             ├─ tableId: 1\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
	},
	{
		Query: `UPDATE /*+ JOIN_ORDER(two_pk, one_pk) */ one_pk JOIN two_pk on one_pk.pk = two_pk.pk1 SET two_pk.c1 = two_pk.c1 + 1`,
		ExpectedPlan: "RowUpdateAccumulator\n" +
			" └─ Update\n" +
			"     └─ Update Join\n" +
			"         └─ UpdateSource(SET two_pk.c1:8!null = (two_pk.c1:8!null + 1 (tinyint)))\n" +
			"             └─ MergeJoin\n" +
			"                 ├─ cmp: Eq\n" +
			"                 │   ├─ one_pk.pk:0!null\n" +
			"                 │   └─ two_pk.pk1:6!null\n" +
			"                 ├─ IndexedTableAccess(one_pk)\n" +
			"                 │   ├─ index: [one_pk.pk]\n" +
			"                 │   ├─ static: [{[NULL, ∞)}]\n" +
			"                 │   ├─ colSet: (1-6)\n" +
			"                 │   ├─ tableId: 1\n" +
			"                 │   └─ Table\n" +
			"                 │       ├─ name: one_pk\n" +
			"                 │       └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"                 └─ IndexedTableAccess(two_pk)\n" +
			"                     ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"                     ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"                     ├─ colSet: (7-13)\n" +
			"                     ├─ tableId: 2\n" +
			"                     └─ Table\n" +
			"                         ├─ name: two_pk\n" +
			"                         └─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"",
	},
	{
		Query: `UPDATE one_pk INNER JOIN (SELECT * FROM two_pk) as t2 on one_pk.pk = t2.pk1 SET one_pk.c1 = one_pk.c1 + 1, one_pk.c2 = one_pk.c2 + 1`,
		ExpectedPlan: "RowUpdateAccumulator\n" +
			" └─ Update\n" +
			"     └─ Update Join\n" +
			"         └─ UpdateSource(SET one_pk.c1:1 = (one_pk.c1:1 + 1 (tinyint)),SET one_pk.c2:2 = (one_pk.c2:2 + 1 (tinyint)))\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [one_pk.pk:7!null, one_pk.c1:8, one_pk.c2:9, one_pk.c3:10, one_pk.c4:11, one_pk.c5:12, t2.pk1:0!null, t2.pk2:1!null, t2.c1:2!null, t2.c2:3!null, t2.c3:4!null, t2.c4:5!null, t2.c5:6!null]\n" +
			"                 └─ HashJoin\n" +
			"                     ├─ Eq\n" +
			"                     │   ├─ one_pk.pk:7!null\n" +
			"                     │   └─ t2.pk1:0!null\n" +
			"                     ├─ SubqueryAlias\n" +
			"                     │   ├─ name: t2\n" +
			"                     │   ├─ outerVisibility: false\n" +
			"                     │   ├─ isLateral: false\n" +
			"                     │   ├─ cacheable: true\n" +
			"                     │   ├─ colSet: (14-20)\n" +
			"                     │   ├─ tableId: 3\n" +
			"                     │   └─ Table\n" +
			"                     │       ├─ name: two_pk\n" +
			"                     │       ├─ columns: [pk1 pk2 c1 c2 c3 c4 c5]\n" +
			"                     │       ├─ colSet: (7-13)\n" +
			"                     │       └─ tableId: 2\n" +
			"                     └─ HashLookup\n" +
			"                         ├─ left-key: TUPLE(t2.pk1:0!null)\n" +
			"                         ├─ right-key: TUPLE(one_pk.pk:0!null)\n" +
			"                         └─ ProcessTable\n" +
			"                             └─ Table\n" +
			"                                 ├─ name: one_pk\n" +
			"                                 └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM invert_pk as a, invert_pk as b WHERE a.y = b.z`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.x:1!null, a.y:2!null, a.z:3!null]\n" +
			" └─ InnerJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ a.y:2!null\n" +
			"     │   └─ b.z:0!null\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: invert_pk\n" +
			"     │           └─ columns: [z]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: invert_pk\n" +
			"             ├─ columns: [x y z]\n" +
			"             ├─ colSet: (1-3)\n" +
			"             └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.x, a.y, a.z]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3)\n" +
			"     ├─ (a.y = b.z)\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: invert_pk\n" +
			"     │       └─ columns: [z]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: invert_pk\n" +
			"             └─ columns: [x y z]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.x, a.y, a.z]\n" +
			" └─ InnerJoin (estimated cost=10.090 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ (a.y = b.z)\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: invert_pk\n" +
			"     │       └─ columns: [z]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: invert_pk\n" +
			"             └─ columns: [x y z]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM invert_pk as a, invert_pk as b WHERE a.y = b.z AND a.z = 2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.x:1!null, a.y:2!null, a.z:3!null]\n" +
			" └─ InnerJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ a.y:2!null\n" +
			"     │   └─ b.z:0!null\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: invert_pk\n" +
			"     │           └─ columns: [z]\n" +
			"     └─ Filter\n" +
			"         ├─ Eq\n" +
			"         │   ├─ a.z:2!null\n" +
			"         │   └─ 2 (bigint)\n" +
			"         └─ TableAlias(a)\n" +
			"             └─ Table\n" +
			"                 ├─ name: invert_pk\n" +
			"                 ├─ columns: [x y z]\n" +
			"                 ├─ colSet: (1-3)\n" +
			"                 └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.x, a.y, a.z]\n" +
			" └─ InnerJoin (estimated cost=7.060 rows=2)\n" +
			"     ├─ (a.y = b.z)\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: invert_pk\n" +
			"     │       └─ columns: [z]\n" +
			"     └─ Filter\n" +
			"         ├─ (a.z = 2)\n" +
			"         └─ TableAlias(a)\n" +
			"             └─ Table\n" +
			"                 ├─ name: invert_pk\n" +
			"                 └─ columns: [x y z]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.x, a.y, a.z]\n" +
			" └─ InnerJoin (estimated cost=7.060 rows=2) (actual rows=1 loops=1)\n" +
			"     ├─ (a.y = b.z)\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: invert_pk\n" +
			"     │       └─ columns: [z]\n" +
			"     └─ Filter\n" +
			"         ├─ (a.z = 2)\n" +
			"         └─ TableAlias(a)\n" +
			"             └─ Table\n" +
			"                 ├─ name: invert_pk\n" +
			"                 └─ columns: [x y z]\n" +
			"",
	},
	{
		Query: `SELECT * FROM invert_pk WHERE y = 0`,
		ExpectedPlan: "IndexedTableAccess(invert_pk)\n" +
			" ├─ index: [invert_pk.y,invert_pk.z,invert_pk.x]\n" +
			" ├─ static: [{[0, 0], [NULL, ∞), [NULL, ∞)}]\n" +
			" ├─ colSet: (1-3)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: invert_pk\n" +
			"     └─ columns: [x y z]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(invert_pk)\n" +
			" ├─ index: [invert_pk.y,invert_pk.z,invert_pk.x]\n" +
			" ├─ filters: [{[0, 0], [NULL, ∞), [NULL, ∞)}]\n" +
			" └─ columns: [x y z]\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(invert_pk)\n" +
			" ├─ index: [invert_pk.y,invert_pk.z,invert_pk.x]\n" +
			" ├─ filters: [{[0, 0], [NULL, ∞), [NULL, ∞)}]\n" +
			" └─ columns: [x y z]\n" +
			"",
	},
	{
		Query: `SELECT * FROM invert_pk WHERE y >= 0`,
		ExpectedPlan: "IndexedTableAccess(invert_pk)\n" +
			" ├─ index: [invert_pk.y,invert_pk.z,invert_pk.x]\n" +
			" ├─ static: [{[0, ∞), [NULL, ∞), [NULL, ∞)}]\n" +
			" ├─ colSet: (1-3)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: invert_pk\n" +
			"     └─ columns: [x y z]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(invert_pk)\n" +
			" ├─ index: [invert_pk.y,invert_pk.z,invert_pk.x]\n" +
			" ├─ filters: [{[0, ∞), [NULL, ∞), [NULL, ∞)}]\n" +
			" └─ columns: [x y z]\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(invert_pk)\n" +
			" ├─ index: [invert_pk.y,invert_pk.z,invert_pk.x]\n" +
			" ├─ filters: [{[0, ∞), [NULL, ∞), [NULL, ∞)}]\n" +
			" └─ columns: [x y z]\n" +
			"",
	},
	{
		Query: `SELECT * FROM invert_pk WHERE y >= 0 AND z < 1`,
		ExpectedPlan: "IndexedTableAccess(invert_pk)\n" +
			" ├─ index: [invert_pk.y,invert_pk.z,invert_pk.x]\n" +
			" ├─ static: [{[0, ∞), (NULL, 1), [NULL, ∞)}]\n" +
			" ├─ colSet: (1-3)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: invert_pk\n" +
			"     └─ columns: [x y z]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(invert_pk)\n" +
			" ├─ index: [invert_pk.y,invert_pk.z,invert_pk.x]\n" +
			" ├─ filters: [{[0, ∞), (NULL, 1), [NULL, ∞)}]\n" +
			" └─ columns: [x y z]\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(invert_pk)\n" +
			" ├─ index: [invert_pk.y,invert_pk.z,invert_pk.x]\n" +
			" ├─ filters: [{[0, ∞), (NULL, 1), [NULL, ∞)}]\n" +
			" └─ columns: [x y z]\n" +
			"",
	},
	{
		Query: `SELECT * FROM one_pk WHERE pk IN (1)`,
		ExpectedPlan: "IndexedTableAccess(one_pk)\n" +
			" ├─ index: [one_pk.pk]\n" +
			" ├─ static: [{[1, 1]}]\n" +
			" ├─ colSet: (1-6)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: one_pk\n" +
			"     └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(one_pk)\n" +
			" ├─ index: [one_pk.pk]\n" +
			" ├─ filters: [{[1, 1]}]\n" +
			" └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(one_pk)\n" +
			" ├─ index: [one_pk.pk]\n" +
			" ├─ filters: [{[1, 1]}]\n" +
			" └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM one_pk a CROSS JOIN one_pk c LEFT JOIN one_pk b ON b.pk = c.pk and b.pk = a.pk`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.pk:1!null, a.c1:2, a.c2:3, a.c3:4, a.c4:5, a.c5:6]\n" +
			" └─ LeftOuterHashJoin\n" +
			"     ├─ AND\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ b.pk:7!null\n" +
			"     │   │   └─ c.pk:0!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ b.pk:7!null\n" +
			"     │       └─ a.pk:1!null\n" +
			"     ├─ CrossJoin\n" +
			"     │   ├─ TableAlias(c)\n" +
			"     │   │   └─ ProcessTable\n" +
			"     │   │       └─ Table\n" +
			"     │   │           ├─ name: one_pk\n" +
			"     │   │           └─ columns: [pk]\n" +
			"     │   └─ TableAlias(a)\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: one_pk\n" +
			"     │           ├─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"     │           ├─ colSet: (1-6)\n" +
			"     │           └─ tableId: 1\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(c.pk:0!null, a.pk:1!null)\n" +
			"         ├─ right-key: TUPLE(b.pk:0!null, b.pk:0!null)\n" +
			"         └─ TableAlias(b)\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 ├─ columns: [pk]\n" +
			"                 ├─ colSet: (13-18)\n" +
			"                 └─ tableId: 3\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.pk, a.c1, a.c2, a.c3, a.c4, a.c5]\n" +
			" └─ LeftOuterHashJoin (estimated cost=17.100 rows=5)\n" +
			"     ├─ ((b.pk = c.pk) AND (b.pk = a.pk))\n" +
			"     ├─ CrossJoin (estimated cost=17.160 rows=5)\n" +
			"     │   ├─ TableAlias(c)\n" +
			"     │   │   └─ Table\n" +
			"     │   │       ├─ name: one_pk\n" +
			"     │   │       └─ columns: [pk]\n" +
			"     │   └─ TableAlias(a)\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: one_pk\n" +
			"     │           └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (c.pk, a.pk)\n" +
			"         ├─ right-key: (b.pk, b.pk)\n" +
			"         └─ TableAlias(b)\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.pk, a.c1, a.c2, a.c3, a.c4, a.c5]\n" +
			" └─ LeftOuterHashJoin (estimated cost=17.100 rows=5) (actual rows=16 loops=1)\n" +
			"     ├─ ((b.pk = c.pk) AND (b.pk = a.pk))\n" +
			"     ├─ CrossJoin (estimated cost=17.160 rows=5) (actual rows=16 loops=1)\n" +
			"     │   ├─ TableAlias(c)\n" +
			"     │   │   └─ Table\n" +
			"     │   │       ├─ name: one_pk\n" +
			"     │   │       └─ columns: [pk]\n" +
			"     │   └─ TableAlias(a)\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: one_pk\n" +
			"     │           └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (c.pk, a.pk)\n" +
			"         ├─ right-key: (b.pk, b.pk)\n" +
			"         └─ TableAlias(b)\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM one_pk a CROSS JOIN one_pk c RIGHT JOIN one_pk b ON b.pk = c.pk and b.pk = a.pk`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.pk:2!null, a.c1:3, a.c2:4, a.c3:5, a.c4:6, a.c5:7]\n" +
			" └─ LeftOuterHashJoin\n" +
			"     ├─ AND\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ b.pk:0!null\n" +
			"     │   │   └─ c.pk:1!null\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ b.pk:0!null\n" +
			"     │       └─ a.pk:2!null\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: one_pk\n" +
			"     │           └─ columns: [pk]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(b.pk:0!null, b.pk:0!null)\n" +
			"         ├─ right-key: TUPLE(c.pk:0!null, a.pk:1!null)\n" +
			"         └─ CrossJoin\n" +
			"             ├─ TableAlias(c)\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: one_pk\n" +
			"             │       ├─ columns: [pk]\n" +
			"             │       ├─ colSet: (7-12)\n" +
			"             │       └─ tableId: 2\n" +
			"             └─ TableAlias(a)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: one_pk\n" +
			"                     ├─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"                     ├─ colSet: (1-6)\n" +
			"                     └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.pk, a.c1, a.c2, a.c3, a.c4, a.c5]\n" +
			" └─ LeftOuterHashJoin (estimated cost=19.090 rows=5)\n" +
			"     ├─ ((b.pk = c.pk) AND (b.pk = a.pk))\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: one_pk\n" +
			"     │       └─ columns: [pk]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (b.pk, b.pk)\n" +
			"         ├─ right-key: (c.pk, a.pk)\n" +
			"         └─ CrossJoin\n" +
			"             ├─ TableAlias(c)\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: one_pk\n" +
			"             │       └─ columns: [pk]\n" +
			"             └─ TableAlias(a)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: one_pk\n" +
			"                     └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.pk, a.c1, a.c2, a.c3, a.c4, a.c5]\n" +
			" └─ LeftOuterHashJoin (estimated cost=19.090 rows=5) (actual rows=4 loops=1)\n" +
			"     ├─ ((b.pk = c.pk) AND (b.pk = a.pk))\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: one_pk\n" +
			"     │       └─ columns: [pk]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (b.pk, b.pk)\n" +
			"         ├─ right-key: (c.pk, a.pk)\n" +
			"         └─ CrossJoin\n" +
			"             ├─ TableAlias(c)\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: one_pk\n" +
			"             │       └─ columns: [pk]\n" +
			"             └─ TableAlias(a)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: one_pk\n" +
			"                     └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM one_pk a CROSS JOIN one_pk c INNER JOIN one_pk b ON b.pk = c.pk and b.pk = a.pk`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.pk:2!null, a.c1:3, a.c2:4, a.c3:5, a.c4:6, a.c5:7]\n" +
			" └─ LookupJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ a.pk:2!null\n" +
			"     │   └─ c.pk:0!null\n" +
			"     ├─ MergeJoin\n" +
			"     │   ├─ cmp: Eq\n" +
			"     │   │   ├─ c.pk:0!null\n" +
			"     │   │   └─ b.pk:1!null\n" +
			"     │   ├─ TableAlias(c)\n" +
			"     │   │   └─ IndexedTableAccess(one_pk)\n" +
			"     │   │       ├─ index: [one_pk.pk]\n" +
			"     │   │       ├─ static: [{[NULL, ∞)}]\n" +
			"     │   │       ├─ colSet: (7-12)\n" +
			"     │   │       ├─ tableId: 2\n" +
			"     │   │       └─ Table\n" +
			"     │   │           ├─ name: one_pk\n" +
			"     │   │           └─ columns: [pk]\n" +
			"     │   └─ TableAlias(b)\n" +
			"     │       └─ IndexedTableAccess(one_pk)\n" +
			"     │           ├─ index: [one_pk.pk]\n" +
			"     │           ├─ static: [{[NULL, ∞)}]\n" +
			"     │           ├─ colSet: (13-18)\n" +
			"     │           ├─ tableId: 3\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: one_pk\n" +
			"     │               └─ columns: [pk]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ IndexedTableAccess(one_pk)\n" +
			"             ├─ index: [one_pk.pk]\n" +
			"             ├─ keys: [b.pk:1!null]\n" +
			"             ├─ colSet: (1-6)\n" +
			"             ├─ tableId: 1\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.pk, a.c1, a.c2, a.c3, a.c4, a.c5]\n" +
			" └─ LookupJoin (estimated cost=13.200 rows=4)\n" +
			"     ├─ (a.pk = c.pk)\n" +
			"     ├─ MergeJoin (estimated cost=8.120 rows=4)\n" +
			"     │   ├─ cmp: (c.pk = b.pk)\n" +
			"     │   ├─ TableAlias(c)\n" +
			"     │   │   └─ IndexedTableAccess(one_pk)\n" +
			"     │   │       ├─ index: [one_pk.pk]\n" +
			"     │   │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │       └─ columns: [pk]\n" +
			"     │   └─ TableAlias(b)\n" +
			"     │       └─ IndexedTableAccess(one_pk)\n" +
			"     │           ├─ index: [one_pk.pk]\n" +
			"     │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           └─ columns: [pk]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ IndexedTableAccess(one_pk)\n" +
			"             ├─ index: [one_pk.pk]\n" +
			"             ├─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"             └─ keys: b.pk\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.pk, a.c1, a.c2, a.c3, a.c4, a.c5]\n" +
			" └─ LookupJoin (estimated cost=13.200 rows=4) (actual rows=4 loops=1)\n" +
			"     ├─ (a.pk = c.pk)\n" +
			"     ├─ MergeJoin (estimated cost=8.120 rows=4) (actual rows=4 loops=1)\n" +
			"     │   ├─ cmp: (c.pk = b.pk)\n" +
			"     │   ├─ TableAlias(c)\n" +
			"     │   │   └─ IndexedTableAccess(one_pk)\n" +
			"     │   │       ├─ index: [one_pk.pk]\n" +
			"     │   │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │       └─ columns: [pk]\n" +
			"     │   └─ TableAlias(b)\n" +
			"     │       └─ IndexedTableAccess(one_pk)\n" +
			"     │           ├─ index: [one_pk.pk]\n" +
			"     │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           └─ columns: [pk]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ IndexedTableAccess(one_pk)\n" +
			"             ├─ index: [one_pk.pk]\n" +
			"             ├─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"             └─ keys: b.pk\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM one_pk a CROSS JOIN one_pk b INNER JOIN one_pk c ON b.pk = c.pk LEFT JOIN one_pk d ON c.pk = d.pk`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.pk:2!null, a.c1:3, a.c2:4, a.c3:5, a.c4:6, a.c5:7]\n" +
			" └─ LeftOuterHashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ c.pk:1!null\n" +
			"     │   └─ d.pk:8!null\n" +
			"     ├─ CrossJoin\n" +
			"     │   ├─ MergeJoin\n" +
			"     │   │   ├─ cmp: Eq\n" +
			"     │   │   │   ├─ b.pk:0!null\n" +
			"     │   │   │   └─ c.pk:1!null\n" +
			"     │   │   ├─ TableAlias(b)\n" +
			"     │   │   │   └─ IndexedTableAccess(one_pk)\n" +
			"     │   │   │       ├─ index: [one_pk.pk]\n" +
			"     │   │   │       ├─ static: [{[NULL, ∞)}]\n" +
			"     │   │   │       ├─ colSet: (7-12)\n" +
			"     │   │   │       ├─ tableId: 2\n" +
			"     │   │   │       └─ Table\n" +
			"     │   │   │           ├─ name: one_pk\n" +
			"     │   │   │           └─ columns: [pk]\n" +
			"     │   │   └─ TableAlias(c)\n" +
			"     │   │       └─ IndexedTableAccess(one_pk)\n" +
			"     │   │           ├─ index: [one_pk.pk]\n" +
			"     │   │           ├─ static: [{[NULL, ∞)}]\n" +
			"     │   │           ├─ colSet: (13-18)\n" +
			"     │   │           ├─ tableId: 3\n" +
			"     │   │           └─ Table\n" +
			"     │   │               ├─ name: one_pk\n" +
			"     │   │               └─ columns: [pk]\n" +
			"     │   └─ TableAlias(a)\n" +
			"     │       └─ ProcessTable\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: one_pk\n" +
			"     │               └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(c.pk:1!null)\n" +
			"         ├─ right-key: TUPLE(d.pk:0!null)\n" +
			"         └─ TableAlias(d)\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 ├─ columns: [pk]\n" +
			"                 ├─ colSet: (19-24)\n" +
			"                 └─ tableId: 4\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.pk, a.c1, a.c2, a.c3, a.c4, a.c5]\n" +
			" └─ LeftOuterHashJoin (estimated cost=17.100 rows=5)\n" +
			"     ├─ (c.pk = d.pk)\n" +
			"     ├─ CrossJoin (estimated cost=17.160 rows=5)\n" +
			"     │   ├─ MergeJoin (estimated cost=8.120 rows=4)\n" +
			"     │   │   ├─ cmp: (b.pk = c.pk)\n" +
			"     │   │   ├─ TableAlias(b)\n" +
			"     │   │   │   └─ IndexedTableAccess(one_pk)\n" +
			"     │   │   │       ├─ index: [one_pk.pk]\n" +
			"     │   │   │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │   │       └─ columns: [pk]\n" +
			"     │   │   └─ TableAlias(c)\n" +
			"     │   │       └─ IndexedTableAccess(one_pk)\n" +
			"     │   │           ├─ index: [one_pk.pk]\n" +
			"     │   │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │           └─ columns: [pk]\n" +
			"     │   └─ TableAlias(a)\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: one_pk\n" +
			"     │           └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (c.pk)\n" +
			"         ├─ right-key: (d.pk)\n" +
			"         └─ TableAlias(d)\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.pk, a.c1, a.c2, a.c3, a.c4, a.c5]\n" +
			" └─ LeftOuterHashJoin (estimated cost=17.100 rows=5) (actual rows=16 loops=1)\n" +
			"     ├─ (c.pk = d.pk)\n" +
			"     ├─ CrossJoin (estimated cost=17.160 rows=5) (actual rows=16 loops=1)\n" +
			"     │   ├─ MergeJoin (estimated cost=8.120 rows=4) (actual rows=4 loops=1)\n" +
			"     │   │   ├─ cmp: (b.pk = c.pk)\n" +
			"     │   │   ├─ TableAlias(b)\n" +
			"     │   │   │   └─ IndexedTableAccess(one_pk)\n" +
			"     │   │   │       ├─ index: [one_pk.pk]\n" +
			"     │   │   │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │   │       └─ columns: [pk]\n" +
			"     │   │   └─ TableAlias(c)\n" +
			"     │   │       └─ IndexedTableAccess(one_pk)\n" +
			"     │   │           ├─ index: [one_pk.pk]\n" +
			"     │   │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │           └─ columns: [pk]\n" +
			"     │   └─ TableAlias(a)\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: one_pk\n" +
			"     │           └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (c.pk)\n" +
			"         ├─ right-key: (d.pk)\n" +
			"         └─ TableAlias(d)\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT a.* FROM one_pk a CROSS JOIN one_pk c INNER JOIN (select * from one_pk) b ON b.pk = c.pk`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.pk:7!null, a.c1:8, a.c2:9, a.c3:10, a.c4:11, a.c5:12]\n" +
			" └─ HashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ b.pk:0!null\n" +
			"     │   └─ c.pk:6!null\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: b\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   ├─ colSet: (19-24)\n" +
			"     │   ├─ tableId: 4\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: one_pk\n" +
			"     │       ├─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"     │       ├─ colSet: (13-18)\n" +
			"     │       └─ tableId: 3\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(b.pk:0!null)\n" +
			"         ├─ right-key: TUPLE(c.pk:0!null)\n" +
			"         └─ CrossJoin\n" +
			"             ├─ TableAlias(c)\n" +
			"             │   └─ ProcessTable\n" +
			"             │       └─ Table\n" +
			"             │           ├─ name: one_pk\n" +
			"             │           └─ columns: [pk]\n" +
			"             └─ TableAlias(a)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: one_pk\n" +
			"                     ├─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"                     ├─ colSet: (1-6)\n" +
			"                     └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.pk, a.c1, a.c2, a.c3, a.c4, a.c5]\n" +
			" └─ HashJoin (estimated cost=116.060 rows=6)\n" +
			"     ├─ (b.pk = c.pk)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: b\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: one_pk\n" +
			"     │       └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (b.pk)\n" +
			"         ├─ right-key: (c.pk)\n" +
			"         └─ CrossJoin\n" +
			"             ├─ TableAlias(c)\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: one_pk\n" +
			"             │       └─ columns: [pk]\n" +
			"             └─ TableAlias(a)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: one_pk\n" +
			"                     └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.pk, a.c1, a.c2, a.c3, a.c4, a.c5]\n" +
			" └─ HashJoin (estimated cost=116.060 rows=6) (actual rows=16 loops=1)\n" +
			"     ├─ (b.pk = c.pk)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: b\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: one_pk\n" +
			"     │       └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (b.pk)\n" +
			"         ├─ right-key: (c.pk)\n" +
			"         └─ CrossJoin\n" +
			"             ├─ TableAlias(c)\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: one_pk\n" +
			"             │       └─ columns: [pk]\n" +
			"             └─ TableAlias(a)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: one_pk\n" +
			"                     └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
	},
	{
		Query: `SELECT * FROM tabletest join mytable mt INNER JOIN othertable ot ON tabletest.i = ot.i2 order by 1,3,6`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [tabletest.i:2!null, tabletest.s:3!null, mt.i:0!null, mt.s:1!null, ot.s2:4!null, ot.i2:5!null]\n" +
			" └─ Sort(tabletest.i:2!null ASC nullsFirst, mt.i:0!null ASC nullsFirst, ot.i2:5!null ASC nullsFirst)\n" +
			"     └─ LookupJoin\n" +
			"         ├─ CrossJoin\n" +
			"         │   ├─ TableAlias(mt)\n" +
			"         │   │   └─ ProcessTable\n" +
			"         │   │       └─ Table\n" +
			"         │   │           ├─ name: mytable\n" +
			"         │   │           └─ columns: [i s]\n" +
			"         │   └─ ProcessTable\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: tabletest\n" +
			"         │           └─ columns: [i s]\n" +
			"         └─ TableAlias(ot)\n" +
			"             └─ IndexedTableAccess(othertable)\n" +
			"                 ├─ index: [othertable.i2]\n" +
			"                 ├─ keys: [tabletest.i:2!null]\n" +
			"                 ├─ colSet: (5,6)\n" +
			"                 ├─ tableId: 3\n" +
			"                 └─ Table\n" +
			"                     ├─ name: othertable\n" +
			"                     └─ columns: [s2 i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [tabletest.i, tabletest.s, mt.i, mt.s, ot.s2, ot.i2]\n" +
			" └─ Sort(tabletest.i ASC, mt.i ASC, ot.i2 ASC)\n" +
			"     └─ LookupJoin\n" +
			"         ├─ CrossJoin\n" +
			"         │   ├─ TableAlias(mt)\n" +
			"         │   │   └─ Table\n" +
			"         │   │       ├─ name: mytable\n" +
			"         │   │       └─ columns: [i s]\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: tabletest\n" +
			"         │       └─ columns: [i s]\n" +
			"         └─ TableAlias(ot)\n" +
			"             └─ IndexedTableAccess(othertable)\n" +
			"                 ├─ index: [othertable.i2]\n" +
			"                 ├─ columns: [s2 i2]\n" +
			"                 └─ keys: tabletest.i\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [tabletest.i, tabletest.s, mt.i, mt.s, ot.s2, ot.i2]\n" +
			" └─ Sort(tabletest.i ASC, mt.i ASC, ot.i2 ASC)\n" +
			"     └─ LookupJoin\n" +
			"         ├─ CrossJoin\n" +
			"         │   ├─ TableAlias(mt)\n" +
			"         │   │   └─ Table\n" +
			"         │   │       ├─ name: mytable\n" +
			"         │   │       └─ columns: [i s]\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: tabletest\n" +
			"         │       └─ columns: [i s]\n" +
			"         └─ TableAlias(ot)\n" +
			"             └─ IndexedTableAccess(othertable)\n" +
			"                 ├─ index: [othertable.i2]\n" +
			"                 ├─ columns: [s2 i2]\n" +
			"                 └─ keys: tabletest.i\n" +
			"",
	},
	{
		Query: `select a.pk, c.v2 from one_pk_three_idx a cross join one_pk_three_idx b right join one_pk_three_idx c on b.pk = c.v1 where b.pk = 0 and c.v2 = 0;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.pk:3!null, c.v2:1]\n" +
			" └─ Filter\n" +
			"     ├─ Eq\n" +
			"     │   ├─ b.pk:2!null\n" +
			"     │   └─ 0 (bigint)\n" +
			"     └─ LeftOuterHashJoin\n" +
			"         ├─ Eq\n" +
			"         │   ├─ b.pk:2!null\n" +
			"         │   └─ c.v1:0\n" +
			"         ├─ Filter\n" +
			"         │   ├─ Eq\n" +
			"         │   │   ├─ c.v2:1\n" +
			"         │   │   └─ 0 (bigint)\n" +
			"         │   └─ TableAlias(c)\n" +
			"         │       └─ ProcessTable\n" +
			"         │           └─ Table\n" +
			"         │               ├─ name: one_pk_three_idx\n" +
			"         │               └─ columns: [v1 v2]\n" +
			"         └─ HashLookup\n" +
			"             ├─ left-key: TUPLE(c.v1:0)\n" +
			"             ├─ right-key: TUPLE(b.pk:0!null)\n" +
			"             └─ CrossJoin\n" +
			"                 ├─ TableAlias(b)\n" +
			"                 │   └─ Table\n" +
			"                 │       ├─ name: one_pk_three_idx\n" +
			"                 │       ├─ columns: [pk]\n" +
			"                 │       ├─ colSet: (5-8)\n" +
			"                 │       └─ tableId: 2\n" +
			"                 └─ TableAlias(a)\n" +
			"                     └─ Table\n" +
			"                         ├─ name: one_pk_three_idx\n" +
			"                         ├─ columns: [pk]\n" +
			"                         ├─ colSet: (1-4)\n" +
			"                         └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.pk, c.v2]\n" +
			" └─ Filter\n" +
			"     ├─ (b.pk = 0)\n" +
			"     └─ LeftOuterHashJoin (estimated cost=36.130 rows=7)\n" +
			"         ├─ (b.pk = c.v1)\n" +
			"         ├─ Filter\n" +
			"         │   ├─ (c.v2 = 0)\n" +
			"         │   └─ TableAlias(c)\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: one_pk_three_idx\n" +
			"         │           └─ columns: [v1 v2]\n" +
			"         └─ HashLookup\n" +
			"             ├─ left-key: (c.v1)\n" +
			"             ├─ right-key: (b.pk)\n" +
			"             └─ CrossJoin\n" +
			"                 ├─ TableAlias(b)\n" +
			"                 │   └─ Table\n" +
			"                 │       ├─ name: one_pk_three_idx\n" +
			"                 │       └─ columns: [pk]\n" +
			"                 └─ TableAlias(a)\n" +
			"                     └─ Table\n" +
			"                         ├─ name: one_pk_three_idx\n" +
			"                         └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.pk, c.v2]\n" +
			" └─ Filter\n" +
			"     ├─ (b.pk = 0)\n" +
			"     └─ LeftOuterHashJoin (estimated cost=36.130 rows=7) (actual rows=32 loops=1)\n" +
			"         ├─ (b.pk = c.v1)\n" +
			"         ├─ Filter\n" +
			"         │   ├─ (c.v2 = 0)\n" +
			"         │   └─ TableAlias(c)\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: one_pk_three_idx\n" +
			"         │           └─ columns: [v1 v2]\n" +
			"         └─ HashLookup\n" +
			"             ├─ left-key: (c.v1)\n" +
			"             ├─ right-key: (b.pk)\n" +
			"             └─ CrossJoin\n" +
			"                 ├─ TableAlias(b)\n" +
			"                 │   └─ Table\n" +
			"                 │       ├─ name: one_pk_three_idx\n" +
			"                 │       └─ columns: [pk]\n" +
			"                 └─ TableAlias(a)\n" +
			"                     └─ Table\n" +
			"                         ├─ name: one_pk_three_idx\n" +
			"                         └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `select a.pk, c.v2 from one_pk_three_idx a cross join one_pk_three_idx b left join one_pk_three_idx c on b.pk = c.v1 where b.pk = 0 and a.v2 = 1;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.pk:1!null, c.v2:4]\n" +
			" └─ LeftOuterHashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ b.pk:0!null\n" +
			"     │   └─ c.v1:3\n" +
			"     ├─ CrossJoin\n" +
			"     │   ├─ TableAlias(b)\n" +
			"     │   │   └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     │   │       ├─ index: [one_pk_three_idx.pk]\n" +
			"     │   │       ├─ static: [{[0, 0]}]\n" +
			"     │   │       ├─ colSet: (5-8)\n" +
			"     │   │       ├─ tableId: 2\n" +
			"     │   │       └─ Table\n" +
			"     │   │           ├─ name: one_pk_three_idx\n" +
			"     │   │           └─ columns: [pk]\n" +
			"     │   └─ Filter\n" +
			"     │       ├─ Eq\n" +
			"     │       │   ├─ a.v2:1\n" +
			"     │       │   └─ 1 (bigint)\n" +
			"     │       └─ TableAlias(a)\n" +
			"     │           └─ ProcessTable\n" +
			"     │               └─ Table\n" +
			"     │                   ├─ name: one_pk_three_idx\n" +
			"     │                   └─ columns: [pk v2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(b.pk:0!null)\n" +
			"         ├─ right-key: TUPLE(c.v1:0)\n" +
			"         └─ TableAlias(c)\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk_three_idx\n" +
			"                 ├─ columns: [v1 v2]\n" +
			"                 ├─ colSet: (9-12)\n" +
			"                 └─ tableId: 3\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.pk, c.v2]\n" +
			" └─ LeftOuterHashJoin (estimated cost=30.130 rows=7)\n" +
			"     ├─ (b.pk = c.v1)\n" +
			"     ├─ CrossJoin (estimated cost=49.480 rows=6)\n" +
			"     │   ├─ TableAlias(b)\n" +
			"     │   │   └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     │   │       ├─ index: [one_pk_three_idx.pk]\n" +
			"     │   │       ├─ filters: [{[0, 0]}]\n" +
			"     │   │       └─ columns: [pk]\n" +
			"     │   └─ Filter\n" +
			"     │       ├─ (a.v2 = 1)\n" +
			"     │       └─ TableAlias(a)\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: one_pk_three_idx\n" +
			"     │               └─ columns: [pk v2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (b.pk)\n" +
			"         ├─ right-key: (c.v1)\n" +
			"         └─ TableAlias(c)\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk_three_idx\n" +
			"                 └─ columns: [v1 v2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.pk, c.v2]\n" +
			" └─ LeftOuterHashJoin (estimated cost=30.130 rows=7) (actual rows=4 loops=1)\n" +
			"     ├─ (b.pk = c.v1)\n" +
			"     ├─ CrossJoin (estimated cost=49.480 rows=6) (actual rows=1 loops=1)\n" +
			"     │   ├─ TableAlias(b)\n" +
			"     │   │   └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     │   │       ├─ index: [one_pk_three_idx.pk]\n" +
			"     │   │       ├─ filters: [{[0, 0]}]\n" +
			"     │   │       └─ columns: [pk]\n" +
			"     │   └─ Filter\n" +
			"     │       ├─ (a.v2 = 1)\n" +
			"     │       └─ TableAlias(a)\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: one_pk_three_idx\n" +
			"     │               └─ columns: [pk v2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (b.pk)\n" +
			"         ├─ right-key: (c.v1)\n" +
			"         └─ TableAlias(c)\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk_three_idx\n" +
			"                 └─ columns: [v1 v2]\n" +
			"",
	},
	{
		Query: `with a as (select a.i, a.s from mytable a CROSS JOIN mytable b) select * from a RIGHT JOIN mytable c on a.i+1 = c.i-1;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:2!null, a.s:3!null, c.i:0!null, c.s:1!null]\n" +
			" └─ LeftOuterJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ (a.i:2!null + 1 (tinyint))\n" +
			"     │   └─ (c.i:0!null - 1 (tinyint))\n" +
			"     ├─ TableAlias(c)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: a\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (5,6)\n" +
			"         ├─ tableId: 3\n" +
			"         └─ CrossJoin\n" +
			"             ├─ TableAlias(b)\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: mytable\n" +
			"             │       ├─ columns: []\n" +
			"             │       ├─ colSet: (3,4)\n" +
			"             │       └─ tableId: 2\n" +
			"             └─ TableAlias(a)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     ├─ columns: [i s]\n" +
			"                     ├─ colSet: (1,2)\n" +
			"                     └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s, c.i, c.s]\n" +
			" └─ LeftOuterJoin (estimated cost=302.000 rows=3)\n" +
			"     ├─ ((a.i + 1) = (c.i - 1))\n" +
			"     ├─ TableAlias(c)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: a\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ CrossJoin\n" +
			"             ├─ TableAlias(b)\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: mytable\n" +
			"             │       └─ columns: []\n" +
			"             └─ TableAlias(a)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s, c.i, c.s]\n" +
			" └─ LeftOuterJoin (estimated cost=302.000 rows=3) (actual rows=5 loops=1)\n" +
			"     ├─ ((a.i + 1) = (c.i - 1))\n" +
			"     ├─ TableAlias(c)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: a\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ CrossJoin\n" +
			"             ├─ TableAlias(b)\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: mytable\n" +
			"             │       └─ columns: []\n" +
			"             └─ TableAlias(a)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `select a.* from mytable a RIGHT JOIN mytable b on a.i = b.i+1 LEFT JOIN mytable c on a.i = c.i-1 RIGHT JOIN mytable d on b.i = d.i;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:2!null, a.s:3!null]\n" +
			" └─ LeftOuterJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ b.i:1!null\n" +
			"     │   └─ d.i:0!null\n" +
			"     ├─ TableAlias(d)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i]\n" +
			"     └─ LeftOuterJoin\n" +
			"         ├─ Eq\n" +
			"         │   ├─ a.i:2!null\n" +
			"         │   └─ (c.i:4!null - 1 (tinyint))\n" +
			"         ├─ LeftOuterMergeJoin\n" +
			"         │   ├─ cmp: Eq\n" +
			"         │   │   ├─ (b.i:1!null + 1 (tinyint))\n" +
			"         │   │   └─ a.i:2!null\n" +
			"         │   ├─ TableAlias(b)\n" +
			"         │   │   └─ IndexedTableAccess(mytable)\n" +
			"         │   │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │   │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │   │       ├─ colSet: (3,4)\n" +
			"         │   │       ├─ tableId: 2\n" +
			"         │   │       └─ Table\n" +
			"         │   │           ├─ name: mytable\n" +
			"         │   │           └─ columns: [i]\n" +
			"         │   └─ TableAlias(a)\n" +
			"         │       └─ IndexedTableAccess(mytable)\n" +
			"         │           ├─ index: [mytable.i,mytable.s]\n" +
			"         │           ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │           ├─ colSet: (1,2)\n" +
			"         │           ├─ tableId: 1\n" +
			"         │           └─ Table\n" +
			"         │               ├─ name: mytable\n" +
			"         │               └─ columns: [i s]\n" +
			"         └─ TableAlias(c)\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 ├─ columns: [i]\n" +
			"                 ├─ colSet: (5,6)\n" +
			"                 └─ tableId: 3\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ LeftOuterJoin (estimated cost=8.090 rows=3)\n" +
			"     ├─ (b.i = d.i)\n" +
			"     ├─ TableAlias(d)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ LeftOuterJoin (estimated cost=8.090 rows=3)\n" +
			"         ├─ (a.i = (c.i - 1))\n" +
			"         ├─ LeftOuterMergeJoin (estimated cost=6.120 rows=3)\n" +
			"         │   ├─ cmp: ((b.i + 1) = a.i)\n" +
			"         │   ├─ TableAlias(b)\n" +
			"         │   │   └─ IndexedTableAccess(mytable)\n" +
			"         │   │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │   │       └─ columns: [i]\n" +
			"         │   └─ TableAlias(a)\n" +
			"         │       └─ IndexedTableAccess(mytable)\n" +
			"         │           ├─ index: [mytable.i,mytable.s]\n" +
			"         │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │           └─ columns: [i s]\n" +
			"         └─ TableAlias(c)\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ LeftOuterJoin (estimated cost=8.090 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ (b.i = d.i)\n" +
			"     ├─ TableAlias(d)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: mytable\n" +
			"     │       └─ columns: [i]\n" +
			"     └─ LeftOuterJoin (estimated cost=8.090 rows=3) (actual rows=3 loops=3)\n" +
			"         ├─ (a.i = (c.i - 1))\n" +
			"         ├─ LeftOuterMergeJoin (estimated cost=6.120 rows=3) (actual rows=3 loops=3)\n" +
			"         │   ├─ cmp: ((b.i + 1) = a.i)\n" +
			"         │   ├─ TableAlias(b)\n" +
			"         │   │   └─ IndexedTableAccess(mytable)\n" +
			"         │   │       ├─ index: [mytable.i,mytable.s]\n" +
			"         │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │   │       └─ columns: [i]\n" +
			"         │   └─ TableAlias(a)\n" +
			"         │       └─ IndexedTableAccess(mytable)\n" +
			"         │           ├─ index: [mytable.i,mytable.s]\n" +
			"         │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"         │           └─ columns: [i s]\n" +
			"         └─ TableAlias(c)\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i]\n" +
			"",
	},
	{
		Query: `select a.*,b.* from mytable a RIGHT JOIN othertable b on a.i = b.i2+1 LEFT JOIN mytable c on a.i = c.i-1 LEFT JOIN othertable d on b.i2 = d.i2;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:2!null, a.s:3!null, b.s2:0!null, b.i2:1!null]\n" +
			" └─ LeftOuterJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ b.i2:1!null\n" +
			"     │   └─ d.i2:5!null\n" +
			"     ├─ LeftOuterJoin\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ a.i:2!null\n" +
			"     │   │   └─ (c.i:4!null - 1 (tinyint))\n" +
			"     │   ├─ LeftOuterMergeJoin\n" +
			"     │   │   ├─ cmp: Eq\n" +
			"     │   │   │   ├─ (b.i2:1!null + 1 (tinyint))\n" +
			"     │   │   │   └─ a.i:2!null\n" +
			"     │   │   ├─ TableAlias(b)\n" +
			"     │   │   │   └─ IndexedTableAccess(othertable)\n" +
			"     │   │   │       ├─ index: [othertable.i2]\n" +
			"     │   │   │       ├─ static: [{[NULL, ∞)}]\n" +
			"     │   │   │       ├─ colSet: (3,4)\n" +
			"     │   │   │       ├─ tableId: 2\n" +
			"     │   │   │       └─ Table\n" +
			"     │   │   │           ├─ name: othertable\n" +
			"     │   │   │           └─ columns: [s2 i2]\n" +
			"     │   │   └─ TableAlias(a)\n" +
			"     │   │       └─ IndexedTableAccess(mytable)\n" +
			"     │   │           ├─ index: [mytable.i,mytable.s]\n" +
			"     │   │           ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │           ├─ colSet: (1,2)\n" +
			"     │   │           ├─ tableId: 1\n" +
			"     │   │           └─ Table\n" +
			"     │   │               ├─ name: mytable\n" +
			"     │   │               └─ columns: [i s]\n" +
			"     │   └─ TableAlias(c)\n" +
			"     │       └─ ProcessTable\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: mytable\n" +
			"     │               └─ columns: [i]\n" +
			"     └─ TableAlias(d)\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: othertable\n" +
			"                 └─ columns: [i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s, b.s2, b.i2]\n" +
			" └─ LeftOuterJoin (estimated cost=8.090 rows=3)\n" +
			"     ├─ (b.i2 = d.i2)\n" +
			"     ├─ LeftOuterJoin (estimated cost=8.090 rows=3)\n" +
			"     │   ├─ (a.i = (c.i - 1))\n" +
			"     │   ├─ LeftOuterMergeJoin (estimated cost=6.120 rows=3)\n" +
			"     │   │   ├─ cmp: ((b.i2 + 1) = a.i)\n" +
			"     │   │   ├─ TableAlias(b)\n" +
			"     │   │   │   └─ IndexedTableAccess(othertable)\n" +
			"     │   │   │       ├─ index: [othertable.i2]\n" +
			"     │   │   │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │   │       └─ columns: [s2 i2]\n" +
			"     │   │   └─ TableAlias(a)\n" +
			"     │   │       └─ IndexedTableAccess(mytable)\n" +
			"     │   │           ├─ index: [mytable.i,mytable.s]\n" +
			"     │   │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │           └─ columns: [i s]\n" +
			"     │   └─ TableAlias(c)\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i]\n" +
			"     └─ TableAlias(d)\n" +
			"         └─ Table\n" +
			"             ├─ name: othertable\n" +
			"             └─ columns: [i2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s, b.s2, b.i2]\n" +
			" └─ LeftOuterJoin (estimated cost=8.090 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ (b.i2 = d.i2)\n" +
			"     ├─ LeftOuterJoin (estimated cost=8.090 rows=3) (actual rows=3 loops=1)\n" +
			"     │   ├─ (a.i = (c.i - 1))\n" +
			"     │   ├─ LeftOuterMergeJoin (estimated cost=6.120 rows=3) (actual rows=3 loops=1)\n" +
			"     │   │   ├─ cmp: ((b.i2 + 1) = a.i)\n" +
			"     │   │   ├─ TableAlias(b)\n" +
			"     │   │   │   └─ IndexedTableAccess(othertable)\n" +
			"     │   │   │       ├─ index: [othertable.i2]\n" +
			"     │   │   │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │   │       └─ columns: [s2 i2]\n" +
			"     │   │   └─ TableAlias(a)\n" +
			"     │   │       └─ IndexedTableAccess(mytable)\n" +
			"     │   │           ├─ index: [mytable.i,mytable.s]\n" +
			"     │   │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │           └─ columns: [i s]\n" +
			"     │   └─ TableAlias(c)\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i]\n" +
			"     └─ TableAlias(d)\n" +
			"         └─ Table\n" +
			"             ├─ name: othertable\n" +
			"             └─ columns: [i2]\n" +
			"",
	},
	{
		Query: `select a.*,b.* from mytable a RIGHT JOIN othertable b on a.i = b.i2+1 RIGHT JOIN mytable c on a.i = c.i-1 LEFT JOIN othertable d on b.i2 = d.i2;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:3!null, a.s:4!null, b.s2:1!null, b.i2:2!null]\n" +
			" └─ LeftOuterJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ b.i2:2!null\n" +
			"     │   └─ d.i2:5!null\n" +
			"     ├─ LeftOuterJoin\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ a.i:3!null\n" +
			"     │   │   └─ (c.i:0!null - 1 (tinyint))\n" +
			"     │   ├─ TableAlias(c)\n" +
			"     │   │   └─ ProcessTable\n" +
			"     │   │       └─ Table\n" +
			"     │   │           ├─ name: mytable\n" +
			"     │   │           └─ columns: [i]\n" +
			"     │   └─ LeftOuterMergeJoin\n" +
			"     │       ├─ cmp: Eq\n" +
			"     │       │   ├─ (b.i2:2!null + 1 (tinyint))\n" +
			"     │       │   └─ a.i:3!null\n" +
			"     │       ├─ TableAlias(b)\n" +
			"     │       │   └─ IndexedTableAccess(othertable)\n" +
			"     │       │       ├─ index: [othertable.i2]\n" +
			"     │       │       ├─ static: [{[NULL, ∞)}]\n" +
			"     │       │       ├─ colSet: (3,4)\n" +
			"     │       │       ├─ tableId: 2\n" +
			"     │       │       └─ Table\n" +
			"     │       │           ├─ name: othertable\n" +
			"     │       │           └─ columns: [s2 i2]\n" +
			"     │       └─ TableAlias(a)\n" +
			"     │           └─ IndexedTableAccess(mytable)\n" +
			"     │               ├─ index: [mytable.i,mytable.s]\n" +
			"     │               ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │               ├─ colSet: (1,2)\n" +
			"     │               ├─ tableId: 1\n" +
			"     │               └─ Table\n" +
			"     │                   ├─ name: mytable\n" +
			"     │                   └─ columns: [i s]\n" +
			"     └─ TableAlias(d)\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: othertable\n" +
			"                 └─ columns: [i2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s, b.s2, b.i2]\n" +
			" └─ LeftOuterJoin (estimated cost=8.090 rows=3)\n" +
			"     ├─ (b.i2 = d.i2)\n" +
			"     ├─ LeftOuterJoin (estimated cost=8.090 rows=3)\n" +
			"     │   ├─ (a.i = (c.i - 1))\n" +
			"     │   ├─ TableAlias(c)\n" +
			"     │   │   └─ Table\n" +
			"     │   │       ├─ name: mytable\n" +
			"     │   │       └─ columns: [i]\n" +
			"     │   └─ LeftOuterMergeJoin (estimated cost=6.120 rows=3)\n" +
			"     │       ├─ cmp: ((b.i2 + 1) = a.i)\n" +
			"     │       ├─ TableAlias(b)\n" +
			"     │       │   └─ IndexedTableAccess(othertable)\n" +
			"     │       │       ├─ index: [othertable.i2]\n" +
			"     │       │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │       │       └─ columns: [s2 i2]\n" +
			"     │       └─ TableAlias(a)\n" +
			"     │           └─ IndexedTableAccess(mytable)\n" +
			"     │               ├─ index: [mytable.i,mytable.s]\n" +
			"     │               ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │               └─ columns: [i s]\n" +
			"     └─ TableAlias(d)\n" +
			"         └─ Table\n" +
			"             ├─ name: othertable\n" +
			"             └─ columns: [i2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s, b.s2, b.i2]\n" +
			" └─ LeftOuterJoin (estimated cost=8.090 rows=3) (actual rows=3 loops=1)\n" +
			"     ├─ (b.i2 = d.i2)\n" +
			"     ├─ LeftOuterJoin (estimated cost=8.090 rows=3) (actual rows=3 loops=1)\n" +
			"     │   ├─ (a.i = (c.i - 1))\n" +
			"     │   ├─ TableAlias(c)\n" +
			"     │   │   └─ Table\n" +
			"     │   │       ├─ name: mytable\n" +
			"     │   │       └─ columns: [i]\n" +
			"     │   └─ LeftOuterMergeJoin (estimated cost=6.120 rows=3) (actual rows=3 loops=3)\n" +
			"     │       ├─ cmp: ((b.i2 + 1) = a.i)\n" +
			"     │       ├─ TableAlias(b)\n" +
			"     │       │   └─ IndexedTableAccess(othertable)\n" +
			"     │       │       ├─ index: [othertable.i2]\n" +
			"     │       │       ├─ filters: [{[NULL, ∞)}]\n" +
			"     │       │       └─ columns: [s2 i2]\n" +
			"     │       └─ TableAlias(a)\n" +
			"     │           └─ IndexedTableAccess(mytable)\n" +
			"     │               ├─ index: [mytable.i,mytable.s]\n" +
			"     │               ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │               └─ columns: [i s]\n" +
			"     └─ TableAlias(d)\n" +
			"         └─ Table\n" +
			"             ├─ name: othertable\n" +
			"             └─ columns: [i2]\n" +
			"",
	},
	{
		Query: `select i.pk, j.v3 from one_pk_two_idx i JOIN one_pk_three_idx j on i.v1 = j.pk;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [i.pk:0!null, j.v3:3]\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ i.v1:1\n" +
			"     │   └─ j.pk:2!null\n" +
			"     ├─ TableAlias(i)\n" +
			"     │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       ├─ colSet: (1-3)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: one_pk_two_idx\n" +
			"     │           └─ columns: [pk v1]\n" +
			"     └─ TableAlias(j)\n" +
			"         └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"             ├─ index: [one_pk_three_idx.pk]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (4-7)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk_three_idx\n" +
			"                 └─ columns: [pk v3]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [i.pk, j.v3]\n" +
			" └─ MergeJoin (estimated cost=16.240 rows=8)\n" +
			"     ├─ cmp: (i.v1 = j.pk)\n" +
			"     ├─ TableAlias(i)\n" +
			"     │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       └─ columns: [pk v1]\n" +
			"     └─ TableAlias(j)\n" +
			"         └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"             ├─ index: [one_pk_three_idx.pk]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [pk v3]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [i.pk, j.v3]\n" +
			" └─ MergeJoin (estimated cost=16.240 rows=8) (actual rows=8 loops=1)\n" +
			"     ├─ cmp: (i.v1 = j.pk)\n" +
			"     ├─ TableAlias(i)\n" +
			"     │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       └─ columns: [pk v1]\n" +
			"     └─ TableAlias(j)\n" +
			"         └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"             ├─ index: [one_pk_three_idx.pk]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [pk v3]\n" +
			"",
	},
	{
		Query: `select i.pk, j.v3, k.c1 from one_pk_two_idx i JOIN one_pk_three_idx j on i.v1 = j.pk JOIN one_pk k on j.v3 = k.pk;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [i.pk:0!null, j.v3:3, k.c1:5]\n" +
			" └─ HashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ j.v3:3\n" +
			"     │   └─ k.pk:4!null\n" +
			"     ├─ MergeJoin\n" +
			"     │   ├─ cmp: Eq\n" +
			"     │   │   ├─ i.v1:1\n" +
			"     │   │   └─ j.pk:2!null\n" +
			"     │   ├─ TableAlias(i)\n" +
			"     │   │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     │   │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     │   │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │       ├─ colSet: (1-3)\n" +
			"     │   │       ├─ tableId: 1\n" +
			"     │   │       └─ Table\n" +
			"     │   │           ├─ name: one_pk_two_idx\n" +
			"     │   │           └─ columns: [pk v1]\n" +
			"     │   └─ TableAlias(j)\n" +
			"     │       └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     │           ├─ index: [one_pk_three_idx.pk]\n" +
			"     │           ├─ static: [{[NULL, ∞)}]\n" +
			"     │           ├─ colSet: (4-7)\n" +
			"     │           ├─ tableId: 2\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: one_pk_three_idx\n" +
			"     │               └─ columns: [pk v3]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(j.v3:3)\n" +
			"         ├─ right-key: TUPLE(k.pk:0!null)\n" +
			"         └─ TableAlias(k)\n" +
			"             └─ ProcessTable\n" +
			"                 └─ Table\n" +
			"                     ├─ name: one_pk\n" +
			"                     └─ columns: [pk c1]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [i.pk, j.v3, k.c1]\n" +
			" └─ HashJoin (estimated cost=20.160 rows=8)\n" +
			"     ├─ (j.v3 = k.pk)\n" +
			"     ├─ MergeJoin (estimated cost=16.240 rows=8)\n" +
			"     │   ├─ cmp: (i.v1 = j.pk)\n" +
			"     │   ├─ TableAlias(i)\n" +
			"     │   │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     │   │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │       └─ columns: [pk v1]\n" +
			"     │   └─ TableAlias(j)\n" +
			"     │       └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     │           ├─ index: [one_pk_three_idx.pk]\n" +
			"     │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           └─ columns: [pk v3]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (j.v3)\n" +
			"         ├─ right-key: (k.pk)\n" +
			"         └─ TableAlias(k)\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk c1]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [i.pk, j.v3, k.c1]\n" +
			" └─ HashJoin (estimated cost=20.160 rows=8) (actual rows=7 loops=1)\n" +
			"     ├─ (j.v3 = k.pk)\n" +
			"     ├─ MergeJoin (estimated cost=16.240 rows=8) (actual rows=8 loops=1)\n" +
			"     │   ├─ cmp: (i.v1 = j.pk)\n" +
			"     │   ├─ TableAlias(i)\n" +
			"     │   │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     │   │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │       └─ columns: [pk v1]\n" +
			"     │   └─ TableAlias(j)\n" +
			"     │       └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     │           ├─ index: [one_pk_three_idx.pk]\n" +
			"     │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           └─ columns: [pk v3]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (j.v3)\n" +
			"         ├─ right-key: (k.pk)\n" +
			"         └─ TableAlias(k)\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk c1]\n" +
			"",
	},
	{
		Query: `select i.pk, j.v3 from (one_pk_two_idx i JOIN one_pk_three_idx j on((i.v1 = j.pk)));`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [i.pk:0!null, j.v3:3]\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ i.v1:1\n" +
			"     │   └─ j.pk:2!null\n" +
			"     ├─ TableAlias(i)\n" +
			"     │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       ├─ colSet: (1-3)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: one_pk_two_idx\n" +
			"     │           └─ columns: [pk v1]\n" +
			"     └─ TableAlias(j)\n" +
			"         └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"             ├─ index: [one_pk_three_idx.pk]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (4-7)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk_three_idx\n" +
			"                 └─ columns: [pk v3]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [i.pk, j.v3]\n" +
			" └─ MergeJoin (estimated cost=16.240 rows=8)\n" +
			"     ├─ cmp: (i.v1 = j.pk)\n" +
			"     ├─ TableAlias(i)\n" +
			"     │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       └─ columns: [pk v1]\n" +
			"     └─ TableAlias(j)\n" +
			"         └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"             ├─ index: [one_pk_three_idx.pk]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [pk v3]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [i.pk, j.v3]\n" +
			" └─ MergeJoin (estimated cost=16.240 rows=8) (actual rows=8 loops=1)\n" +
			"     ├─ cmp: (i.v1 = j.pk)\n" +
			"     ├─ TableAlias(i)\n" +
			"     │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │       └─ columns: [pk v1]\n" +
			"     └─ TableAlias(j)\n" +
			"         └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"             ├─ index: [one_pk_three_idx.pk]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [pk v3]\n" +
			"",
	},
	{
		Query: `select i.pk, j.v3, k.c1 from ((one_pk_two_idx i JOIN one_pk_three_idx j on ((i.v1 = j.pk))) JOIN one_pk k on((j.v3 = k.pk)));`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [i.pk:0!null, j.v3:3, k.c1:5]\n" +
			" └─ HashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ j.v3:3\n" +
			"     │   └─ k.pk:4!null\n" +
			"     ├─ MergeJoin\n" +
			"     │   ├─ cmp: Eq\n" +
			"     │   │   ├─ i.v1:1\n" +
			"     │   │   └─ j.pk:2!null\n" +
			"     │   ├─ TableAlias(i)\n" +
			"     │   │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     │   │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     │   │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │       ├─ colSet: (1-3)\n" +
			"     │   │       ├─ tableId: 1\n" +
			"     │   │       └─ Table\n" +
			"     │   │           ├─ name: one_pk_two_idx\n" +
			"     │   │           └─ columns: [pk v1]\n" +
			"     │   └─ TableAlias(j)\n" +
			"     │       └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     │           ├─ index: [one_pk_three_idx.pk]\n" +
			"     │           ├─ static: [{[NULL, ∞)}]\n" +
			"     │           ├─ colSet: (4-7)\n" +
			"     │           ├─ tableId: 2\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: one_pk_three_idx\n" +
			"     │               └─ columns: [pk v3]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(j.v3:3)\n" +
			"         ├─ right-key: TUPLE(k.pk:0!null)\n" +
			"         └─ TableAlias(k)\n" +
			"             └─ ProcessTable\n" +
			"                 └─ Table\n" +
			"                     ├─ name: one_pk\n" +
			"                     └─ columns: [pk c1]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [i.pk, j.v3, k.c1]\n" +
			" └─ HashJoin (estimated cost=20.160 rows=8)\n" +
			"     ├─ (j.v3 = k.pk)\n" +
			"     ├─ MergeJoin (estimated cost=16.240 rows=8)\n" +
			"     │   ├─ cmp: (i.v1 = j.pk)\n" +
			"     │   ├─ TableAlias(i)\n" +
			"     │   │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     │   │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │       └─ columns: [pk v1]\n" +
			"     │   └─ TableAlias(j)\n" +
			"     │       └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     │           ├─ index: [one_pk_three_idx.pk]\n" +
			"     │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           └─ columns: [pk v3]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (j.v3)\n" +
			"         ├─ right-key: (k.pk)\n" +
			"         └─ TableAlias(k)\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk c1]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [i.pk, j.v3, k.c1]\n" +
			" └─ HashJoin (estimated cost=20.160 rows=8) (actual rows=7 loops=1)\n" +
			"     ├─ (j.v3 = k.pk)\n" +
			"     ├─ MergeJoin (estimated cost=16.240 rows=8) (actual rows=8 loops=1)\n" +
			"     │   ├─ cmp: (i.v1 = j.pk)\n" +
			"     │   ├─ TableAlias(i)\n" +
			"     │   │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     │   │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │       └─ columns: [pk v1]\n" +
			"     │   └─ TableAlias(j)\n" +
			"     │       └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     │           ├─ index: [one_pk_three_idx.pk]\n" +
			"     │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           └─ columns: [pk v3]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (j.v3)\n" +
			"         ├─ right-key: (k.pk)\n" +
			"         └─ TableAlias(k)\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk c1]\n" +
			"",
	},
	{
		Query: `select i.pk, j.v3, k.c1 from (one_pk_two_idx i JOIN one_pk_three_idx j on ((i.v1 = j.pk)) JOIN one_pk k on((j.v3 = k.pk)))`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [i.pk:0!null, j.v3:3, k.c1:5]\n" +
			" └─ HashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ j.v3:3\n" +
			"     │   └─ k.pk:4!null\n" +
			"     ├─ MergeJoin\n" +
			"     │   ├─ cmp: Eq\n" +
			"     │   │   ├─ i.v1:1\n" +
			"     │   │   └─ j.pk:2!null\n" +
			"     │   ├─ TableAlias(i)\n" +
			"     │   │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     │   │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     │   │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │       ├─ colSet: (1-3)\n" +
			"     │   │       ├─ tableId: 1\n" +
			"     │   │       └─ Table\n" +
			"     │   │           ├─ name: one_pk_two_idx\n" +
			"     │   │           └─ columns: [pk v1]\n" +
			"     │   └─ TableAlias(j)\n" +
			"     │       └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     │           ├─ index: [one_pk_three_idx.pk]\n" +
			"     │           ├─ static: [{[NULL, ∞)}]\n" +
			"     │           ├─ colSet: (4-7)\n" +
			"     │           ├─ tableId: 2\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: one_pk_three_idx\n" +
			"     │               └─ columns: [pk v3]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(j.v3:3)\n" +
			"         ├─ right-key: TUPLE(k.pk:0!null)\n" +
			"         └─ TableAlias(k)\n" +
			"             └─ ProcessTable\n" +
			"                 └─ Table\n" +
			"                     ├─ name: one_pk\n" +
			"                     └─ columns: [pk c1]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [i.pk, j.v3, k.c1]\n" +
			" └─ HashJoin (estimated cost=20.160 rows=8)\n" +
			"     ├─ (j.v3 = k.pk)\n" +
			"     ├─ MergeJoin (estimated cost=16.240 rows=8)\n" +
			"     │   ├─ cmp: (i.v1 = j.pk)\n" +
			"     │   ├─ TableAlias(i)\n" +
			"     │   │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     │   │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │       └─ columns: [pk v1]\n" +
			"     │   └─ TableAlias(j)\n" +
			"     │       └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     │           ├─ index: [one_pk_three_idx.pk]\n" +
			"     │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           └─ columns: [pk v3]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (j.v3)\n" +
			"         ├─ right-key: (k.pk)\n" +
			"         └─ TableAlias(k)\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk c1]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [i.pk, j.v3, k.c1]\n" +
			" └─ HashJoin (estimated cost=20.160 rows=8) (actual rows=7 loops=1)\n" +
			"     ├─ (j.v3 = k.pk)\n" +
			"     ├─ MergeJoin (estimated cost=16.240 rows=8) (actual rows=8 loops=1)\n" +
			"     │   ├─ cmp: (i.v1 = j.pk)\n" +
			"     │   ├─ TableAlias(i)\n" +
			"     │   │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     │   │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │       └─ columns: [pk v1]\n" +
			"     │   └─ TableAlias(j)\n" +
			"     │       └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     │           ├─ index: [one_pk_three_idx.pk]\n" +
			"     │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │           └─ columns: [pk v3]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (j.v3)\n" +
			"         ├─ right-key: (k.pk)\n" +
			"         └─ TableAlias(k)\n" +
			"             └─ Table\n" +
			"                 ├─ name: one_pk\n" +
			"                 └─ columns: [pk c1]\n" +
			"",
	},
	{
		Query: `select a.* from one_pk_two_idx a RIGHT JOIN (one_pk_two_idx i JOIN one_pk_three_idx j on i.v1 = j.pk) on a.pk = i.v1 LEFT JOIN (one_pk_two_idx k JOIN one_pk_three_idx l on k.v1 = l.pk) on a.pk = l.v2;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.pk:2!null, a.v1:3, a.v2:4]\n" +
			" └─ LeftOuterHashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ a.pk:2!null\n" +
			"     │   └─ l.v2:7\n" +
			"     ├─ LeftOuterHashJoin\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ a.pk:2!null\n" +
			"     │   │   └─ i.v1:0\n" +
			"     │   ├─ MergeJoin\n" +
			"     │   │   ├─ cmp: Eq\n" +
			"     │   │   │   ├─ i.v1:0\n" +
			"     │   │   │   └─ j.pk:1!null\n" +
			"     │   │   ├─ TableAlias(i)\n" +
			"     │   │   │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     │   │   │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     │   │   │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │   │       ├─ colSet: (4-6)\n" +
			"     │   │   │       ├─ tableId: 2\n" +
			"     │   │   │       └─ Table\n" +
			"     │   │   │           ├─ name: one_pk_two_idx\n" +
			"     │   │   │           └─ columns: [v1]\n" +
			"     │   │   └─ TableAlias(j)\n" +
			"     │   │       └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     │   │           ├─ index: [one_pk_three_idx.pk]\n" +
			"     │   │           ├─ static: [{[NULL, ∞)}]\n" +
			"     │   │           ├─ colSet: (7-10)\n" +
			"     │   │           ├─ tableId: 3\n" +
			"     │   │           └─ Table\n" +
			"     │   │               ├─ name: one_pk_three_idx\n" +
			"     │   │               └─ columns: [pk]\n" +
			"     │   └─ HashLookup\n" +
			"     │       ├─ left-key: TUPLE(i.v1:0)\n" +
			"     │       ├─ right-key: TUPLE(a.pk:0!null)\n" +
			"     │       └─ TableAlias(a)\n" +
			"     │           └─ ProcessTable\n" +
			"     │               └─ Table\n" +
			"     │                   ├─ name: one_pk_two_idx\n" +
			"     │                   └─ columns: [pk v1 v2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(a.pk:2!null)\n" +
			"         ├─ right-key: TUPLE(l.v2:2)\n" +
			"         └─ MergeJoin\n" +
			"             ├─ cmp: Eq\n" +
			"             │   ├─ k.v1:5\n" +
			"             │   └─ l.pk:6!null\n" +
			"             ├─ TableAlias(k)\n" +
			"             │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"             │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"             │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             │       ├─ colSet: (11-13)\n" +
			"             │       ├─ tableId: 4\n" +
			"             │       └─ Table\n" +
			"             │           ├─ name: one_pk_two_idx\n" +
			"             │           └─ columns: [v1]\n" +
			"             └─ TableAlias(l)\n" +
			"                 └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"                     ├─ index: [one_pk_three_idx.pk]\n" +
			"                     ├─ static: [{[NULL, ∞)}]\n" +
			"                     ├─ colSet: (14-17)\n" +
			"                     ├─ tableId: 5\n" +
			"                     └─ Table\n" +
			"                         ├─ name: one_pk_three_idx\n" +
			"                         └─ columns: [pk v2]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.pk, a.v1, a.v2]\n" +
			" └─ LeftOuterHashJoin (estimated cost=34.200 rows=10)\n" +
			"     ├─ (a.pk = l.v2)\n" +
			"     ├─ LeftOuterHashJoin (estimated cost=32.180 rows=10)\n" +
			"     │   ├─ (a.pk = i.v1)\n" +
			"     │   ├─ MergeJoin (estimated cost=16.240 rows=8)\n" +
			"     │   │   ├─ cmp: (i.v1 = j.pk)\n" +
			"     │   │   ├─ TableAlias(i)\n" +
			"     │   │   │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     │   │   │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     │   │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │   │       └─ columns: [v1]\n" +
			"     │   │   └─ TableAlias(j)\n" +
			"     │   │       └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     │   │           ├─ index: [one_pk_three_idx.pk]\n" +
			"     │   │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │           └─ columns: [pk]\n" +
			"     │   └─ HashLookup\n" +
			"     │       ├─ left-key: (i.v1)\n" +
			"     │       ├─ right-key: (a.pk)\n" +
			"     │       └─ TableAlias(a)\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: one_pk_two_idx\n" +
			"     │               └─ columns: [pk v1 v2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (a.pk)\n" +
			"         ├─ right-key: (l.v2)\n" +
			"         └─ MergeJoin\n" +
			"             ├─ cmp: (k.v1 = l.pk)\n" +
			"             ├─ TableAlias(k)\n" +
			"             │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"             │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"             │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             │       └─ columns: [v1]\n" +
			"             └─ TableAlias(l)\n" +
			"                 └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"                     ├─ index: [one_pk_three_idx.pk]\n" +
			"                     ├─ filters: [{[NULL, ∞)}]\n" +
			"                     └─ columns: [pk v2]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.pk, a.v1, a.v2]\n" +
			" └─ LeftOuterHashJoin (estimated cost=34.200 rows=10) (actual rows=11 loops=1)\n" +
			"     ├─ (a.pk = l.v2)\n" +
			"     ├─ LeftOuterHashJoin (estimated cost=32.180 rows=10) (actual rows=8 loops=1)\n" +
			"     │   ├─ (a.pk = i.v1)\n" +
			"     │   ├─ MergeJoin (estimated cost=16.240 rows=8) (actual rows=8 loops=1)\n" +
			"     │   │   ├─ cmp: (i.v1 = j.pk)\n" +
			"     │   │   ├─ TableAlias(i)\n" +
			"     │   │   │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     │   │   │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     │   │   │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │   │   │       └─ columns: [v1]\n" +
			"     │   │   └─ TableAlias(j)\n" +
			"     │   │       └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     │   │           ├─ index: [one_pk_three_idx.pk]\n" +
			"     │   │           ├─ filters: [{[NULL, ∞)}]\n" +
			"     │   │           └─ columns: [pk]\n" +
			"     │   └─ HashLookup\n" +
			"     │       ├─ left-key: (i.v1)\n" +
			"     │       ├─ right-key: (a.pk)\n" +
			"     │       └─ TableAlias(a)\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: one_pk_two_idx\n" +
			"     │               └─ columns: [pk v1 v2]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (a.pk)\n" +
			"         ├─ right-key: (l.v2)\n" +
			"         └─ MergeJoin\n" +
			"             ├─ cmp: (k.v1 = l.pk)\n" +
			"             ├─ TableAlias(k)\n" +
			"             │   └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"             │       ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"             │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"             │       └─ columns: [v1]\n" +
			"             └─ TableAlias(l)\n" +
			"                 └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"                     ├─ index: [one_pk_three_idx.pk]\n" +
			"                     ├─ filters: [{[NULL, ∞)}]\n" +
			"                     └─ columns: [pk v2]\n" +
			"",
	},
	{
		Query: `select a.* from one_pk_two_idx a LEFT JOIN (one_pk_two_idx i JOIN one_pk_three_idx j on i.pk = j.v3) on a.pk = i.pk RIGHT JOIN (one_pk_two_idx k JOIN one_pk_three_idx l on k.v2 = l.v3) on a.v1 = l.v2;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.pk:3!null, a.v1:4, a.v2:5]\n" +
			" └─ LeftOuterHashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ a.v1:4\n" +
			"     │   └─ l.v2:1\n" +
			"     ├─ HashJoin\n" +
			"     │   ├─ Eq\n" +
			"     │   │   ├─ k.v2:0\n" +
			"     │   │   └─ l.v3:2\n" +
			"     │   ├─ TableAlias(k)\n" +
			"     │   │   └─ ProcessTable\n" +
			"     │   │       └─ Table\n" +
			"     │   │           ├─ name: one_pk_two_idx\n" +
			"     │   │           └─ columns: [v2]\n" +
			"     │   └─ HashLookup\n" +
			"     │       ├─ left-key: TUPLE(k.v2:0)\n" +
			"     │       ├─ right-key: TUPLE(l.v3:1)\n" +
			"     │       └─ TableAlias(l)\n" +
			"     │           └─ ProcessTable\n" +
			"     │               └─ Table\n" +
			"     │                   ├─ name: one_pk_three_idx\n" +
			"     │                   └─ columns: [v2 v3]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(l.v2:1)\n" +
			"         ├─ right-key: TUPLE(a.v1:1)\n" +
			"         └─ LeftOuterHashJoin\n" +
			"             ├─ Eq\n" +
			"             │   ├─ a.pk:3!null\n" +
			"             │   └─ i.pk:7!null\n" +
			"             ├─ TableAlias(a)\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: one_pk_two_idx\n" +
			"             │       ├─ columns: [pk v1 v2]\n" +
			"             │       ├─ colSet: (1-3)\n" +
			"             │       └─ tableId: 1\n" +
			"             └─ HashLookup\n" +
			"                 ├─ left-key: TUPLE(a.pk:3!null)\n" +
			"                 ├─ right-key: TUPLE(i.pk:1!null)\n" +
			"                 └─ LookupJoin\n" +
			"                     ├─ TableAlias(j)\n" +
			"                     │   └─ Table\n" +
			"                     │       ├─ name: one_pk_three_idx\n" +
			"                     │       ├─ columns: [v3]\n" +
			"                     │       ├─ colSet: (7-10)\n" +
			"                     │       └─ tableId: 3\n" +
			"                     └─ TableAlias(i)\n" +
			"                         └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"                             ├─ index: [one_pk_two_idx.pk]\n" +
			"                             ├─ keys: [j.v3:6]\n" +
			"                             ├─ colSet: (4-6)\n" +
			"                             ├─ tableId: 2\n" +
			"                             └─ Table\n" +
			"                                 ├─ name: one_pk_two_idx\n" +
			"                                 └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.pk, a.v1, a.v2]\n" +
			" └─ LeftOuterHashJoin (estimated cost=40.220 rows=12)\n" +
			"     ├─ (a.v1 = l.v2)\n" +
			"     ├─ HashJoin (estimated cost=32.180 rows=10)\n" +
			"     │   ├─ (k.v2 = l.v3)\n" +
			"     │   ├─ TableAlias(k)\n" +
			"     │   │   └─ Table\n" +
			"     │   │       ├─ name: one_pk_two_idx\n" +
			"     │   │       └─ columns: [v2]\n" +
			"     │   └─ HashLookup\n" +
			"     │       ├─ left-key: (k.v2)\n" +
			"     │       ├─ right-key: (l.v3)\n" +
			"     │       └─ TableAlias(l)\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: one_pk_three_idx\n" +
			"     │               └─ columns: [v2 v3]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (l.v2)\n" +
			"         ├─ right-key: (a.v1)\n" +
			"         └─ LeftOuterHashJoin\n" +
			"             ├─ (a.pk = i.pk)\n" +
			"             ├─ TableAlias(a)\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: one_pk_two_idx\n" +
			"             │       └─ columns: [pk v1 v2]\n" +
			"             └─ HashLookup\n" +
			"                 ├─ left-key: (a.pk)\n" +
			"                 ├─ right-key: (i.pk)\n" +
			"                 └─ LookupJoin\n" +
			"                     ├─ TableAlias(j)\n" +
			"                     │   └─ Table\n" +
			"                     │       ├─ name: one_pk_three_idx\n" +
			"                     │       └─ columns: [v3]\n" +
			"                     └─ TableAlias(i)\n" +
			"                         └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"                             ├─ index: [one_pk_two_idx.pk]\n" +
			"                             ├─ columns: [pk]\n" +
			"                             └─ keys: j.v3\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.pk, a.v1, a.v2]\n" +
			" └─ LeftOuterHashJoin (estimated cost=40.220 rows=12) (actual rows=20 loops=1)\n" +
			"     ├─ (a.v1 = l.v2)\n" +
			"     ├─ HashJoin (estimated cost=32.180 rows=10) (actual rows=8 loops=1)\n" +
			"     │   ├─ (k.v2 = l.v3)\n" +
			"     │   ├─ TableAlias(k)\n" +
			"     │   │   └─ Table\n" +
			"     │   │       ├─ name: one_pk_two_idx\n" +
			"     │   │       └─ columns: [v2]\n" +
			"     │   └─ HashLookup\n" +
			"     │       ├─ left-key: (k.v2)\n" +
			"     │       ├─ right-key: (l.v3)\n" +
			"     │       └─ TableAlias(l)\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: one_pk_three_idx\n" +
			"     │               └─ columns: [v2 v3]\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (l.v2)\n" +
			"         ├─ right-key: (a.v1)\n" +
			"         └─ LeftOuterHashJoin\n" +
			"             ├─ (a.pk = i.pk)\n" +
			"             ├─ TableAlias(a)\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: one_pk_two_idx\n" +
			"             │       └─ columns: [pk v1 v2]\n" +
			"             └─ HashLookup\n" +
			"                 ├─ left-key: (a.pk)\n" +
			"                 ├─ right-key: (i.pk)\n" +
			"                 └─ LookupJoin\n" +
			"                     ├─ TableAlias(j)\n" +
			"                     │   └─ Table\n" +
			"                     │       ├─ name: one_pk_three_idx\n" +
			"                     │       └─ columns: [v3]\n" +
			"                     └─ TableAlias(i)\n" +
			"                         └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"                             ├─ index: [one_pk_two_idx.pk]\n" +
			"                             ├─ columns: [pk]\n" +
			"                             └─ keys: j.v3\n" +
			"",
	},
	{
		Query: `select a.* from mytable a join mytable b on a.i = b.i and a.i > 2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:0!null, a.s:1!null]\n" +
			" └─ LookupJoin\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ static: [{(2, ∞)}]\n" +
			"     │       ├─ colSet: (1,2)\n" +
			"     │       ├─ tableId: 1\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: mytable\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ keys: [a.i:0!null]\n" +
			"             ├─ colSet: (3,4)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ LookupJoin (estimated cost=3.300 rows=1)\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ filters: [{(2, ∞)}]\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ columns: [i]\n" +
			"             └─ keys: a.i\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ LookupJoin (estimated cost=3.300 rows=1) (actual rows=1 loops=1)\n" +
			"     ├─ TableAlias(a)\n" +
			"     │   └─ IndexedTableAccess(mytable)\n" +
			"     │       ├─ index: [mytable.i]\n" +
			"     │       ├─ filters: [{(2, ∞)}]\n" +
			"     │       └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ columns: [i]\n" +
			"             └─ keys: a.i\n" +
			"",
	},
	{
		Query: `select a.* from mytable a join mytable b on a.i = b.i and now() >= coalesce(NULL, NULL, now())`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:0!null, a.s:1!null]\n" +
			" └─ MergeJoin\n" +
			"     ├─ cmp: Eq\n" +
			"     │   ├─ a.i:0!null\n" +
			"     │   └─ b.i:2!null\n" +
			"     ├─ Filter\n" +
			"     │   ├─ GreaterThanOrEqual\n" +
			"     │   │   ├─ NOW()\n" +
			"     │   │   └─ coalesce(NULL (null),NULL (null),NOW())\n" +
			"     │   └─ TableAlias(a)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.i,mytable.s]\n" +
			"     │           ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           ├─ colSet: (1,2)\n" +
			"     │           ├─ tableId: 1\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: mytable\n" +
			"     │               └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (3,4)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ MergeJoin (estimated cost=5.070 rows=2)\n" +
			"     ├─ cmp: (a.i = b.i)\n" +
			"     ├─ Filter\n" +
			"     │   ├─ (NOW() >= coalesce(NULL,NULL,NOW()))\n" +
			"     │   └─ TableAlias(a)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.i,mytable.s]\n" +
			"     │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s]\n" +
			" └─ MergeJoin (estimated cost=5.070 rows=2) (actual rows=3 loops=1)\n" +
			"     ├─ cmp: (a.i = b.i)\n" +
			"     ├─ Filter\n" +
			"     │   ├─ (NOW() >= coalesce(NULL,NULL,NOW()))\n" +
			"     │   └─ TableAlias(a)\n" +
			"     │       └─ IndexedTableAccess(mytable)\n" +
			"     │           ├─ index: [mytable.i,mytable.s]\n" +
			"     │           ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			"     │           └─ columns: [i s]\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT * from one_pk_three_idx where pk < 1 and v1 = 1 and v2 = 1`,
		ExpectedPlan: "Filter\n" +
			" ├─ LessThan\n" +
			" │   ├─ one_pk_three_idx.pk:0!null\n" +
			" │   └─ 1 (bigint)\n" +
			" └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     ├─ index: [one_pk_three_idx.v1,one_pk_three_idx.v2,one_pk_three_idx.v3]\n" +
			"     ├─ static: [{[1, 1], [1, 1], [NULL, ∞)}]\n" +
			"     ├─ colSet: (1-4)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: one_pk_three_idx\n" +
			"         └─ columns: [pk v1 v2 v3]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (one_pk_three_idx.pk < 1)\n" +
			" └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     ├─ index: [one_pk_three_idx.v1,one_pk_three_idx.v2,one_pk_three_idx.v3]\n" +
			"     ├─ filters: [{[1, 1], [1, 1], [NULL, ∞)}]\n" +
			"     └─ columns: [pk v1 v2 v3]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (one_pk_three_idx.pk < 1)\n" +
			" └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     ├─ index: [one_pk_three_idx.v1,one_pk_three_idx.v2,one_pk_three_idx.v3]\n" +
			"     ├─ filters: [{[1, 1], [1, 1], [NULL, ∞)}]\n" +
			"     └─ columns: [pk v1 v2 v3]\n" +
			"",
	},
	{
		Query: `SELECT * from one_pk_three_idx where pk = 1 and v1 = 1 and v2 = 1`,
		ExpectedPlan: "Filter\n" +
			" ├─ AND\n" +
			" │   ├─ Eq\n" +
			" │   │   ├─ one_pk_three_idx.v1:1\n" +
			" │   │   └─ 1 (bigint)\n" +
			" │   └─ Eq\n" +
			" │       ├─ one_pk_three_idx.v2:2\n" +
			" │       └─ 1 (bigint)\n" +
			" └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     ├─ index: [one_pk_three_idx.pk]\n" +
			"     ├─ static: [{[1, 1]}]\n" +
			"     ├─ colSet: (1-4)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: one_pk_three_idx\n" +
			"         └─ columns: [pk v1 v2 v3]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ ((one_pk_three_idx.v1 = 1) AND (one_pk_three_idx.v2 = 1))\n" +
			" └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     ├─ index: [one_pk_three_idx.pk]\n" +
			"     ├─ filters: [{[1, 1]}]\n" +
			"     └─ columns: [pk v1 v2 v3]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ ((one_pk_three_idx.v1 = 1) AND (one_pk_three_idx.v2 = 1))\n" +
			" └─ IndexedTableAccess(one_pk_three_idx)\n" +
			"     ├─ index: [one_pk_three_idx.pk]\n" +
			"     ├─ filters: [{[1, 1]}]\n" +
			"     └─ columns: [pk v1 v2 v3]\n" +
			"",
	},
	{
		Query: `select * from mytable a join niltable  b on a.i = b.i and b <=> NULL`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ a.i:0!null\n" +
			" │   └─ b.i:2!null\n" +
			" ├─ sel: (b.b:4 <=> NULL (null))\n" +
			" ├─ TableAlias(a)\n" +
			" │   └─ IndexedTableAccess(mytable)\n" +
			" │       ├─ index: [mytable.i,mytable.s]\n" +
			" │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │       ├─ colSet: (1,2)\n" +
			" │       ├─ tableId: 1\n" +
			" │       └─ Table\n" +
			" │           ├─ name: mytable\n" +
			" │           └─ columns: [i s]\n" +
			" └─ TableAlias(b)\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (3-6)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: niltable\n" +
			"             └─ columns: [i i2 b f]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=9.120 rows=3)\n" +
			" ├─ cmp: (a.i = b.i)\n" +
			" ├─ sel: (b.b <=> NULL)\n" +
			" ├─ TableAlias(a)\n" +
			" │   └─ IndexedTableAccess(mytable)\n" +
			" │       ├─ index: [mytable.i,mytable.s]\n" +
			" │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │       └─ columns: [i s]\n" +
			" └─ TableAlias(b)\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i i2 b f]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=9.120 rows=3) (actual rows=1 loops=1)\n" +
			" ├─ cmp: (a.i = b.i)\n" +
			" ├─ sel: (b.b <=> NULL)\n" +
			" ├─ TableAlias(a)\n" +
			" │   └─ IndexedTableAccess(mytable)\n" +
			" │       ├─ index: [mytable.i,mytable.s]\n" +
			" │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │       └─ columns: [i s]\n" +
			" └─ TableAlias(b)\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i i2 b f]\n" +
			"",
	},
	{
		Query: `select * from mytable a join niltable  b on a.i = b.i and b IS NOT NULL`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ a.i:0!null\n" +
			" │   └─ b.i:2!null\n" +
			" ├─ sel: NOT\n" +
			" │   └─ b.b:4 IS NULL\n" +
			" ├─ TableAlias(a)\n" +
			" │   └─ IndexedTableAccess(mytable)\n" +
			" │       ├─ index: [mytable.i,mytable.s]\n" +
			" │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │       ├─ colSet: (1,2)\n" +
			" │       ├─ tableId: 1\n" +
			" │       └─ Table\n" +
			" │           ├─ name: mytable\n" +
			" │           └─ columns: [i s]\n" +
			" └─ TableAlias(b)\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (3-6)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: niltable\n" +
			"             └─ columns: [i i2 b f]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=9.120 rows=3)\n" +
			" ├─ cmp: (a.i = b.i)\n" +
			" ├─ sel: (NOT(b.b IS NULL))\n" +
			" ├─ TableAlias(a)\n" +
			" │   └─ IndexedTableAccess(mytable)\n" +
			" │       ├─ index: [mytable.i,mytable.s]\n" +
			" │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │       └─ columns: [i s]\n" +
			" └─ TableAlias(b)\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i i2 b f]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=9.120 rows=3) (actual rows=2 loops=1)\n" +
			" ├─ cmp: (a.i = b.i)\n" +
			" ├─ sel: (NOT(b.b IS NULL))\n" +
			" ├─ TableAlias(a)\n" +
			" │   └─ IndexedTableAccess(mytable)\n" +
			" │       ├─ index: [mytable.i,mytable.s]\n" +
			" │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │       └─ columns: [i s]\n" +
			" └─ TableAlias(b)\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i i2 b f]\n" +
			"",
	},
	{
		Query: `select * from mytable a join niltable  b on a.i = b.i and b != 0`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ a.i:0!null\n" +
			" │   └─ b.i:2!null\n" +
			" ├─ TableAlias(a)\n" +
			" │   └─ IndexedTableAccess(mytable)\n" +
			" │       ├─ index: [mytable.i,mytable.s]\n" +
			" │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │       ├─ colSet: (1,2)\n" +
			" │       ├─ tableId: 1\n" +
			" │       └─ Table\n" +
			" │           ├─ name: mytable\n" +
			" │           └─ columns: [i s]\n" +
			" └─ Filter\n" +
			"     ├─ NOT\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ b.b:2\n" +
			"     │       └─ 0 (tinyint)\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(niltable)\n" +
			"             ├─ index: [niltable.i]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ colSet: (3-6)\n" +
			"             ├─ tableId: 2\n" +
			"             └─ Table\n" +
			"                 ├─ name: niltable\n" +
			"                 └─ columns: [i i2 b f]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=8.110 rows=3)\n" +
			" ├─ cmp: (a.i = b.i)\n" +
			" ├─ TableAlias(a)\n" +
			" │   └─ IndexedTableAccess(mytable)\n" +
			" │       ├─ index: [mytable.i,mytable.s]\n" +
			" │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │       └─ columns: [i s]\n" +
			" └─ Filter\n" +
			"     ├─ (NOT((b.b = 0)))\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(niltable)\n" +
			"             ├─ index: [niltable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [i i2 b f]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=8.110 rows=3) (actual rows=1 loops=1)\n" +
			" ├─ cmp: (a.i = b.i)\n" +
			" ├─ TableAlias(a)\n" +
			" │   └─ IndexedTableAccess(mytable)\n" +
			" │       ├─ index: [mytable.i,mytable.s]\n" +
			" │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │       └─ columns: [i s]\n" +
			" └─ Filter\n" +
			"     ├─ (NOT((b.b = 0)))\n" +
			"     └─ TableAlias(b)\n" +
			"         └─ IndexedTableAccess(niltable)\n" +
			"             ├─ index: [niltable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             └─ columns: [i i2 b f]\n" +
			"",
	},
	{
		Query: `select * from mytable a join niltable  b on a.i = b.i and s IS NOT NULL`,
		ExpectedPlan: "MergeJoin\n" +
			" ├─ cmp: Eq\n" +
			" │   ├─ a.i:0!null\n" +
			" │   └─ b.i:2!null\n" +
			" ├─ sel: NOT\n" +
			" │   └─ a.s:1!null IS NULL\n" +
			" ├─ TableAlias(a)\n" +
			" │   └─ IndexedTableAccess(mytable)\n" +
			" │       ├─ index: [mytable.i,mytable.s]\n" +
			" │       ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │       ├─ colSet: (1,2)\n" +
			" │       ├─ tableId: 1\n" +
			" │       └─ Table\n" +
			" │           ├─ name: mytable\n" +
			" │           └─ columns: [i s]\n" +
			" └─ TableAlias(b)\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (3-6)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: niltable\n" +
			"             └─ columns: [i i2 b f]\n" +
			"",
		ExpectedEstimates: "MergeJoin (estimated cost=9.120 rows=3)\n" +
			" ├─ cmp: (a.i = b.i)\n" +
			" ├─ sel: (NOT(a.s IS NULL))\n" +
			" ├─ TableAlias(a)\n" +
			" │   └─ IndexedTableAccess(mytable)\n" +
			" │       ├─ index: [mytable.i,mytable.s]\n" +
			" │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │       └─ columns: [i s]\n" +
			" └─ TableAlias(b)\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i i2 b f]\n" +
			"",
		ExpectedAnalysis: "MergeJoin (estimated cost=9.120 rows=3) (actual rows=3 loops=1)\n" +
			" ├─ cmp: (a.i = b.i)\n" +
			" ├─ sel: (NOT(a.s IS NULL))\n" +
			" ├─ TableAlias(a)\n" +
			" │   └─ IndexedTableAccess(mytable)\n" +
			" │       ├─ index: [mytable.i,mytable.s]\n" +
			" │       ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" │       └─ columns: [i s]\n" +
			" └─ TableAlias(b)\n" +
			"     └─ IndexedTableAccess(niltable)\n" +
			"         ├─ index: [niltable.i]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i i2 b f]\n" +
			"",
	},
	{
		Query: `select * from mytable a join niltable  b on a.i <> b.i and b != 0;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:4!null, a.s:5!null, b.i:0!null, b.i2:1, b.b:2, b.f:3]\n" +
			" └─ InnerJoin\n" +
			"     ├─ NOT\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ a.i:4!null\n" +
			"     │       └─ b.i:0!null\n" +
			"     ├─ Filter\n" +
			"     │   ├─ NOT\n" +
			"     │   │   └─ Eq\n" +
			"     │   │       ├─ b.b:2\n" +
			"     │   │       └─ 0 (tinyint)\n" +
			"     │   └─ TableAlias(b)\n" +
			"     │       └─ ProcessTable\n" +
			"     │           └─ Table\n" +
			"     │               ├─ name: niltable\n" +
			"     │               └─ columns: [i i2 b f]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s, b.i, b.i2, b.b, b.f]\n" +
			" └─ InnerJoin (estimated cost=16.150 rows=3)\n" +
			"     ├─ (NOT((a.i = b.i)))\n" +
			"     ├─ Filter\n" +
			"     │   ├─ (NOT((b.b = 0)))\n" +
			"     │   └─ TableAlias(b)\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: niltable\n" +
			"     │           └─ columns: [i i2 b f]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s, b.i, b.i2, b.b, b.f]\n" +
			" └─ InnerJoin (estimated cost=16.150 rows=3) (actual rows=5 loops=1)\n" +
			"     ├─ (NOT((a.i = b.i)))\n" +
			"     ├─ Filter\n" +
			"     │   ├─ (NOT((b.b = 0)))\n" +
			"     │   └─ TableAlias(b)\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: niltable\n" +
			"     │           └─ columns: [i i2 b f]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `select * from mytable a join niltable b on a.i <> b.i;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.i:4!null, a.s:5!null, b.i:0!null, b.i2:1, b.b:2, b.f:3]\n" +
			" └─ InnerJoin\n" +
			"     ├─ NOT\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ a.i:4!null\n" +
			"     │       └─ b.i:0!null\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: niltable\n" +
			"     │           └─ columns: [i i2 b f]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.i, a.s, b.i, b.i2, b.b, b.f]\n" +
			" └─ InnerJoin (estimated cost=19.180 rows=3)\n" +
			"     ├─ (NOT((a.i = b.i)))\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: niltable\n" +
			"     │       └─ columns: [i i2 b f]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.i, a.s, b.i, b.i2, b.b, b.f]\n" +
			" └─ InnerJoin (estimated cost=19.180 rows=3) (actual rows=15 loops=1)\n" +
			"     ├─ (NOT((a.i = b.i)))\n" +
			"     ├─ TableAlias(b)\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: niltable\n" +
			"     │       └─ columns: [i i2 b f]\n" +
			"     └─ TableAlias(a)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
	},
	{
		Query: "with recursive a as (select 1 union select 2) select * from (select 1 where 1 in (select * from a)) as `temp`\n" +
			"",

		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: temp\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (4)\n" +
			" ├─ tableId: 4\n" +
			" └─ Project\n" +
			"     ├─ columns: [1 (tinyint)]\n" +
			"     └─ SemiJoin\n" +
			"         ├─ Table\n" +
			"         │   ├─ name: \n" +
			"         │   ├─ columns: []\n" +
			"         │   ├─ colSet: ()\n" +
			"         │   └─ tableId: 0\n" +
			"         └─ Filter\n" +
			"             ├─ Eq\n" +
			"             │   ├─ 1 (tinyint)\n" +
			"             │   └─ a.1:0!null\n" +
			"             └─ SubqueryAlias\n" +
			"                 ├─ name: a\n" +
			"                 ├─ outerVisibility: false\n" +
			"                 ├─ isLateral: false\n" +
			"                 ├─ cacheable: true\n" +
			"                 ├─ colSet: (1)\n" +
			"                 ├─ tableId: 2\n" +
			"                 └─ Union distinct\n" +
			"                     ├─ Project\n" +
			"                     │   ├─ columns: [1 (tinyint)]\n" +
			"                     │   └─ Table\n" +
			"                     │       ├─ name: \n" +
			"                     │       ├─ columns: []\n" +
			"                     │       ├─ colSet: ()\n" +
			"                     │       └─ tableId: 0\n" +
			"                     └─ Project\n" +
			"                         ├─ columns: [2 (tinyint)]\n" +
			"                         └─ Table\n" +
			"                             ├─ name: \n" +
			"                             ├─ columns: []\n" +
			"                             ├─ colSet: ()\n" +
			"                             └─ tableId: 0\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: temp\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Project\n" +
			"     ├─ columns: [1]\n" +
			"     └─ SemiJoin\n" +
			"         ├─ Table\n" +
			"         │   └─ name: \n" +
			"         └─ Filter\n" +
			"             ├─ (1 = a.1)\n" +
			"             └─ SubqueryAlias\n" +
			"                 ├─ name: a\n" +
			"                 ├─ outerVisibility: false\n" +
			"                 ├─ isLateral: false\n" +
			"                 ├─ cacheable: true\n" +
			"                 └─ Union distinct\n" +
			"                     ├─ Project\n" +
			"                     │   ├─ columns: [1]\n" +
			"                     │   └─ Table\n" +
			"                     │       └─ name: \n" +
			"                     └─ Project\n" +
			"                         ├─ columns: [2]\n" +
			"                         └─ Table\n" +
			"                             └─ name: \n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: temp\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Project\n" +
			"     ├─ columns: [1]\n" +
			"     └─ SemiJoin\n" +
			"         ├─ Table\n" +
			"         │   └─ name: \n" +
			"         └─ Filter\n" +
			"             ├─ (1 = a.1)\n" +
			"             └─ SubqueryAlias\n" +
			"                 ├─ name: a\n" +
			"                 ├─ outerVisibility: false\n" +
			"                 ├─ isLateral: false\n" +
			"                 ├─ cacheable: true\n" +
			"                 └─ Union distinct\n" +
			"                     ├─ Project\n" +
			"                     │   ├─ columns: [1]\n" +
			"                     │   └─ Table\n" +
			"                     │       └─ name: \n" +
			"                     └─ Project\n" +
			"                         ├─ columns: [2]\n" +
			"                         └─ Table\n" +
			"                             └─ name: \n" +
			"",
	},
	{
		Query: `SELECT pk,pk1,pk2 FROM one_pk t1, two_pk t2 WHERE pk=1 AND pk2=1 AND pk1=1 ORDER BY 1,2`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [t1.pk:2!null, t2.pk1:0!null, t2.pk2:1!null]\n" +
			" └─ Sort(t1.pk:2!null ASC nullsFirst, t2.pk1:0!null ASC nullsFirst)\n" +
			"     └─ CrossJoin\n" +
			"         ├─ TableAlias(t2)\n" +
			"         │   └─ IndexedTableAccess(two_pk)\n" +
			"         │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         │       ├─ static: [{[1, 1], [1, 1]}]\n" +
			"         │       ├─ colSet: (7-13)\n" +
			"         │       ├─ tableId: 2\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: two_pk\n" +
			"         │           └─ columns: [pk1 pk2]\n" +
			"         └─ TableAlias(t1)\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ static: [{[1, 1]}]\n" +
			"                 ├─ colSet: (1-6)\n" +
			"                 ├─ tableId: 1\n" +
			"                 └─ Table\n" +
			"                     ├─ name: one_pk\n" +
			"                     └─ columns: [pk]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [t1.pk, t2.pk1, t2.pk2]\n" +
			" └─ Sort(t1.pk ASC, t2.pk1 ASC)\n" +
			"     └─ CrossJoin\n" +
			"         ├─ TableAlias(t2)\n" +
			"         │   └─ IndexedTableAccess(two_pk)\n" +
			"         │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         │       ├─ filters: [{[1, 1], [1, 1]}]\n" +
			"         │       └─ columns: [pk1 pk2]\n" +
			"         └─ TableAlias(t1)\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ filters: [{[1, 1]}]\n" +
			"                 └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [t1.pk, t2.pk1, t2.pk2]\n" +
			" └─ Sort(t1.pk ASC, t2.pk1 ASC)\n" +
			"     └─ CrossJoin\n" +
			"         ├─ TableAlias(t2)\n" +
			"         │   └─ IndexedTableAccess(two_pk)\n" +
			"         │       ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			"         │       ├─ filters: [{[1, 1], [1, 1]}]\n" +
			"         │       └─ columns: [pk1 pk2]\n" +
			"         └─ TableAlias(t1)\n" +
			"             └─ IndexedTableAccess(one_pk)\n" +
			"                 ├─ index: [one_pk.pk]\n" +
			"                 ├─ filters: [{[1, 1]}]\n" +
			"                 └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `with recursive a as (select 1 union select 2) select * from a union select * from a limit 1;`,
		ExpectedPlan: "Union distinct\n" +
			" ├─ limit: 1\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: a\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   ├─ colSet: (1)\n" +
			" │   ├─ tableId: 2\n" +
			" │   └─ Union distinct\n" +
			" │       ├─ Project\n" +
			" │       │   ├─ columns: [1 (tinyint)]\n" +
			" │       │   └─ Table\n" +
			" │       │       ├─ name: \n" +
			" │       │       ├─ columns: []\n" +
			" │       │       ├─ colSet: ()\n" +
			" │       │       └─ tableId: 0\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [2 (tinyint)]\n" +
			" │           └─ Table\n" +
			" │               ├─ name: \n" +
			" │               ├─ columns: []\n" +
			" │               ├─ colSet: ()\n" +
			" │               └─ tableId: 0\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (1)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Union distinct\n" +
			"         ├─ Project\n" +
			"         │   ├─ columns: [1 (tinyint)]\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: \n" +
			"         │       ├─ columns: []\n" +
			"         │       ├─ colSet: ()\n" +
			"         │       └─ tableId: 0\n" +
			"         └─ Project\n" +
			"             ├─ columns: [2 (tinyint)]\n" +
			"             └─ Table\n" +
			"                 ├─ name: \n" +
			"                 ├─ columns: []\n" +
			"                 ├─ colSet: ()\n" +
			"                 └─ tableId: 0\n" +
			"",
		ExpectedEstimates: "Union distinct\n" +
			" ├─ limit: 1\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: a\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Union distinct\n" +
			" │       ├─ Project\n" +
			" │       │   ├─ columns: [1]\n" +
			" │       │   └─ Table\n" +
			" │       │       └─ name: \n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [2]\n" +
			" │           └─ Table\n" +
			" │               └─ name: \n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Union distinct\n" +
			"         ├─ Project\n" +
			"         │   ├─ columns: [1]\n" +
			"         │   └─ Table\n" +
			"         │       └─ name: \n" +
			"         └─ Project\n" +
			"             ├─ columns: [2]\n" +
			"             └─ Table\n" +
			"                 └─ name: \n" +
			"",
		ExpectedAnalysis: "Union distinct\n" +
			" ├─ limit: 1\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: a\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Union distinct\n" +
			" │       ├─ Project\n" +
			" │       │   ├─ columns: [1]\n" +
			" │       │   └─ Table\n" +
			" │       │       └─ name: \n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [2]\n" +
			" │           └─ Table\n" +
			" │               └─ name: \n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Union distinct\n" +
			"         ├─ Project\n" +
			"         │   ├─ columns: [1]\n" +
			"         │   └─ Table\n" +
			"         │       └─ name: \n" +
			"         └─ Project\n" +
			"             ├─ columns: [2]\n" +
			"             └─ Table\n" +
			"                 └─ name: \n" +
			"",
	},
	{
		Query: `with recursive a(x) as (select 1 union select 2) select * from a having x > 1 union select * from a having x > 1;`,
		ExpectedPlan: "Union distinct\n" +
			" ├─ Having\n" +
			" │   ├─ GreaterThan\n" +
			" │   │   ├─ a.x:0!null\n" +
			" │   │   └─ 1 (tinyint)\n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: a\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       ├─ colSet: (1)\n" +
			" │       ├─ tableId: 2\n" +
			" │       └─ Union distinct\n" +
			" │           ├─ Project\n" +
			" │           │   ├─ columns: [1 (tinyint)]\n" +
			" │           │   └─ Table\n" +
			" │           │       ├─ name: \n" +
			" │           │       ├─ columns: []\n" +
			" │           │       ├─ colSet: ()\n" +
			" │           │       └─ tableId: 0\n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [2 (tinyint)]\n" +
			" │               └─ Table\n" +
			" │                   ├─ name: \n" +
			" │                   ├─ columns: []\n" +
			" │                   ├─ colSet: ()\n" +
			" │                   └─ tableId: 0\n" +
			" └─ Having\n" +
			"     ├─ GreaterThan\n" +
			"     │   ├─ a.x:0!null\n" +
			"     │   └─ 1 (tinyint)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: a\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (1)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Union distinct\n" +
			"             ├─ Project\n" +
			"             │   ├─ columns: [1 (tinyint)]\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: \n" +
			"             │       ├─ columns: []\n" +
			"             │       ├─ colSet: ()\n" +
			"             │       └─ tableId: 0\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [2 (tinyint)]\n" +
			"                 └─ Table\n" +
			"                     ├─ name: \n" +
			"                     ├─ columns: []\n" +
			"                     ├─ colSet: ()\n" +
			"                     └─ tableId: 0\n" +
			"",
		ExpectedEstimates: "Union distinct\n" +
			" ├─ Having((a.x > 1))\n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: a\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Union distinct\n" +
			" │           ├─ Project\n" +
			" │           │   ├─ columns: [1]\n" +
			" │           │   └─ Table\n" +
			" │           │       └─ name: \n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [2]\n" +
			" │               └─ Table\n" +
			" │                   └─ name: \n" +
			" └─ Having((a.x > 1))\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: a\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Union distinct\n" +
			"             ├─ Project\n" +
			"             │   ├─ columns: [1]\n" +
			"             │   └─ Table\n" +
			"             │       └─ name: \n" +
			"             └─ Project\n" +
			"                 ├─ columns: [2]\n" +
			"                 └─ Table\n" +
			"                     └─ name: \n" +
			"",
		ExpectedAnalysis: "Union distinct\n" +
			" ├─ Having((a.x > 1))\n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: a\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Union distinct\n" +
			" │           ├─ Project\n" +
			" │           │   ├─ columns: [1]\n" +
			" │           │   └─ Table\n" +
			" │           │       └─ name: \n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [2]\n" +
			" │               └─ Table\n" +
			" │                   └─ name: \n" +
			" └─ Having((a.x > 1))\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: a\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Union distinct\n" +
			"             ├─ Project\n" +
			"             │   ├─ columns: [1]\n" +
			"             │   └─ Table\n" +
			"             │       └─ name: \n" +
			"             └─ Project\n" +
			"                 ├─ columns: [2]\n" +
			"                 └─ Table\n" +
			"                     └─ name: \n" +
			"",
	},
	{
		Query: `with recursive a(x) as (select 1 union select 2) select * from a where x > 1 union select * from a where x > 1;`,
		ExpectedPlan: "Union distinct\n" +
			" ├─ Filter\n" +
			" │   ├─ GreaterThan\n" +
			" │   │   ├─ a.x:0!null\n" +
			" │   │   └─ 1 (tinyint)\n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: a\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       ├─ colSet: (1)\n" +
			" │       ├─ tableId: 2\n" +
			" │       └─ Union distinct\n" +
			" │           ├─ Project\n" +
			" │           │   ├─ columns: [1 (tinyint)]\n" +
			" │           │   └─ Table\n" +
			" │           │       ├─ name: \n" +
			" │           │       ├─ columns: []\n" +
			" │           │       ├─ colSet: ()\n" +
			" │           │       └─ tableId: 0\n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [2 (tinyint)]\n" +
			" │               └─ Table\n" +
			" │                   ├─ name: \n" +
			" │                   ├─ columns: []\n" +
			" │                   ├─ colSet: ()\n" +
			" │                   └─ tableId: 0\n" +
			" └─ Filter\n" +
			"     ├─ GreaterThan\n" +
			"     │   ├─ a.x:0!null\n" +
			"     │   └─ 1 (tinyint)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: a\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (1)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Union distinct\n" +
			"             ├─ Project\n" +
			"             │   ├─ columns: [1 (tinyint)]\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: \n" +
			"             │       ├─ columns: []\n" +
			"             │       ├─ colSet: ()\n" +
			"             │       └─ tableId: 0\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [2 (tinyint)]\n" +
			"                 └─ Table\n" +
			"                     ├─ name: \n" +
			"                     ├─ columns: []\n" +
			"                     ├─ colSet: ()\n" +
			"                     └─ tableId: 0\n" +
			"",
		ExpectedEstimates: "Union distinct\n" +
			" ├─ Filter\n" +
			" │   ├─ (a.x > 1)\n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: a\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Union distinct\n" +
			" │           ├─ Project\n" +
			" │           │   ├─ columns: [1]\n" +
			" │           │   └─ Table\n" +
			" │           │       └─ name: \n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [2]\n" +
			" │               └─ Table\n" +
			" │                   └─ name: \n" +
			" └─ Filter\n" +
			"     ├─ (a.x > 1)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: a\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Union distinct\n" +
			"             ├─ Project\n" +
			"             │   ├─ columns: [1]\n" +
			"             │   └─ Table\n" +
			"             │       └─ name: \n" +
			"             └─ Project\n" +
			"                 ├─ columns: [2]\n" +
			"                 └─ Table\n" +
			"                     └─ name: \n" +
			"",
		ExpectedAnalysis: "Union distinct\n" +
			" ├─ Filter\n" +
			" │   ├─ (a.x > 1)\n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: a\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Union distinct\n" +
			" │           ├─ Project\n" +
			" │           │   ├─ columns: [1]\n" +
			" │           │   └─ Table\n" +
			" │           │       └─ name: \n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [2]\n" +
			" │               └─ Table\n" +
			" │                   └─ name: \n" +
			" └─ Filter\n" +
			"     ├─ (a.x > 1)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: a\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Union distinct\n" +
			"             ├─ Project\n" +
			"             │   ├─ columns: [1]\n" +
			"             │   └─ Table\n" +
			"             │       └─ name: \n" +
			"             └─ Project\n" +
			"                 ├─ columns: [2]\n" +
			"                 └─ Table\n" +
			"                     └─ name: \n" +
			"",
	},
	{
		Query: `with recursive a(x) as (select 1 union select 2) select * from a union select * from a group by x;`,
		ExpectedPlan: "Union distinct\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: a\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   ├─ colSet: (1)\n" +
			" │   ├─ tableId: 2\n" +
			" │   └─ Union distinct\n" +
			" │       ├─ Project\n" +
			" │       │   ├─ columns: [1 (tinyint)]\n" +
			" │       │   └─ Table\n" +
			" │       │       ├─ name: \n" +
			" │       │       ├─ columns: []\n" +
			" │       │       ├─ colSet: ()\n" +
			" │       │       └─ tableId: 0\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [2 (tinyint)]\n" +
			" │           └─ Table\n" +
			" │               ├─ name: \n" +
			" │               ├─ columns: []\n" +
			" │               ├─ colSet: ()\n" +
			" │               └─ tableId: 0\n" +
			" └─ GroupBy\n" +
			"     ├─ select: a.x:0!null\n" +
			"     ├─ group: a.x:0!null\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: a\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (1)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Union distinct\n" +
			"             ├─ Project\n" +
			"             │   ├─ columns: [1 (tinyint)]\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: \n" +
			"             │       ├─ columns: []\n" +
			"             │       ├─ colSet: ()\n" +
			"             │       └─ tableId: 0\n" +
			"             └─ Project\n" +
			"                 ├─ columns: [2 (tinyint)]\n" +
			"                 └─ Table\n" +
			"                     ├─ name: \n" +
			"                     ├─ columns: []\n" +
			"                     ├─ colSet: ()\n" +
			"                     └─ tableId: 0\n" +
			"",
		ExpectedEstimates: "Union distinct\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: a\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Union distinct\n" +
			" │       ├─ Project\n" +
			" │       │   ├─ columns: [1]\n" +
			" │       │   └─ Table\n" +
			" │       │       └─ name: \n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [2]\n" +
			" │           └─ Table\n" +
			" │               └─ name: \n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(a.x)\n" +
			"     ├─ Grouping(a.x)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: a\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Union distinct\n" +
			"             ├─ Project\n" +
			"             │   ├─ columns: [1]\n" +
			"             │   └─ Table\n" +
			"             │       └─ name: \n" +
			"             └─ Project\n" +
			"                 ├─ columns: [2]\n" +
			"                 └─ Table\n" +
			"                     └─ name: \n" +
			"",
		ExpectedAnalysis: "Union distinct\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: a\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Union distinct\n" +
			" │       ├─ Project\n" +
			" │       │   ├─ columns: [1]\n" +
			" │       │   └─ Table\n" +
			" │       │       └─ name: \n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [2]\n" +
			" │           └─ Table\n" +
			" │               └─ name: \n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(a.x)\n" +
			"     ├─ Grouping(a.x)\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: a\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Union distinct\n" +
			"             ├─ Project\n" +
			"             │   ├─ columns: [1]\n" +
			"             │   └─ Table\n" +
			"             │       └─ name: \n" +
			"             └─ Project\n" +
			"                 ├─ columns: [2]\n" +
			"                 └─ Table\n" +
			"                     └─ name: \n" +
			"",
	},
	{
		Query: `with recursive a(x) as (select 1 union select 2) select * from a union select * from a order by x desc;`,
		ExpectedPlan: "Union distinct\n" +
			" ├─ sortFields: a.x:0!null\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: a\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   ├─ colSet: (1)\n" +
			" │   ├─ tableId: 2\n" +
			" │   └─ Union distinct\n" +
			" │       ├─ Project\n" +
			" │       │   ├─ columns: [1 (tinyint)]\n" +
			" │       │   └─ Table\n" +
			" │       │       ├─ name: \n" +
			" │       │       ├─ columns: []\n" +
			" │       │       ├─ colSet: ()\n" +
			" │       │       └─ tableId: 0\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [2 (tinyint)]\n" +
			" │           └─ Table\n" +
			" │               ├─ name: \n" +
			" │               ├─ columns: []\n" +
			" │               ├─ colSet: ()\n" +
			" │               └─ tableId: 0\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (1)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Union distinct\n" +
			"         ├─ Project\n" +
			"         │   ├─ columns: [1 (tinyint)]\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: \n" +
			"         │       ├─ columns: []\n" +
			"         │       ├─ colSet: ()\n" +
			"         │       └─ tableId: 0\n" +
			"         └─ Project\n" +
			"             ├─ columns: [2 (tinyint)]\n" +
			"             └─ Table\n" +
			"                 ├─ name: \n" +
			"                 ├─ columns: []\n" +
			"                 ├─ colSet: ()\n" +
			"                 └─ tableId: 0\n" +
			"",
		ExpectedEstimates: "Union distinct\n" +
			" ├─ sortFields: [a.x]\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: a\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Union distinct\n" +
			" │       ├─ Project\n" +
			" │       │   ├─ columns: [1]\n" +
			" │       │   └─ Table\n" +
			" │       │       └─ name: \n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [2]\n" +
			" │           └─ Table\n" +
			" │               └─ name: \n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Union distinct\n" +
			"         ├─ Project\n" +
			"         │   ├─ columns: [1]\n" +
			"         │   └─ Table\n" +
			"         │       └─ name: \n" +
			"         └─ Project\n" +
			"             ├─ columns: [2]\n" +
			"             └─ Table\n" +
			"                 └─ name: \n" +
			"",
		ExpectedAnalysis: "Union distinct\n" +
			" ├─ sortFields: [a.x]\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: a\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Union distinct\n" +
			" │       ├─ Project\n" +
			" │       │   ├─ columns: [1]\n" +
			" │       │   └─ Table\n" +
			" │       │       └─ name: \n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [2]\n" +
			" │           └─ Table\n" +
			" │               └─ name: \n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Union distinct\n" +
			"         ├─ Project\n" +
			"         │   ├─ columns: [1]\n" +
			"         │   └─ Table\n" +
			"         │       └─ name: \n" +
			"         └─ Project\n" +
			"             ├─ columns: [2]\n" +
			"             └─ Table\n" +
			"                 └─ name: \n" +
			"",
	},
	{
		Query: `WITH recursive n(i) as (SELECT 1 UNION ALL SELECT i + 1 FROM n WHERE i+1 <= 10 LIMIT 5) SELECT count(i) FROM n;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(n.i):0!null as count(i)]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: COUNT(n.i:0!null)\n" +
			"     ├─ group: \n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: n\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ RecursiveCTE\n" +
			"             └─ Union all\n" +
			"                 ├─ limit: 5\n" +
			"                 ├─ Project\n" +
			"                 │   ├─ columns: [1 (tinyint)]\n" +
			"                 │   └─ Table\n" +
			"                 │       ├─ name: \n" +
			"                 │       ├─ columns: []\n" +
			"                 │       ├─ colSet: ()\n" +
			"                 │       └─ tableId: 0\n" +
			"                 └─ Project\n" +
			"                     ├─ columns: [(n.i:0!null + 1 (tinyint)) as i + 1]\n" +
			"                     └─ Filter\n" +
			"                         ├─ LessThanOrEqual\n" +
			"                         │   ├─ (n.i:0!null + 1 (tinyint))\n" +
			"                         │   └─ 10 (tinyint)\n" +
			"                         └─ RecursiveTable(n)\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(n.i) as count(i)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(n.i))\n" +
			"     ├─ Grouping()\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: n\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ RecursiveCTE\n" +
			"             └─ Union all\n" +
			"                 ├─ limit: 5\n" +
			"                 ├─ Project\n" +
			"                 │   ├─ columns: [1]\n" +
			"                 │   └─ Table\n" +
			"                 │       └─ name: \n" +
			"                 └─ Project\n" +
			"                     ├─ columns: [(n.i + 1) as i + 1]\n" +
			"                     └─ Filter\n" +
			"                         ├─ ((n.i + 1) <= 10)\n" +
			"                         └─ RecursiveTable(n)\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(n.i) as count(i)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(n.i))\n" +
			"     ├─ Grouping()\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: n\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ RecursiveCTE\n" +
			"             └─ Union all\n" +
			"                 ├─ limit: 5\n" +
			"                 ├─ Project\n" +
			"                 │   ├─ columns: [1]\n" +
			"                 │   └─ Table\n" +
			"                 │       └─ name: \n" +
			"                 └─ Project\n" +
			"                     ├─ columns: [(n.i + 1) as i + 1]\n" +
			"                     └─ Filter\n" +
			"                         ├─ ((n.i + 1) <= 10)\n" +
			"                         └─ RecursiveTable(n)\n" +
			"",
	},
	{
		Query: `WITH recursive n(i) as (SELECT 1 UNION ALL SELECT i + 1 FROM n GROUP BY i HAVING i+1 <= 10) SELECT count(i) FROM n;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(n.i):0!null as count(i)]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: COUNT(n.i:0!null)\n" +
			"     ├─ group: \n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: n\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ RecursiveCTE\n" +
			"             └─ Union all\n" +
			"                 ├─ Project\n" +
			"                 │   ├─ columns: [1 (tinyint)]\n" +
			"                 │   └─ Table\n" +
			"                 │       ├─ name: \n" +
			"                 │       ├─ columns: []\n" +
			"                 │       ├─ colSet: ()\n" +
			"                 │       └─ tableId: 0\n" +
			"                 └─ Project\n" +
			"                     ├─ columns: [(n.i:0!null + 1 (tinyint)) as i + 1]\n" +
			"                     └─ Having\n" +
			"                         ├─ LessThanOrEqual\n" +
			"                         │   ├─ (n.i:0!null + 1 (tinyint))\n" +
			"                         │   └─ 10 (tinyint)\n" +
			"                         └─ GroupBy\n" +
			"                             ├─ select: n.i:0!null\n" +
			"                             ├─ group: n.i:0!null\n" +
			"                             └─ RecursiveTable(n)\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(n.i) as count(i)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(n.i))\n" +
			"     ├─ Grouping()\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: n\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ RecursiveCTE\n" +
			"             └─ Union all\n" +
			"                 ├─ Project\n" +
			"                 │   ├─ columns: [1]\n" +
			"                 │   └─ Table\n" +
			"                 │       └─ name: \n" +
			"                 └─ Project\n" +
			"                     ├─ columns: [(n.i + 1) as i + 1]\n" +
			"                     └─ Having(((n.i + 1) <= 10))\n" +
			"                         └─ GroupBy\n" +
			"                             ├─ SelectedExprs(n.i)\n" +
			"                             ├─ Grouping(n.i)\n" +
			"                             └─ RecursiveTable(n)\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(n.i) as count(i)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(n.i))\n" +
			"     ├─ Grouping()\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: n\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ RecursiveCTE\n" +
			"             └─ Union all\n" +
			"                 ├─ Project\n" +
			"                 │   ├─ columns: [1]\n" +
			"                 │   └─ Table\n" +
			"                 │       └─ name: \n" +
			"                 └─ Project\n" +
			"                     ├─ columns: [(n.i + 1) as i + 1]\n" +
			"                     └─ Having(((n.i + 1) <= 10))\n" +
			"                         └─ GroupBy\n" +
			"                             ├─ SelectedExprs(n.i)\n" +
			"                             ├─ Grouping(n.i)\n" +
			"                             └─ RecursiveTable(n)\n" +
			"",
	},
	{
		Query: `WITH recursive n(i) as (SELECT 1 UNION ALL SELECT i + 1 FROM n WHERE i+1 <= 10 LIMIT 1) SELECT count(i) FROM n;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(n.i):0!null as count(i)]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: COUNT(n.i:0!null)\n" +
			"     ├─ group: \n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: n\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ RecursiveCTE\n" +
			"             └─ Union all\n" +
			"                 ├─ limit: 1\n" +
			"                 ├─ Project\n" +
			"                 │   ├─ columns: [1 (tinyint)]\n" +
			"                 │   └─ Table\n" +
			"                 │       ├─ name: \n" +
			"                 │       ├─ columns: []\n" +
			"                 │       ├─ colSet: ()\n" +
			"                 │       └─ tableId: 0\n" +
			"                 └─ Project\n" +
			"                     ├─ columns: [(n.i:0!null + 1 (tinyint)) as i + 1]\n" +
			"                     └─ Filter\n" +
			"                         ├─ LessThanOrEqual\n" +
			"                         │   ├─ (n.i:0!null + 1 (tinyint))\n" +
			"                         │   └─ 10 (tinyint)\n" +
			"                         └─ RecursiveTable(n)\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(n.i) as count(i)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(n.i))\n" +
			"     ├─ Grouping()\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: n\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ RecursiveCTE\n" +
			"             └─ Union all\n" +
			"                 ├─ limit: 1\n" +
			"                 ├─ Project\n" +
			"                 │   ├─ columns: [1]\n" +
			"                 │   └─ Table\n" +
			"                 │       └─ name: \n" +
			"                 └─ Project\n" +
			"                     ├─ columns: [(n.i + 1) as i + 1]\n" +
			"                     └─ Filter\n" +
			"                         ├─ ((n.i + 1) <= 10)\n" +
			"                         └─ RecursiveTable(n)\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(n.i) as count(i)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(n.i))\n" +
			"     ├─ Grouping()\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: n\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ RecursiveCTE\n" +
			"             └─ Union all\n" +
			"                 ├─ limit: 1\n" +
			"                 ├─ Project\n" +
			"                 │   ├─ columns: [1]\n" +
			"                 │   └─ Table\n" +
			"                 │       └─ name: \n" +
			"                 └─ Project\n" +
			"                     ├─ columns: [(n.i + 1) as i + 1]\n" +
			"                     └─ Filter\n" +
			"                         ├─ ((n.i + 1) <= 10)\n" +
			"                         └─ RecursiveTable(n)\n" +
			"",
	},
	{
		Query: "with recursive a as (select 1 union select 2) select * from (select 1 where 1 in (select * from a)) as `temp`\n" +
			"",

		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: temp\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (4)\n" +
			" ├─ tableId: 4\n" +
			" └─ Project\n" +
			"     ├─ columns: [1 (tinyint)]\n" +
			"     └─ SemiJoin\n" +
			"         ├─ Table\n" +
			"         │   ├─ name: \n" +
			"         │   ├─ columns: []\n" +
			"         │   ├─ colSet: ()\n" +
			"         │   └─ tableId: 0\n" +
			"         └─ Filter\n" +
			"             ├─ Eq\n" +
			"             │   ├─ 1 (tinyint)\n" +
			"             │   └─ a.1:0!null\n" +
			"             └─ SubqueryAlias\n" +
			"                 ├─ name: a\n" +
			"                 ├─ outerVisibility: false\n" +
			"                 ├─ isLateral: false\n" +
			"                 ├─ cacheable: true\n" +
			"                 ├─ colSet: (1)\n" +
			"                 ├─ tableId: 2\n" +
			"                 └─ Union distinct\n" +
			"                     ├─ Project\n" +
			"                     │   ├─ columns: [1 (tinyint)]\n" +
			"                     │   └─ Table\n" +
			"                     │       ├─ name: \n" +
			"                     │       ├─ columns: []\n" +
			"                     │       ├─ colSet: ()\n" +
			"                     │       └─ tableId: 0\n" +
			"                     └─ Project\n" +
			"                         ├─ columns: [2 (tinyint)]\n" +
			"                         └─ Table\n" +
			"                             ├─ name: \n" +
			"                             ├─ columns: []\n" +
			"                             ├─ colSet: ()\n" +
			"                             └─ tableId: 0\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: temp\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Project\n" +
			"     ├─ columns: [1]\n" +
			"     └─ SemiJoin\n" +
			"         ├─ Table\n" +
			"         │   └─ name: \n" +
			"         └─ Filter\n" +
			"             ├─ (1 = a.1)\n" +
			"             └─ SubqueryAlias\n" +
			"                 ├─ name: a\n" +
			"                 ├─ outerVisibility: false\n" +
			"                 ├─ isLateral: false\n" +
			"                 ├─ cacheable: true\n" +
			"                 └─ Union distinct\n" +
			"                     ├─ Project\n" +
			"                     │   ├─ columns: [1]\n" +
			"                     │   └─ Table\n" +
			"                     │       └─ name: \n" +
			"                     └─ Project\n" +
			"                         ├─ columns: [2]\n" +
			"                         └─ Table\n" +
			"                             └─ name: \n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: temp\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Project\n" +
			"     ├─ columns: [1]\n" +
			"     └─ SemiJoin\n" +
			"         ├─ Table\n" +
			"         │   └─ name: \n" +
			"         └─ Filter\n" +
			"             ├─ (1 = a.1)\n" +
			"             └─ SubqueryAlias\n" +
			"                 ├─ name: a\n" +
			"                 ├─ outerVisibility: false\n" +
			"                 ├─ isLateral: false\n" +
			"                 ├─ cacheable: true\n" +
			"                 └─ Union distinct\n" +
			"                     ├─ Project\n" +
			"                     │   ├─ columns: [1]\n" +
			"                     │   └─ Table\n" +
			"                     │       └─ name: \n" +
			"                     └─ Project\n" +
			"                         ├─ columns: [2]\n" +
			"                         └─ Table\n" +
			"                             └─ name: \n" +
			"",
	},
	{
		Query: `select 1 union select * from (select 2 union select 3) a union select 4;`,
		ExpectedPlan: "Union distinct\n" +
			" ├─ Union distinct\n" +
			" │   ├─ Project\n" +
			" │   │   ├─ columns: [1 (tinyint)]\n" +
			" │   │   └─ ProcessTable\n" +
			" │   │       └─ Table\n" +
			" │   │           ├─ name: \n" +
			" │   │           └─ columns: []\n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: a\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       ├─ colSet: (4)\n" +
			" │       ├─ tableId: 2\n" +
			" │       └─ Union distinct\n" +
			" │           ├─ Project\n" +
			" │           │   ├─ columns: [2 (tinyint)]\n" +
			" │           │   └─ Table\n" +
			" │           │       ├─ name: \n" +
			" │           │       ├─ columns: []\n" +
			" │           │       ├─ colSet: ()\n" +
			" │           │       └─ tableId: 0\n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [3 (tinyint)]\n" +
			" │               └─ Table\n" +
			" │                   ├─ name: \n" +
			" │                   ├─ columns: []\n" +
			" │                   ├─ colSet: ()\n" +
			" │                   └─ tableId: 0\n" +
			" └─ Project\n" +
			"     ├─ columns: [4 (tinyint)]\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: \n" +
			"             └─ columns: []\n" +
			"",
		ExpectedEstimates: "Union distinct\n" +
			" ├─ Union distinct\n" +
			" │   ├─ Project\n" +
			" │   │   ├─ columns: [1]\n" +
			" │   │   └─ Table\n" +
			" │   │       └─ name: \n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: a\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Union distinct\n" +
			" │           ├─ Project\n" +
			" │           │   ├─ columns: [2]\n" +
			" │           │   └─ Table\n" +
			" │           │       └─ name: \n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [3]\n" +
			" │               └─ Table\n" +
			" │                   └─ name: \n" +
			" └─ Project\n" +
			"     ├─ columns: [4]\n" +
			"     └─ Table\n" +
			"         └─ name: \n" +
			"",
		ExpectedAnalysis: "Union distinct\n" +
			" ├─ Union distinct\n" +
			" │   ├─ Project\n" +
			" │   │   ├─ columns: [1]\n" +
			" │   │   └─ Table\n" +
			" │   │       └─ name: \n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: a\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Union distinct\n" +
			" │           ├─ Project\n" +
			" │           │   ├─ columns: [2]\n" +
			" │           │   └─ Table\n" +
			" │           │       └─ name: \n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [3]\n" +
			" │               └─ Table\n" +
			" │                   └─ name: \n" +
			" └─ Project\n" +
			"     ├─ columns: [4]\n" +
			"     └─ Table\n" +
			"         └─ name: \n" +
			"",
	},
	{
		Query: `select 1 union select * from (select 2 union select 3) a union select 4;`,
		ExpectedPlan: "Union distinct\n" +
			" ├─ Union distinct\n" +
			" │   ├─ Project\n" +
			" │   │   ├─ columns: [1 (tinyint)]\n" +
			" │   │   └─ ProcessTable\n" +
			" │   │       └─ Table\n" +
			" │   │           ├─ name: \n" +
			" │   │           └─ columns: []\n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: a\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       ├─ colSet: (4)\n" +
			" │       ├─ tableId: 2\n" +
			" │       └─ Union distinct\n" +
			" │           ├─ Project\n" +
			" │           │   ├─ columns: [2 (tinyint)]\n" +
			" │           │   └─ Table\n" +
			" │           │       ├─ name: \n" +
			" │           │       ├─ columns: []\n" +
			" │           │       ├─ colSet: ()\n" +
			" │           │       └─ tableId: 0\n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [3 (tinyint)]\n" +
			" │               └─ Table\n" +
			" │                   ├─ name: \n" +
			" │                   ├─ columns: []\n" +
			" │                   ├─ colSet: ()\n" +
			" │                   └─ tableId: 0\n" +
			" └─ Project\n" +
			"     ├─ columns: [4 (tinyint)]\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: \n" +
			"             └─ columns: []\n" +
			"",
		ExpectedEstimates: "Union distinct\n" +
			" ├─ Union distinct\n" +
			" │   ├─ Project\n" +
			" │   │   ├─ columns: [1]\n" +
			" │   │   └─ Table\n" +
			" │   │       └─ name: \n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: a\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Union distinct\n" +
			" │           ├─ Project\n" +
			" │           │   ├─ columns: [2]\n" +
			" │           │   └─ Table\n" +
			" │           │       └─ name: \n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [3]\n" +
			" │               └─ Table\n" +
			" │                   └─ name: \n" +
			" └─ Project\n" +
			"     ├─ columns: [4]\n" +
			"     └─ Table\n" +
			"         └─ name: \n" +
			"",
		ExpectedAnalysis: "Union distinct\n" +
			" ├─ Union distinct\n" +
			" │   ├─ Project\n" +
			" │   │   ├─ columns: [1]\n" +
			" │   │   └─ Table\n" +
			" │   │       └─ name: \n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: a\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Union distinct\n" +
			" │           ├─ Project\n" +
			" │           │   ├─ columns: [2]\n" +
			" │           │   └─ Table\n" +
			" │           │       └─ name: \n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [3]\n" +
			" │               └─ Table\n" +
			" │                   └─ name: \n" +
			" └─ Project\n" +
			"     ├─ columns: [4]\n" +
			"     └─ Table\n" +
			"         └─ name: \n" +
			"",
	},
	{
		Query: `With recursive a(x) as (select 1 union select 4 union select * from (select 2 union select 3) b union select x+1 from a where x < 10) select count(*) from a;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(1):0!null as count(*)]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: COUNT(1 (bigint))\n" +
			"     ├─ group: \n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: a\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (6)\n" +
			"         ├─ tableId: 5\n" +
			"         └─ RecursiveCTE\n" +
			"             └─ Union distinct\n" +
			"                 ├─ Union distinct\n" +
			"                 │   ├─ Union distinct\n" +
			"                 │   │   ├─ Project\n" +
			"                 │   │   │   ├─ columns: [1 (tinyint)]\n" +
			"                 │   │   │   └─ Table\n" +
			"                 │   │   │       ├─ name: \n" +
			"                 │   │   │       ├─ columns: []\n" +
			"                 │   │   │       ├─ colSet: ()\n" +
			"                 │   │   │       └─ tableId: 0\n" +
			"                 │   │   └─ Project\n" +
			"                 │   │       ├─ columns: [4 (tinyint)]\n" +
			"                 │   │       └─ Table\n" +
			"                 │   │           ├─ name: \n" +
			"                 │   │           ├─ columns: []\n" +
			"                 │   │           ├─ colSet: ()\n" +
			"                 │   │           └─ tableId: 0\n" +
			"                 │   └─ SubqueryAlias\n" +
			"                 │       ├─ name: b\n" +
			"                 │       ├─ outerVisibility: false\n" +
			"                 │       ├─ isLateral: false\n" +
			"                 │       ├─ cacheable: true\n" +
			"                 │       ├─ colSet: (5)\n" +
			"                 │       ├─ tableId: 3\n" +
			"                 │       └─ Union distinct\n" +
			"                 │           ├─ Project\n" +
			"                 │           │   ├─ columns: [2 (tinyint)]\n" +
			"                 │           │   └─ Table\n" +
			"                 │           │       ├─ name: \n" +
			"                 │           │       ├─ columns: []\n" +
			"                 │           │       ├─ colSet: ()\n" +
			"                 │           │       └─ tableId: 0\n" +
			"                 │           └─ Project\n" +
			"                 │               ├─ columns: [3 (tinyint)]\n" +
			"                 │               └─ Table\n" +
			"                 │                   ├─ name: \n" +
			"                 │                   ├─ columns: []\n" +
			"                 │                   ├─ colSet: ()\n" +
			"                 │                   └─ tableId: 0\n" +
			"                 └─ Project\n" +
			"                     ├─ columns: [(a.x:0!null + 1 (tinyint)) as x+1]\n" +
			"                     └─ Filter\n" +
			"                         ├─ LessThan\n" +
			"                         │   ├─ a.x:0!null\n" +
			"                         │   └─ 10 (bigint)\n" +
			"                         └─ RecursiveTable(a)\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(1) as count(*)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1))\n" +
			"     ├─ Grouping()\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: a\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ RecursiveCTE\n" +
			"             └─ Union distinct\n" +
			"                 ├─ Union distinct\n" +
			"                 │   ├─ Union distinct\n" +
			"                 │   │   ├─ Project\n" +
			"                 │   │   │   ├─ columns: [1]\n" +
			"                 │   │   │   └─ Table\n" +
			"                 │   │   │       └─ name: \n" +
			"                 │   │   └─ Project\n" +
			"                 │   │       ├─ columns: [4]\n" +
			"                 │   │       └─ Table\n" +
			"                 │   │           └─ name: \n" +
			"                 │   └─ SubqueryAlias\n" +
			"                 │       ├─ name: b\n" +
			"                 │       ├─ outerVisibility: false\n" +
			"                 │       ├─ isLateral: false\n" +
			"                 │       ├─ cacheable: true\n" +
			"                 │       └─ Union distinct\n" +
			"                 │           ├─ Project\n" +
			"                 │           │   ├─ columns: [2]\n" +
			"                 │           │   └─ Table\n" +
			"                 │           │       └─ name: \n" +
			"                 │           └─ Project\n" +
			"                 │               ├─ columns: [3]\n" +
			"                 │               └─ Table\n" +
			"                 │                   └─ name: \n" +
			"                 └─ Project\n" +
			"                     ├─ columns: [(a.x + 1) as x+1]\n" +
			"                     └─ Filter\n" +
			"                         ├─ (a.x < 10)\n" +
			"                         └─ RecursiveTable(a)\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(1) as count(*)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1))\n" +
			"     ├─ Grouping()\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: a\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ RecursiveCTE\n" +
			"             └─ Union distinct\n" +
			"                 ├─ Union distinct\n" +
			"                 │   ├─ Union distinct\n" +
			"                 │   │   ├─ Project\n" +
			"                 │   │   │   ├─ columns: [1]\n" +
			"                 │   │   │   └─ Table\n" +
			"                 │   │   │       └─ name: \n" +
			"                 │   │   └─ Project\n" +
			"                 │   │       ├─ columns: [4]\n" +
			"                 │   │       └─ Table\n" +
			"                 │   │           └─ name: \n" +
			"                 │   └─ SubqueryAlias\n" +
			"                 │       ├─ name: b\n" +
			"                 │       ├─ outerVisibility: false\n" +
			"                 │       ├─ isLateral: false\n" +
			"                 │       ├─ cacheable: true\n" +
			"                 │       └─ Union distinct\n" +
			"                 │           ├─ Project\n" +
			"                 │           │   ├─ columns: [2]\n" +
			"                 │           │   └─ Table\n" +
			"                 │           │       └─ name: \n" +
			"                 │           └─ Project\n" +
			"                 │               ├─ columns: [3]\n" +
			"                 │               └─ Table\n" +
			"                 │                   └─ name: \n" +
			"                 └─ Project\n" +
			"                     ├─ columns: [(a.x + 1) as x+1]\n" +
			"                     └─ Filter\n" +
			"                         ├─ (a.x < 10)\n" +
			"                         └─ RecursiveTable(a)\n" +
			"",
	},
	{
		Query: `with a(j) as (select 1), b(i) as (select 2) select j from a union (select i from b order by 1 desc) union select j from a;`,
		ExpectedPlan: "Union distinct\n" +
			" ├─ Union distinct\n" +
			" │   ├─ SubqueryAlias\n" +
			" │   │   ├─ name: a\n" +
			" │   │   ├─ outerVisibility: false\n" +
			" │   │   ├─ isLateral: false\n" +
			" │   │   ├─ cacheable: true\n" +
			" │   │   ├─ colSet: (2)\n" +
			" │   │   ├─ tableId: 1\n" +
			" │   │   └─ Project\n" +
			" │   │       ├─ columns: [1 (tinyint)]\n" +
			" │   │       └─ Table\n" +
			" │   │           ├─ name: \n" +
			" │   │           ├─ columns: []\n" +
			" │   │           ├─ colSet: ()\n" +
			" │   │           └─ tableId: 0\n" +
			" │   └─ Sort(b.i:0!null DESC nullsFirst)\n" +
			" │       └─ SubqueryAlias\n" +
			" │           ├─ name: b\n" +
			" │           ├─ outerVisibility: false\n" +
			" │           ├─ isLateral: false\n" +
			" │           ├─ cacheable: true\n" +
			" │           ├─ colSet: (4)\n" +
			" │           ├─ tableId: 3\n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [2 (tinyint)]\n" +
			" │               └─ Table\n" +
			" │                   ├─ name: \n" +
			" │                   ├─ columns: []\n" +
			" │                   ├─ colSet: ()\n" +
			" │                   └─ tableId: 0\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Project\n" +
			"         ├─ columns: [1 (tinyint)]\n" +
			"         └─ Table\n" +
			"             ├─ name: \n" +
			"             ├─ columns: []\n" +
			"             ├─ colSet: ()\n" +
			"             └─ tableId: 0\n" +
			"",
		ExpectedEstimates: "Union distinct\n" +
			" ├─ Union distinct\n" +
			" │   ├─ SubqueryAlias\n" +
			" │   │   ├─ name: a\n" +
			" │   │   ├─ outerVisibility: false\n" +
			" │   │   ├─ isLateral: false\n" +
			" │   │   ├─ cacheable: true\n" +
			" │   │   └─ Project\n" +
			" │   │       ├─ columns: [1]\n" +
			" │   │       └─ Table\n" +
			" │   │           └─ name: \n" +
			" │   └─ Sort(b.i DESC)\n" +
			" │       └─ SubqueryAlias\n" +
			" │           ├─ name: b\n" +
			" │           ├─ outerVisibility: false\n" +
			" │           ├─ isLateral: false\n" +
			" │           ├─ cacheable: true\n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [2]\n" +
			" │               └─ Table\n" +
			" │                   └─ name: \n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Project\n" +
			"         ├─ columns: [1]\n" +
			"         └─ Table\n" +
			"             └─ name: \n" +
			"",
		ExpectedAnalysis: "Union distinct\n" +
			" ├─ Union distinct\n" +
			" │   ├─ SubqueryAlias\n" +
			" │   │   ├─ name: a\n" +
			" │   │   ├─ outerVisibility: false\n" +
			" │   │   ├─ isLateral: false\n" +
			" │   │   ├─ cacheable: true\n" +
			" │   │   └─ Project\n" +
			" │   │       ├─ columns: [1]\n" +
			" │   │       └─ Table\n" +
			" │   │           └─ name: \n" +
			" │   └─ Sort(b.i DESC)\n" +
			" │       └─ SubqueryAlias\n" +
			" │           ├─ name: b\n" +
			" │           ├─ outerVisibility: false\n" +
			" │           ├─ isLateral: false\n" +
			" │           ├─ cacheable: true\n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [2]\n" +
			" │               └─ Table\n" +
			" │                   └─ name: \n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Project\n" +
			"         ├─ columns: [1]\n" +
			"         └─ Table\n" +
			"             └─ name: \n" +
			"",
	},
	{
		Query: `with a(j) as (select 1), b(i) as (select 2) (select t1.j as k from a t1 join a t2 on t1.j = t2.j union select i from b order by k desc limit 1) union select j from a;`,
		ExpectedPlan: "Union distinct\n" +
			" ├─ sortFields: k:0!null\n" +
			" ├─ limit: 1\n" +
			" ├─ Union distinct\n" +
			" │   ├─ Project\n" +
			" │   │   ├─ columns: [t1.j:0!null as k]\n" +
			" │   │   └─ HashJoin\n" +
			" │   │       ├─ Eq\n" +
			" │   │       │   ├─ t1.j:0!null\n" +
			" │   │       │   └─ t2.j:1!null\n" +
			" │   │       ├─ SubqueryAlias\n" +
			" │   │       │   ├─ name: t1\n" +
			" │   │       │   ├─ outerVisibility: false\n" +
			" │   │       │   ├─ isLateral: false\n" +
			" │   │       │   ├─ cacheable: true\n" +
			" │   │       │   ├─ colSet: (5)\n" +
			" │   │       │   ├─ tableId: 5\n" +
			" │   │       │   └─ Project\n" +
			" │   │       │       ├─ columns: [1 (tinyint)]\n" +
			" │   │       │       └─ Table\n" +
			" │   │       │           ├─ name: \n" +
			" │   │       │           ├─ columns: []\n" +
			" │   │       │           ├─ colSet: ()\n" +
			" │   │       │           └─ tableId: 0\n" +
			" │   │       └─ HashLookup\n" +
			" │   │           ├─ left-key: TUPLE(t1.j:0!null)\n" +
			" │   │           ├─ right-key: TUPLE(t2.j:0!null)\n" +
			" │   │           └─ SubqueryAlias\n" +
			" │   │               ├─ name: t2\n" +
			" │   │               ├─ outerVisibility: false\n" +
			" │   │               ├─ isLateral: false\n" +
			" │   │               ├─ cacheable: true\n" +
			" │   │               ├─ colSet: (6)\n" +
			" │   │               ├─ tableId: 6\n" +
			" │   │               └─ Project\n" +
			" │   │                   ├─ columns: [1 (tinyint)]\n" +
			" │   │                   └─ Table\n" +
			" │   │                       ├─ name: \n" +
			" │   │                       ├─ columns: []\n" +
			" │   │                       ├─ colSet: ()\n" +
			" │   │                       └─ tableId: 0\n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: b\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       ├─ colSet: (4)\n" +
			" │       ├─ tableId: 3\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [2 (tinyint)]\n" +
			" │           └─ Table\n" +
			" │               ├─ name: \n" +
			" │               ├─ columns: []\n" +
			" │               ├─ colSet: ()\n" +
			" │               └─ tableId: 0\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Project\n" +
			"         ├─ columns: [1 (tinyint)]\n" +
			"         └─ Table\n" +
			"             ├─ name: \n" +
			"             ├─ columns: []\n" +
			"             ├─ colSet: ()\n" +
			"             └─ tableId: 0\n" +
			"",
		ExpectedEstimates: "Union distinct\n" +
			" ├─ sortFields: [k]\n" +
			" ├─ limit: 1\n" +
			" ├─ Union distinct\n" +
			" │   ├─ Project\n" +
			" │   │   ├─ columns: [t1.j as k]\n" +
			" │   │   └─ HashJoin\n" +
			" │   │       ├─ (t1.j = t2.j)\n" +
			" │   │       ├─ SubqueryAlias\n" +
			" │   │       │   ├─ name: t1\n" +
			" │   │       │   ├─ outerVisibility: false\n" +
			" │   │       │   ├─ isLateral: false\n" +
			" │   │       │   ├─ cacheable: true\n" +
			" │   │       │   └─ Project\n" +
			" │   │       │       ├─ columns: [1]\n" +
			" │   │       │       └─ Table\n" +
			" │   │       │           └─ name: \n" +
			" │   │       └─ HashLookup\n" +
			" │   │           ├─ left-key: (t1.j)\n" +
			" │   │           ├─ right-key: (t2.j)\n" +
			" │   │           └─ SubqueryAlias\n" +
			" │   │               ├─ name: t2\n" +
			" │   │               ├─ outerVisibility: false\n" +
			" │   │               ├─ isLateral: false\n" +
			" │   │               ├─ cacheable: true\n" +
			" │   │               └─ Project\n" +
			" │   │                   ├─ columns: [1]\n" +
			" │   │                   └─ Table\n" +
			" │   │                       └─ name: \n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: b\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [2]\n" +
			" │           └─ Table\n" +
			" │               └─ name: \n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Project\n" +
			"         ├─ columns: [1]\n" +
			"         └─ Table\n" +
			"             └─ name: \n" +
			"",
		ExpectedAnalysis: "Union distinct\n" +
			" ├─ sortFields: [k]\n" +
			" ├─ limit: 1\n" +
			" ├─ Union distinct\n" +
			" │   ├─ Project\n" +
			" │   │   ├─ columns: [t1.j as k]\n" +
			" │   │   └─ HashJoin\n" +
			" │   │       ├─ (t1.j = t2.j)\n" +
			" │   │       ├─ SubqueryAlias\n" +
			" │   │       │   ├─ name: t1\n" +
			" │   │       │   ├─ outerVisibility: false\n" +
			" │   │       │   ├─ isLateral: false\n" +
			" │   │       │   ├─ cacheable: true\n" +
			" │   │       │   └─ Project\n" +
			" │   │       │       ├─ columns: [1]\n" +
			" │   │       │       └─ Table\n" +
			" │   │       │           └─ name: \n" +
			" │   │       └─ HashLookup\n" +
			" │   │           ├─ left-key: (t1.j)\n" +
			" │   │           ├─ right-key: (t2.j)\n" +
			" │   │           └─ SubqueryAlias\n" +
			" │   │               ├─ name: t2\n" +
			" │   │               ├─ outerVisibility: false\n" +
			" │   │               ├─ isLateral: false\n" +
			" │   │               ├─ cacheable: true\n" +
			" │   │               └─ Project\n" +
			" │   │                   ├─ columns: [1]\n" +
			" │   │                   └─ Table\n" +
			" │   │                       └─ name: \n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: b\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [2]\n" +
			" │           └─ Table\n" +
			" │               └─ name: \n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Project\n" +
			"         ├─ columns: [1]\n" +
			"         └─ Table\n" +
			"             └─ name: \n" +
			"",
	},
	{
		Query: `with a(j) as (select 1 union select 2 union select 3), b(i) as (select 2 union select 3) (select t1.j as k from a t1 join a t2 on t1.j = t2.j union select i from b order by k desc limit 2) union select j from a;`,
		ExpectedPlan: "Union distinct\n" +
			" ├─ sortFields: k:0!null\n" +
			" ├─ limit: 2\n" +
			" ├─ Union distinct\n" +
			" │   ├─ Project\n" +
			" │   │   ├─ columns: [t1.j:0!null as k]\n" +
			" │   │   └─ HashJoin\n" +
			" │   │       ├─ Eq\n" +
			" │   │       │   ├─ t1.j:0!null\n" +
			" │   │       │   └─ t2.j:1!null\n" +
			" │   │       ├─ SubqueryAlias\n" +
			" │   │       │   ├─ name: t1\n" +
			" │   │       │   ├─ outerVisibility: false\n" +
			" │   │       │   ├─ isLateral: false\n" +
			" │   │       │   ├─ cacheable: true\n" +
			" │   │       │   ├─ colSet: (8)\n" +
			" │   │       │   ├─ tableId: 8\n" +
			" │   │       │   └─ Union distinct\n" +
			" │   │       │       ├─ Union distinct\n" +
			" │   │       │       │   ├─ Project\n" +
			" │   │       │       │   │   ├─ columns: [1 (tinyint)]\n" +
			" │   │       │       │   │   └─ Table\n" +
			" │   │       │       │   │       ├─ name: \n" +
			" │   │       │       │   │       ├─ columns: []\n" +
			" │   │       │       │   │       ├─ colSet: ()\n" +
			" │   │       │       │   │       └─ tableId: 0\n" +
			" │   │       │       │   └─ Project\n" +
			" │   │       │       │       ├─ columns: [2 (tinyint)]\n" +
			" │   │       │       │       └─ Table\n" +
			" │   │       │       │           ├─ name: \n" +
			" │   │       │       │           ├─ columns: []\n" +
			" │   │       │       │           ├─ colSet: ()\n" +
			" │   │       │       │           └─ tableId: 0\n" +
			" │   │       │       └─ Project\n" +
			" │   │       │           ├─ columns: [3 (tinyint)]\n" +
			" │   │       │           └─ Table\n" +
			" │   │       │               ├─ name: \n" +
			" │   │       │               ├─ columns: []\n" +
			" │   │       │               ├─ colSet: ()\n" +
			" │   │       │               └─ tableId: 0\n" +
			" │   │       └─ HashLookup\n" +
			" │   │           ├─ left-key: TUPLE(t1.j:0!null)\n" +
			" │   │           ├─ right-key: TUPLE(t2.j:0!null)\n" +
			" │   │           └─ SubqueryAlias\n" +
			" │   │               ├─ name: t2\n" +
			" │   │               ├─ outerVisibility: false\n" +
			" │   │               ├─ isLateral: false\n" +
			" │   │               ├─ cacheable: true\n" +
			" │   │               ├─ colSet: (9)\n" +
			" │   │               ├─ tableId: 9\n" +
			" │   │               └─ Union distinct\n" +
			" │   │                   ├─ Union distinct\n" +
			" │   │                   │   ├─ Project\n" +
			" │   │                   │   │   ├─ columns: [1 (tinyint)]\n" +
			" │   │                   │   │   └─ Table\n" +
			" │   │                   │   │       ├─ name: \n" +
			" │   │                   │   │       ├─ columns: []\n" +
			" │   │                   │   │       ├─ colSet: ()\n" +
			" │   │                   │   │       └─ tableId: 0\n" +
			" │   │                   │   └─ Project\n" +
			" │   │                   │       ├─ columns: [2 (tinyint)]\n" +
			" │   │                   │       └─ Table\n" +
			" │   │                   │           ├─ name: \n" +
			" │   │                   │           ├─ columns: []\n" +
			" │   │                   │           ├─ colSet: ()\n" +
			" │   │                   │           └─ tableId: 0\n" +
			" │   │                   └─ Project\n" +
			" │   │                       ├─ columns: [3 (tinyint)]\n" +
			" │   │                       └─ Table\n" +
			" │   │                           ├─ name: \n" +
			" │   │                           ├─ columns: []\n" +
			" │   │                           ├─ colSet: ()\n" +
			" │   │                           └─ tableId: 0\n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: b\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       ├─ colSet: (7)\n" +
			" │       ├─ tableId: 6\n" +
			" │       └─ Union distinct\n" +
			" │           ├─ Project\n" +
			" │           │   ├─ columns: [2 (tinyint)]\n" +
			" │           │   └─ Table\n" +
			" │           │       ├─ name: \n" +
			" │           │       ├─ columns: []\n" +
			" │           │       ├─ colSet: ()\n" +
			" │           │       └─ tableId: 0\n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [3 (tinyint)]\n" +
			" │               └─ Table\n" +
			" │                   ├─ name: \n" +
			" │                   ├─ columns: []\n" +
			" │                   ├─ colSet: ()\n" +
			" │                   └─ tableId: 0\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (4)\n" +
			"     ├─ tableId: 3\n" +
			"     └─ Union distinct\n" +
			"         ├─ Union distinct\n" +
			"         │   ├─ Project\n" +
			"         │   │   ├─ columns: [1 (tinyint)]\n" +
			"         │   │   └─ Table\n" +
			"         │   │       ├─ name: \n" +
			"         │   │       ├─ columns: []\n" +
			"         │   │       ├─ colSet: ()\n" +
			"         │   │       └─ tableId: 0\n" +
			"         │   └─ Project\n" +
			"         │       ├─ columns: [2 (tinyint)]\n" +
			"         │       └─ Table\n" +
			"         │           ├─ name: \n" +
			"         │           ├─ columns: []\n" +
			"         │           ├─ colSet: ()\n" +
			"         │           └─ tableId: 0\n" +
			"         └─ Project\n" +
			"             ├─ columns: [3 (tinyint)]\n" +
			"             └─ Table\n" +
			"                 ├─ name: \n" +
			"                 ├─ columns: []\n" +
			"                 ├─ colSet: ()\n" +
			"                 └─ tableId: 0\n" +
			"",
		ExpectedEstimates: "Union distinct\n" +
			" ├─ sortFields: [k]\n" +
			" ├─ limit: 2\n" +
			" ├─ Union distinct\n" +
			" │   ├─ Project\n" +
			" │   │   ├─ columns: [t1.j as k]\n" +
			" │   │   └─ HashJoin\n" +
			" │   │       ├─ (t1.j = t2.j)\n" +
			" │   │       ├─ SubqueryAlias\n" +
			" │   │       │   ├─ name: t1\n" +
			" │   │       │   ├─ outerVisibility: false\n" +
			" │   │       │   ├─ isLateral: false\n" +
			" │   │       │   ├─ cacheable: true\n" +
			" │   │       │   └─ Union distinct\n" +
			" │   │       │       ├─ Union distinct\n" +
			" │   │       │       │   ├─ Project\n" +
			" │   │       │       │   │   ├─ columns: [1]\n" +
			" │   │       │       │   │   └─ Table\n" +
			" │   │       │       │   │       └─ name: \n" +
			" │   │       │       │   └─ Project\n" +
			" │   │       │       │       ├─ columns: [2]\n" +
			" │   │       │       │       └─ Table\n" +
			" │   │       │       │           └─ name: \n" +
			" │   │       │       └─ Project\n" +
			" │   │       │           ├─ columns: [3]\n" +
			" │   │       │           └─ Table\n" +
			" │   │       │               └─ name: \n" +
			" │   │       └─ HashLookup\n" +
			" │   │           ├─ left-key: (t1.j)\n" +
			" │   │           ├─ right-key: (t2.j)\n" +
			" │   │           └─ SubqueryAlias\n" +
			" │   │               ├─ name: t2\n" +
			" │   │               ├─ outerVisibility: false\n" +
			" │   │               ├─ isLateral: false\n" +
			" │   │               ├─ cacheable: true\n" +
			" │   │               └─ Union distinct\n" +
			" │   │                   ├─ Union distinct\n" +
			" │   │                   │   ├─ Project\n" +
			" │   │                   │   │   ├─ columns: [1]\n" +
			" │   │                   │   │   └─ Table\n" +
			" │   │                   │   │       └─ name: \n" +
			" │   │                   │   └─ Project\n" +
			" │   │                   │       ├─ columns: [2]\n" +
			" │   │                   │       └─ Table\n" +
			" │   │                   │           └─ name: \n" +
			" │   │                   └─ Project\n" +
			" │   │                       ├─ columns: [3]\n" +
			" │   │                       └─ Table\n" +
			" │   │                           └─ name: \n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: b\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Union distinct\n" +
			" │           ├─ Project\n" +
			" │           │   ├─ columns: [2]\n" +
			" │           │   └─ Table\n" +
			" │           │       └─ name: \n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [3]\n" +
			" │               └─ Table\n" +
			" │                   └─ name: \n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Union distinct\n" +
			"         ├─ Union distinct\n" +
			"         │   ├─ Project\n" +
			"         │   │   ├─ columns: [1]\n" +
			"         │   │   └─ Table\n" +
			"         │   │       └─ name: \n" +
			"         │   └─ Project\n" +
			"         │       ├─ columns: [2]\n" +
			"         │       └─ Table\n" +
			"         │           └─ name: \n" +
			"         └─ Project\n" +
			"             ├─ columns: [3]\n" +
			"             └─ Table\n" +
			"                 └─ name: \n" +
			"",
		ExpectedAnalysis: "Union distinct\n" +
			" ├─ sortFields: [k]\n" +
			" ├─ limit: 2\n" +
			" ├─ Union distinct\n" +
			" │   ├─ Project\n" +
			" │   │   ├─ columns: [t1.j as k]\n" +
			" │   │   └─ HashJoin\n" +
			" │   │       ├─ (t1.j = t2.j)\n" +
			" │   │       ├─ SubqueryAlias\n" +
			" │   │       │   ├─ name: t1\n" +
			" │   │       │   ├─ outerVisibility: false\n" +
			" │   │       │   ├─ isLateral: false\n" +
			" │   │       │   ├─ cacheable: true\n" +
			" │   │       │   └─ Union distinct\n" +
			" │   │       │       ├─ Union distinct\n" +
			" │   │       │       │   ├─ Project\n" +
			" │   │       │       │   │   ├─ columns: [1]\n" +
			" │   │       │       │   │   └─ Table\n" +
			" │   │       │       │   │       └─ name: \n" +
			" │   │       │       │   └─ Project\n" +
			" │   │       │       │       ├─ columns: [2]\n" +
			" │   │       │       │       └─ Table\n" +
			" │   │       │       │           └─ name: \n" +
			" │   │       │       └─ Project\n" +
			" │   │       │           ├─ columns: [3]\n" +
			" │   │       │           └─ Table\n" +
			" │   │       │               └─ name: \n" +
			" │   │       └─ HashLookup\n" +
			" │   │           ├─ left-key: (t1.j)\n" +
			" │   │           ├─ right-key: (t2.j)\n" +
			" │   │           └─ SubqueryAlias\n" +
			" │   │               ├─ name: t2\n" +
			" │   │               ├─ outerVisibility: false\n" +
			" │   │               ├─ isLateral: false\n" +
			" │   │               ├─ cacheable: true\n" +
			" │   │               └─ Union distinct\n" +
			" │   │                   ├─ Union distinct\n" +
			" │   │                   │   ├─ Project\n" +
			" │   │                   │   │   ├─ columns: [1]\n" +
			" │   │                   │   │   └─ Table\n" +
			" │   │                   │   │       └─ name: \n" +
			" │   │                   │   └─ Project\n" +
			" │   │                   │       ├─ columns: [2]\n" +
			" │   │                   │       └─ Table\n" +
			" │   │                   │           └─ name: \n" +
			" │   │                   └─ Project\n" +
			" │   │                       ├─ columns: [3]\n" +
			" │   │                       └─ Table\n" +
			" │   │                           └─ name: \n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: b\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Union distinct\n" +
			" │           ├─ Project\n" +
			" │           │   ├─ columns: [2]\n" +
			" │           │   └─ Table\n" +
			" │           │       └─ name: \n" +
			" │           └─ Project\n" +
			" │               ├─ columns: [3]\n" +
			" │               └─ Table\n" +
			" │                   └─ name: \n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Union distinct\n" +
			"         ├─ Union distinct\n" +
			"         │   ├─ Project\n" +
			"         │   │   ├─ columns: [1]\n" +
			"         │   │   └─ Table\n" +
			"         │   │       └─ name: \n" +
			"         │   └─ Project\n" +
			"         │       ├─ columns: [2]\n" +
			"         │       └─ Table\n" +
			"         │           └─ name: \n" +
			"         └─ Project\n" +
			"             ├─ columns: [3]\n" +
			"             └─ Table\n" +
			"                 └─ name: \n" +
			"",
	},
	{
		Query: `with a(j) as (select 1), b(i) as (select 2) (select j from a union select i from b order by j desc limit 1) union select j from a;`,
		ExpectedPlan: "Union distinct\n" +
			" ├─ sortFields: a.j:0!null\n" +
			" ├─ limit: 1\n" +
			" ├─ Union distinct\n" +
			" │   ├─ SubqueryAlias\n" +
			" │   │   ├─ name: a\n" +
			" │   │   ├─ outerVisibility: false\n" +
			" │   │   ├─ isLateral: false\n" +
			" │   │   ├─ cacheable: true\n" +
			" │   │   ├─ colSet: (2)\n" +
			" │   │   ├─ tableId: 1\n" +
			" │   │   └─ Project\n" +
			" │   │       ├─ columns: [1 (tinyint)]\n" +
			" │   │       └─ Table\n" +
			" │   │           ├─ name: \n" +
			" │   │           ├─ columns: []\n" +
			" │   │           ├─ colSet: ()\n" +
			" │   │           └─ tableId: 0\n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: b\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       ├─ colSet: (4)\n" +
			" │       ├─ tableId: 3\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [2 (tinyint)]\n" +
			" │           └─ Table\n" +
			" │               ├─ name: \n" +
			" │               ├─ columns: []\n" +
			" │               ├─ colSet: ()\n" +
			" │               └─ tableId: 0\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Project\n" +
			"         ├─ columns: [1 (tinyint)]\n" +
			"         └─ Table\n" +
			"             ├─ name: \n" +
			"             ├─ columns: []\n" +
			"             ├─ colSet: ()\n" +
			"             └─ tableId: 0\n" +
			"",
		ExpectedEstimates: "Union distinct\n" +
			" ├─ sortFields: [a.j]\n" +
			" ├─ limit: 1\n" +
			" ├─ Union distinct\n" +
			" │   ├─ SubqueryAlias\n" +
			" │   │   ├─ name: a\n" +
			" │   │   ├─ outerVisibility: false\n" +
			" │   │   ├─ isLateral: false\n" +
			" │   │   ├─ cacheable: true\n" +
			" │   │   └─ Project\n" +
			" │   │       ├─ columns: [1]\n" +
			" │   │       └─ Table\n" +
			" │   │           └─ name: \n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: b\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [2]\n" +
			" │           └─ Table\n" +
			" │               └─ name: \n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Project\n" +
			"         ├─ columns: [1]\n" +
			"         └─ Table\n" +
			"             └─ name: \n" +
			"",
		ExpectedAnalysis: "Union distinct\n" +
			" ├─ sortFields: [a.j]\n" +
			" ├─ limit: 1\n" +
			" ├─ Union distinct\n" +
			" │   ├─ SubqueryAlias\n" +
			" │   │   ├─ name: a\n" +
			" │   │   ├─ outerVisibility: false\n" +
			" │   │   ├─ isLateral: false\n" +
			" │   │   ├─ cacheable: true\n" +
			" │   │   └─ Project\n" +
			" │   │       ├─ columns: [1]\n" +
			" │   │       └─ Table\n" +
			" │   │           └─ name: \n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: b\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [2]\n" +
			" │           └─ Table\n" +
			" │               └─ name: \n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Project\n" +
			"         ├─ columns: [1]\n" +
			"         └─ Table\n" +
			"             └─ name: \n" +
			"",
	},
	{
		Query: `with a(j) as (select 1), b(i) as (select 2) (select j from a union select i from b order by 1 limit 1) union select j from a;`,
		ExpectedPlan: "Union distinct\n" +
			" ├─ sortFields: a.j:0!null\n" +
			" ├─ limit: 1\n" +
			" ├─ Union distinct\n" +
			" │   ├─ SubqueryAlias\n" +
			" │   │   ├─ name: a\n" +
			" │   │   ├─ outerVisibility: false\n" +
			" │   │   ├─ isLateral: false\n" +
			" │   │   ├─ cacheable: true\n" +
			" │   │   ├─ colSet: (2)\n" +
			" │   │   ├─ tableId: 1\n" +
			" │   │   └─ Project\n" +
			" │   │       ├─ columns: [1 (tinyint)]\n" +
			" │   │       └─ Table\n" +
			" │   │           ├─ name: \n" +
			" │   │           ├─ columns: []\n" +
			" │   │           ├─ colSet: ()\n" +
			" │   │           └─ tableId: 0\n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: b\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       ├─ colSet: (4)\n" +
			" │       ├─ tableId: 3\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [2 (tinyint)]\n" +
			" │           └─ Table\n" +
			" │               ├─ name: \n" +
			" │               ├─ columns: []\n" +
			" │               ├─ colSet: ()\n" +
			" │               └─ tableId: 0\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Project\n" +
			"         ├─ columns: [1 (tinyint)]\n" +
			"         └─ Table\n" +
			"             ├─ name: \n" +
			"             ├─ columns: []\n" +
			"             ├─ colSet: ()\n" +
			"             └─ tableId: 0\n" +
			"",
		ExpectedEstimates: "Union distinct\n" +
			" ├─ sortFields: [a.j]\n" +
			" ├─ limit: 1\n" +
			" ├─ Union distinct\n" +
			" │   ├─ SubqueryAlias\n" +
			" │   │   ├─ name: a\n" +
			" │   │   ├─ outerVisibility: false\n" +
			" │   │   ├─ isLateral: false\n" +
			" │   │   ├─ cacheable: true\n" +
			" │   │   └─ Project\n" +
			" │   │       ├─ columns: [1]\n" +
			" │   │       └─ Table\n" +
			" │   │           └─ name: \n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: b\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [2]\n" +
			" │           └─ Table\n" +
			" │               └─ name: \n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Project\n" +
			"         ├─ columns: [1]\n" +
			"         └─ Table\n" +
			"             └─ name: \n" +
			"",
		ExpectedAnalysis: "Union distinct\n" +
			" ├─ sortFields: [a.j]\n" +
			" ├─ limit: 1\n" +
			" ├─ Union distinct\n" +
			" │   ├─ SubqueryAlias\n" +
			" │   │   ├─ name: a\n" +
			" │   │   ├─ outerVisibility: false\n" +
			" │   │   ├─ isLateral: false\n" +
			" │   │   ├─ cacheable: true\n" +
			" │   │   └─ Project\n" +
			" │   │       ├─ columns: [1]\n" +
			" │   │       └─ Table\n" +
			" │   │           └─ name: \n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: b\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [2]\n" +
			" │           └─ Table\n" +
			" │               └─ name: \n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Project\n" +
			"         ├─ columns: [1]\n" +
			"         └─ Table\n" +
			"             └─ name: \n" +
			"",
	},
	{
		Query: `with a(j) as (select 1), b(i) as (select 1) (select j from a union all select i from b) union select j from a;`,
		ExpectedPlan: "Union distinct\n" +
			" ├─ Union all\n" +
			" │   ├─ SubqueryAlias\n" +
			" │   │   ├─ name: a\n" +
			" │   │   ├─ outerVisibility: false\n" +
			" │   │   ├─ isLateral: false\n" +
			" │   │   ├─ cacheable: true\n" +
			" │   │   ├─ colSet: (2)\n" +
			" │   │   ├─ tableId: 1\n" +
			" │   │   └─ Project\n" +
			" │   │       ├─ columns: [1 (tinyint)]\n" +
			" │   │       └─ Table\n" +
			" │   │           ├─ name: \n" +
			" │   │           ├─ columns: []\n" +
			" │   │           ├─ colSet: ()\n" +
			" │   │           └─ tableId: 0\n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: b\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       ├─ colSet: (4)\n" +
			" │       ├─ tableId: 3\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [1 (tinyint)]\n" +
			" │           └─ Table\n" +
			" │               ├─ name: \n" +
			" │               ├─ columns: []\n" +
			" │               ├─ colSet: ()\n" +
			" │               └─ tableId: 0\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Project\n" +
			"         ├─ columns: [1 (tinyint)]\n" +
			"         └─ Table\n" +
			"             ├─ name: \n" +
			"             ├─ columns: []\n" +
			"             ├─ colSet: ()\n" +
			"             └─ tableId: 0\n" +
			"",
		ExpectedEstimates: "Union distinct\n" +
			" ├─ Union all\n" +
			" │   ├─ SubqueryAlias\n" +
			" │   │   ├─ name: a\n" +
			" │   │   ├─ outerVisibility: false\n" +
			" │   │   ├─ isLateral: false\n" +
			" │   │   ├─ cacheable: true\n" +
			" │   │   └─ Project\n" +
			" │   │       ├─ columns: [1]\n" +
			" │   │       └─ Table\n" +
			" │   │           └─ name: \n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: b\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [1]\n" +
			" │           └─ Table\n" +
			" │               └─ name: \n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Project\n" +
			"         ├─ columns: [1]\n" +
			"         └─ Table\n" +
			"             └─ name: \n" +
			"",
		ExpectedAnalysis: "Union distinct\n" +
			" ├─ Union all\n" +
			" │   ├─ SubqueryAlias\n" +
			" │   │   ├─ name: a\n" +
			" │   │   ├─ outerVisibility: false\n" +
			" │   │   ├─ isLateral: false\n" +
			" │   │   ├─ cacheable: true\n" +
			" │   │   └─ Project\n" +
			" │   │       ├─ columns: [1]\n" +
			" │   │       └─ Table\n" +
			" │   │           └─ name: \n" +
			" │   └─ SubqueryAlias\n" +
			" │       ├─ name: b\n" +
			" │       ├─ outerVisibility: false\n" +
			" │       ├─ isLateral: false\n" +
			" │       ├─ cacheable: true\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [1]\n" +
			" │           └─ Table\n" +
			" │               └─ name: \n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: a\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Project\n" +
			"         ├─ columns: [1]\n" +
			"         └─ Table\n" +
			"             └─ name: \n" +
			"",
	},
	{
		Query: `
With c as (
  select * from (
    select a.s
    From mytable a
    Join (
      Select t2.*
      From mytable t2
      Where t2.i in (1,2)
    ) b
    On a.i = b.i
    Join (
      select t1.*
      from mytable t1
      Where t1.I in (2,3)
    ) e
    On b.I = e.i
  ) d
) select * from c;`,
		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: c\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (12)\n" +
			" ├─ tableId: 7\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: d\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (11)\n" +
			"     ├─ tableId: 6\n" +
			"     └─ Project\n" +
			"         ├─ columns: [a.s:3!null]\n" +
			"         └─ HashJoin\n" +
			"             ├─ Eq\n" +
			"             │   ├─ b.I:0!null\n" +
			"             │   └─ e.i:4!null\n" +
			"             ├─ HashJoin\n" +
			"             │   ├─ Eq\n" +
			"             │   │   ├─ a.i:2!null\n" +
			"             │   │   └─ b.i:0!null\n" +
			"             │   ├─ SubqueryAlias\n" +
			"             │   │   ├─ name: b\n" +
			"             │   │   ├─ outerVisibility: false\n" +
			"             │   │   ├─ isLateral: false\n" +
			"             │   │   ├─ cacheable: true\n" +
			"             │   │   ├─ colSet: (5,6)\n" +
			"             │   │   ├─ tableId: 3\n" +
			"             │   │   └─ Filter\n" +
			"             │   │       ├─ HashIn\n" +
			"             │   │       │   ├─ t2.i:0!null\n" +
			"             │   │       │   └─ TUPLE(1 (tinyint), 2 (tinyint))\n" +
			"             │   │       └─ TableAlias(t2)\n" +
			"             │   │           └─ IndexedTableAccess(mytable)\n" +
			"             │   │               ├─ index: [mytable.i]\n" +
			"             │   │               ├─ static: [{[1, 1]}, {[2, 2]}]\n" +
			"             │   │               ├─ colSet: (3,4)\n" +
			"             │   │               ├─ tableId: 2\n" +
			"             │   │               └─ Table\n" +
			"             │   │                   ├─ name: mytable\n" +
			"             │   │                   └─ columns: [i s]\n" +
			"             │   └─ HashLookup\n" +
			"             │       ├─ left-key: TUPLE(b.i:0!null)\n" +
			"             │       ├─ right-key: TUPLE(a.i:0!null)\n" +
			"             │       └─ TableAlias(a)\n" +
			"             │           └─ Table\n" +
			"             │               ├─ name: mytable\n" +
			"             │               ├─ columns: [i s]\n" +
			"             │               ├─ colSet: (1,2)\n" +
			"             │               └─ tableId: 1\n" +
			"             └─ HashLookup\n" +
			"                 ├─ left-key: TUPLE(b.I:0!null)\n" +
			"                 ├─ right-key: TUPLE(e.i:0!null)\n" +
			"                 └─ SubqueryAlias\n" +
			"                     ├─ name: e\n" +
			"                     ├─ outerVisibility: false\n" +
			"                     ├─ isLateral: false\n" +
			"                     ├─ cacheable: true\n" +
			"                     ├─ colSet: (9,10)\n" +
			"                     ├─ tableId: 5\n" +
			"                     └─ Filter\n" +
			"                         ├─ HashIn\n" +
			"                         │   ├─ t1.I:0!null\n" +
			"                         │   └─ TUPLE(2 (tinyint), 3 (tinyint))\n" +
			"                         └─ TableAlias(t1)\n" +
			"                             └─ IndexedTableAccess(mytable)\n" +
			"                                 ├─ index: [mytable.i]\n" +
			"                                 ├─ static: [{[2, 2]}, {[3, 3]}]\n" +
			"                                 ├─ colSet: (7,8)\n" +
			"                                 ├─ tableId: 4\n" +
			"                                 └─ Table\n" +
			"                                     ├─ name: mytable\n" +
			"                                     └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: c\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: d\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Project\n" +
			"         ├─ columns: [a.s]\n" +
			"         └─ HashJoin\n" +
			"             ├─ (b.I = e.i)\n" +
			"             ├─ HashJoin\n" +
			"             │   ├─ (a.i = b.i)\n" +
			"             │   ├─ SubqueryAlias\n" +
			"             │   │   ├─ name: b\n" +
			"             │   │   ├─ outerVisibility: false\n" +
			"             │   │   ├─ isLateral: false\n" +
			"             │   │   ├─ cacheable: true\n" +
			"             │   │   └─ Filter\n" +
			"             │   │       ├─ (t2.i HASH IN (1, 2))\n" +
			"             │   │       └─ TableAlias(t2)\n" +
			"             │   │           └─ IndexedTableAccess(mytable)\n" +
			"             │   │               ├─ index: [mytable.i]\n" +
			"             │   │               ├─ filters: [{[1, 1]}, {[2, 2]}]\n" +
			"             │   │               └─ columns: [i s]\n" +
			"             │   └─ HashLookup\n" +
			"             │       ├─ left-key: (b.i)\n" +
			"             │       ├─ right-key: (a.i)\n" +
			"             │       └─ TableAlias(a)\n" +
			"             │           └─ Table\n" +
			"             │               ├─ name: mytable\n" +
			"             │               └─ columns: [i s]\n" +
			"             └─ HashLookup\n" +
			"                 ├─ left-key: (b.I)\n" +
			"                 ├─ right-key: (e.i)\n" +
			"                 └─ SubqueryAlias\n" +
			"                     ├─ name: e\n" +
			"                     ├─ outerVisibility: false\n" +
			"                     ├─ isLateral: false\n" +
			"                     ├─ cacheable: true\n" +
			"                     └─ Filter\n" +
			"                         ├─ (t1.I HASH IN (2, 3))\n" +
			"                         └─ TableAlias(t1)\n" +
			"                             └─ IndexedTableAccess(mytable)\n" +
			"                                 ├─ index: [mytable.i]\n" +
			"                                 ├─ filters: [{[2, 2]}, {[3, 3]}]\n" +
			"                                 └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: c\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: d\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Project\n" +
			"         ├─ columns: [a.s]\n" +
			"         └─ HashJoin\n" +
			"             ├─ (b.I = e.i)\n" +
			"             ├─ HashJoin\n" +
			"             │   ├─ (a.i = b.i)\n" +
			"             │   ├─ SubqueryAlias\n" +
			"             │   │   ├─ name: b\n" +
			"             │   │   ├─ outerVisibility: false\n" +
			"             │   │   ├─ isLateral: false\n" +
			"             │   │   ├─ cacheable: true\n" +
			"             │   │   └─ Filter\n" +
			"             │   │       ├─ (t2.i HASH IN (1, 2))\n" +
			"             │   │       └─ TableAlias(t2)\n" +
			"             │   │           └─ IndexedTableAccess(mytable)\n" +
			"             │   │               ├─ index: [mytable.i]\n" +
			"             │   │               ├─ filters: [{[1, 1]}, {[2, 2]}]\n" +
			"             │   │               └─ columns: [i s]\n" +
			"             │   └─ HashLookup\n" +
			"             │       ├─ left-key: (b.i)\n" +
			"             │       ├─ right-key: (a.i)\n" +
			"             │       └─ TableAlias(a)\n" +
			"             │           └─ Table\n" +
			"             │               ├─ name: mytable\n" +
			"             │               └─ columns: [i s]\n" +
			"             └─ HashLookup\n" +
			"                 ├─ left-key: (b.I)\n" +
			"                 ├─ right-key: (e.i)\n" +
			"                 └─ SubqueryAlias\n" +
			"                     ├─ name: e\n" +
			"                     ├─ outerVisibility: false\n" +
			"                     ├─ isLateral: false\n" +
			"                     ├─ cacheable: true\n" +
			"                     └─ Filter\n" +
			"                         ├─ (t1.I HASH IN (2, 3))\n" +
			"                         └─ TableAlias(t1)\n" +
			"                             └─ IndexedTableAccess(mytable)\n" +
			"                                 ├─ index: [mytable.i]\n" +
			"                                 ├─ filters: [{[2, 2]}, {[3, 3]}]\n" +
			"                                 └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT i FROM (SELECT i FROM mytable LIMIT 1) sq WHERE i = 3;`,
		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: sq\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (3)\n" +
			" ├─ tableId: 2\n" +
			" └─ Filter\n" +
			"     ├─ Eq\n" +
			"     │   ├─ mytable.i:0!null\n" +
			"     │   └─ 3 (bigint)\n" +
			"     └─ Limit(1)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             ├─ columns: [i]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: sq\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Filter\n" +
			"     ├─ (mytable.i = 3)\n" +
			"     └─ Limit(1)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: sq\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Filter\n" +
			"     ├─ (mytable.i = 3)\n" +
			"     └─ Limit(1)\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT i FROM (SELECT i FROM (SELECT i FROM mytable LIMIT 1) sq1) sq2 WHERE i = 3;`,
		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: sq2\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (4)\n" +
			" ├─ tableId: 3\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq1\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (3)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Filter\n" +
			"         ├─ Eq\n" +
			"         │   ├─ mytable.i:0!null\n" +
			"         │   └─ 3 (bigint)\n" +
			"         └─ Limit(1)\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 ├─ columns: [i]\n" +
			"                 ├─ colSet: (1,2)\n" +
			"                 └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: sq2\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq1\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Filter\n" +
			"         ├─ (mytable.i = 3)\n" +
			"         └─ Limit(1)\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: sq2\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq1\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Filter\n" +
			"         ├─ (mytable.i = 3)\n" +
			"         └─ Limit(1)\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT i FROM (SELECT i FROM mytable ORDER BY i DESC LIMIT 1) sq WHERE i = 3;`,
		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: sq\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (3)\n" +
			" ├─ tableId: 2\n" +
			" └─ Filter\n" +
			"     ├─ Eq\n" +
			"     │   ├─ mytable.i:0!null\n" +
			"     │   └─ 3 (bigint)\n" +
			"     └─ Limit(1)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ reverse: true\n" +
			"             ├─ colSet: (1,2)\n" +
			"             ├─ tableId: 1\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: sq\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Filter\n" +
			"     ├─ (mytable.i = 3)\n" +
			"     └─ Limit(1)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             ├─ columns: [i]\n" +
			"             └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: sq\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Filter\n" +
			"     ├─ (mytable.i = 3)\n" +
			"     └─ Limit(1)\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             ├─ columns: [i]\n" +
			"             └─ reverse: true\n" +
			"",
	},
	{
		Query: `SELECT i FROM (SELECT i FROM (SELECT i FROM mytable ORDER BY i DESC  LIMIT 1) sq1) sq2 WHERE i = 3;`,
		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: sq2\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (4)\n" +
			" ├─ tableId: 3\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq1\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (3)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Filter\n" +
			"         ├─ Eq\n" +
			"         │   ├─ mytable.i:0!null\n" +
			"         │   └─ 3 (bigint)\n" +
			"         └─ Limit(1)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ static: [{[NULL, ∞)}]\n" +
			"                 ├─ reverse: true\n" +
			"                 ├─ colSet: (1,2)\n" +
			"                 ├─ tableId: 1\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: sq2\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq1\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Filter\n" +
			"         ├─ (mytable.i = 3)\n" +
			"         └─ Limit(1)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 ├─ columns: [i]\n" +
			"                 └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: sq2\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq1\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Filter\n" +
			"         ├─ (mytable.i = 3)\n" +
			"         └─ Limit(1)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 ├─ columns: [i]\n" +
			"                 └─ reverse: true\n" +
			"",
	},
	{
		Query: `SELECT i FROM (SELECT i FROM mytable WHERE i > 1) sq LIMIT 1;`,
		ExpectedPlan: "Limit(1)\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (3)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ IndexedTableAccess(mytable)\n" +
			"         ├─ index: [mytable.i]\n" +
			"         ├─ static: [{(1, ∞)}]\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Limit(1)\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ IndexedTableAccess(mytable)\n" +
			"         ├─ index: [mytable.i]\n" +
			"         ├─ filters: [{(1, ∞)}]\n" +
			"         └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Limit(1)\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ IndexedTableAccess(mytable)\n" +
			"         ├─ index: [mytable.i]\n" +
			"         ├─ filters: [{(1, ∞)}]\n" +
			"         └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT i FROM (SELECT i FROM (SELECT i FROM mytable WHERE i > 1) sq1) sq2 LIMIT 1;`,
		ExpectedPlan: "Limit(1)\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq2\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (4)\n" +
			"     ├─ tableId: 3\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: sq1\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (3)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ static: [{(1, ∞)}]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             ├─ tableId: 1\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Limit(1)\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq2\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: sq1\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ filters: [{(1, ∞)}]\n" +
			"             └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Limit(1)\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq2\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: sq1\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ filters: [{(1, ∞)}]\n" +
			"             └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT i FROM (SELECT i FROM (SELECT i FROM mytable) sq1 WHERE i > 1) sq2 LIMIT 1;`,
		ExpectedPlan: "Limit(1)\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq2\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (4)\n" +
			"     ├─ tableId: 3\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: sq1\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (3)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ static: [{(1, ∞)}]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             ├─ tableId: 1\n" +
			"             └─ Table\n" +
			"                 ├─ name: mytable\n" +
			"                 └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "Limit(1)\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq2\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: sq1\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ filters: [{(1, ∞)}]\n" +
			"             └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Limit(1)\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq2\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: sq1\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ IndexedTableAccess(mytable)\n" +
			"             ├─ index: [mytable.i]\n" +
			"             ├─ filters: [{(1, ∞)}]\n" +
			"             └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT i FROM (SELECT i FROM (SELECT i FROM mytable LIMIT 1) sq1 WHERE i > 1) sq2 LIMIT 10;`,
		ExpectedPlan: "Limit(10)\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq2\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (4)\n" +
			"     ├─ tableId: 3\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: sq1\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (3)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Filter\n" +
			"             ├─ GreaterThan\n" +
			"             │   ├─ mytable.i:0!null\n" +
			"             │   └─ 1 (bigint)\n" +
			"             └─ Limit(1)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     ├─ columns: [i]\n" +
			"                     ├─ colSet: (1,2)\n" +
			"                     └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Limit(10)\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq2\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: sq1\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Filter\n" +
			"             ├─ (mytable.i > 1)\n" +
			"             └─ Limit(1)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "Limit(10)\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: sq2\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: sq1\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Filter\n" +
			"             ├─ (mytable.i > 1)\n" +
			"             └─ Limit(1)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     └─ columns: [i]\n" +
			"",
	},
	{
		Query: `SELECT * FROM (SELECT a.pk, b.i FROM one_pk a JOIN mytable b ORDER BY a.pk ASC, b.i ASC LIMIT 1) sq WHERE i != 0`,
		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: sq\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (9,10)\n" +
			" ├─ tableId: 3\n" +
			" └─ Filter\n" +
			"     ├─ NOT\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ b.i:1!null\n" +
			"     │       └─ 0 (bigint)\n" +
			"     └─ Limit(1)\n" +
			"         └─ Project\n" +
			"             ├─ columns: [a.pk:1!null, b.i:0!null]\n" +
			"             └─ Sort(a.pk:1!null ASC nullsFirst, b.i:0!null ASC nullsFirst)\n" +
			"                 └─ CrossJoin\n" +
			"                     ├─ TableAlias(b)\n" +
			"                     │   └─ Table\n" +
			"                     │       ├─ name: mytable\n" +
			"                     │       ├─ columns: [i]\n" +
			"                     │       ├─ colSet: (7,8)\n" +
			"                     │       └─ tableId: 2\n" +
			"                     └─ TableAlias(a)\n" +
			"                         └─ Table\n" +
			"                             ├─ name: one_pk\n" +
			"                             ├─ columns: [pk]\n" +
			"                             ├─ colSet: (1-6)\n" +
			"                             └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: sq\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Filter\n" +
			"     ├─ (NOT((b.i = 0)))\n" +
			"     └─ Limit(1)\n" +
			"         └─ Project\n" +
			"             ├─ columns: [a.pk, b.i]\n" +
			"             └─ Sort(a.pk ASC, b.i ASC)\n" +
			"                 └─ CrossJoin\n" +
			"                     ├─ TableAlias(b)\n" +
			"                     │   └─ Table\n" +
			"                     │       ├─ name: mytable\n" +
			"                     │       └─ columns: [i]\n" +
			"                     └─ TableAlias(a)\n" +
			"                         └─ Table\n" +
			"                             ├─ name: one_pk\n" +
			"                             └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: sq\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Filter\n" +
			"     ├─ (NOT((b.i = 0)))\n" +
			"     └─ Limit(1)\n" +
			"         └─ Project\n" +
			"             ├─ columns: [a.pk, b.i]\n" +
			"             └─ Sort(a.pk ASC, b.i ASC)\n" +
			"                 └─ CrossJoin\n" +
			"                     ├─ TableAlias(b)\n" +
			"                     │   └─ Table\n" +
			"                     │       ├─ name: mytable\n" +
			"                     │       └─ columns: [i]\n" +
			"                     └─ TableAlias(a)\n" +
			"                         └─ Table\n" +
			"                             ├─ name: one_pk\n" +
			"                             └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT * FROM (SELECT a.pk, b.i FROM one_pk a JOIN mytable b ORDER BY a.pk DESC, b.i DESC LIMIT 1) sq WHERE i != 0`,
		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: sq\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (9,10)\n" +
			" ├─ tableId: 3\n" +
			" └─ Filter\n" +
			"     ├─ NOT\n" +
			"     │   └─ Eq\n" +
			"     │       ├─ b.i:1!null\n" +
			"     │       └─ 0 (bigint)\n" +
			"     └─ Limit(1)\n" +
			"         └─ Project\n" +
			"             ├─ columns: [a.pk:1!null, b.i:0!null]\n" +
			"             └─ Sort(a.pk:1!null DESC nullsFirst, b.i:0!null DESC nullsFirst)\n" +
			"                 └─ CrossJoin\n" +
			"                     ├─ TableAlias(b)\n" +
			"                     │   └─ Table\n" +
			"                     │       ├─ name: mytable\n" +
			"                     │       ├─ columns: [i]\n" +
			"                     │       ├─ colSet: (7,8)\n" +
			"                     │       └─ tableId: 2\n" +
			"                     └─ TableAlias(a)\n" +
			"                         └─ Table\n" +
			"                             ├─ name: one_pk\n" +
			"                             ├─ columns: [pk]\n" +
			"                             ├─ colSet: (1-6)\n" +
			"                             └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: sq\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Filter\n" +
			"     ├─ (NOT((b.i = 0)))\n" +
			"     └─ Limit(1)\n" +
			"         └─ Project\n" +
			"             ├─ columns: [a.pk, b.i]\n" +
			"             └─ Sort(a.pk DESC, b.i DESC)\n" +
			"                 └─ CrossJoin\n" +
			"                     ├─ TableAlias(b)\n" +
			"                     │   └─ Table\n" +
			"                     │       ├─ name: mytable\n" +
			"                     │       └─ columns: [i]\n" +
			"                     └─ TableAlias(a)\n" +
			"                         └─ Table\n" +
			"                             ├─ name: one_pk\n" +
			"                             └─ columns: [pk]\n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: sq\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Filter\n" +
			"     ├─ (NOT((b.i = 0)))\n" +
			"     └─ Limit(1)\n" +
			"         └─ Project\n" +
			"             ├─ columns: [a.pk, b.i]\n" +
			"             └─ Sort(a.pk DESC, b.i DESC)\n" +
			"                 └─ CrossJoin\n" +
			"                     ├─ TableAlias(b)\n" +
			"                     │   └─ Table\n" +
			"                     │       ├─ name: mytable\n" +
			"                     │       └─ columns: [i]\n" +
			"                     └─ TableAlias(a)\n" +
			"                         └─ Table\n" +
			"                             ├─ name: one_pk\n" +
			"                             └─ columns: [pk]\n" +
			"",
	},
	{
		Query: `SELECT * FROM (SELECT pk FROM one_pk WHERE pk < 2 LIMIT 1) a JOIN (SELECT i FROM mytable WHERE i > 1 LIMIT 1) b WHERE pk >= 2;`,
		ExpectedPlan: "CrossHashJoin\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: a\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   ├─ colSet: (7)\n" +
			" │   ├─ tableId: 2\n" +
			" │   └─ Filter\n" +
			" │       ├─ GreaterThanOrEqual\n" +
			" │       │   ├─ one_pk.pk:0!null\n" +
			" │       │   └─ 2 (smallint)\n" +
			" │       └─ Limit(1)\n" +
			" │           └─ IndexedTableAccess(one_pk)\n" +
			" │               ├─ index: [one_pk.pk]\n" +
			" │               ├─ static: [{(NULL, 2)}]\n" +
			" │               ├─ colSet: (1-6)\n" +
			" │               ├─ tableId: 1\n" +
			" │               └─ Table\n" +
			" │                   ├─ name: one_pk\n" +
			" │                   └─ columns: [pk]\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: TUPLE()\n" +
			"     ├─ right-key: TUPLE()\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: b\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (10)\n" +
			"         ├─ tableId: 4\n" +
			"         └─ Limit(1)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ static: [{(1, ∞)}]\n" +
			"                 ├─ colSet: (8,9)\n" +
			"                 ├─ tableId: 3\n" +
			"                 └─ Table\n" +
			"                     ├─ name: mytable\n" +
			"                     └─ columns: [i]\n" +
			"",
		ExpectedEstimates: "CrossHashJoin (estimated cost=402.250 rows=125)\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: a\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Filter\n" +
			" │       ├─ (one_pk.pk >= 2)\n" +
			" │       └─ Limit(1)\n" +
			" │           └─ IndexedTableAccess(one_pk)\n" +
			" │               ├─ index: [one_pk.pk]\n" +
			" │               ├─ filters: [{(NULL, 2)}]\n" +
			" │               └─ columns: [pk]\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: ()\n" +
			"     ├─ right-key: ()\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: b\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Limit(1)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ filters: [{(1, ∞)}]\n" +
			"                 └─ columns: [i]\n" +
			"",
		ExpectedAnalysis: "CrossHashJoin (estimated cost=402.250 rows=125) (actual rows=0 loops=1)\n" +
			" ├─ SubqueryAlias\n" +
			" │   ├─ name: a\n" +
			" │   ├─ outerVisibility: false\n" +
			" │   ├─ isLateral: false\n" +
			" │   ├─ cacheable: true\n" +
			" │   └─ Filter\n" +
			" │       ├─ (one_pk.pk >= 2)\n" +
			" │       └─ Limit(1)\n" +
			" │           └─ IndexedTableAccess(one_pk)\n" +
			" │               ├─ index: [one_pk.pk]\n" +
			" │               ├─ filters: [{(NULL, 2)}]\n" +
			" │               └─ columns: [pk]\n" +
			" └─ HashLookup\n" +
			"     ├─ left-key: ()\n" +
			"     ├─ right-key: ()\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: b\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Limit(1)\n" +
			"             └─ IndexedTableAccess(mytable)\n" +
			"                 ├─ index: [mytable.i]\n" +
			"                 ├─ filters: [{(1, ∞)}]\n" +
			"                 └─ columns: [i]\n" +
			"",
	},
	{
		Query: `
SELECT COUNT(*)
FROM keyless
WHERE keyless.c0 IN (
    WITH RECURSIVE cte(depth, i, j) AS (
        SELECT 0, T1.c0, T1.c1
        FROM keyless T1
        WHERE T1.c0 = 0

        UNION ALL

        SELECT cte.depth + 1, cte.i, T2.c1 + 1
        FROM cte, keyless T2
        WHERE cte.depth = T2.c0
    )

    SELECT U0.c0
    FROM keyless U0, cte
    WHERE cte.j = keyless.c0
);`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(1):0!null as COUNT(*)]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: COUNT(1 (bigint))\n" +
			"     ├─ group: \n" +
			"     └─ Filter\n" +
			"         ├─ InSubquery\n" +
			"         │   ├─ left: keyless.c0:0\n" +
			"         │   └─ right: Subquery\n" +
			"         │       ├─ cacheable: false\n" +
			"         │       ├─ alias-string: with recursive cte (depth, i, j) as (select 0, T1.c0, T1.c1 from keyless as T1 where T1.c0 = 0 union all select cte.depth + 1, cte.i, T2.c1 + 1 from cte, keyless as T2 where cte.depth = T2.c0) select U0.c0 from keyless as U0, cte where cte.j = keyless.c0\n" +
			"         │       └─ Project\n" +
			"         │           ├─ columns: [u0.c0:5]\n" +
			"         │           └─ Filter\n" +
			"         │               ├─ Eq\n" +
			"         │               │   ├─ cte.j:4\n" +
			"         │               │   └─ keyless.c0:0\n" +
			"         │               └─ CrossHashJoin\n" +
			"         │                   ├─ SubqueryAlias\n" +
			"         │                   │   ├─ name: cte\n" +
			"         │                   │   ├─ outerVisibility: true\n" +
			"         │                   │   ├─ isLateral: false\n" +
			"         │                   │   ├─ cacheable: true\n" +
			"         │                   │   ├─ colSet: (6-8)\n" +
			"         │                   │   ├─ tableId: 3\n" +
			"         │                   │   └─ RecursiveCTE\n" +
			"         │                   │       └─ Union all\n" +
			"         │                   │           ├─ Project\n" +
			"         │                   │           │   ├─ columns: [0 (tinyint), t1.c0:2, t1.c1:3]\n" +
			"         │                   │           │   └─ Filter\n" +
			"         │                   │           │       ├─ Eq\n" +
			"         │                   │           │       │   ├─ t1.c0:2\n" +
			"         │                   │           │       │   └─ 0 (bigint)\n" +
			"         │                   │           │       └─ TableAlias(t1)\n" +
			"         │                   │           │           └─ Table\n" +
			"         │                   │           │               ├─ name: keyless\n" +
			"         │                   │           │               ├─ columns: [c0 c1]\n" +
			"         │                   │           │               ├─ colSet: (3,4)\n" +
			"         │                   │           │               └─ tableId: 2\n" +
			"         │                   │           └─ Project\n" +
			"         │                   │               ├─ columns: [(cte.depth:2!null + 1 (tinyint)) as cte.depth + 1, cte.i:3, (t2.c1:6 + 1 (tinyint)) as T2.c1 + 1]\n" +
			"         │                   │               └─ HashJoin\n" +
			"         │                   │                   ├─ Eq\n" +
			"         │                   │                   │   ├─ cte.depth:2!null\n" +
			"         │                   │                   │   └─ t2.c0:5\n" +
			"         │                   │                   ├─ RecursiveTable(cte)\n" +
			"         │                   │                   └─ HashLookup\n" +
			"         │                   │                       ├─ left-key: TUPLE(cte.depth:2!null)\n" +
			"         │                   │                       ├─ right-key: TUPLE(t2.c0:2)\n" +
			"         │                   │                       └─ TableAlias(t2)\n" +
			"         │                   │                           └─ Table\n" +
			"         │                   │                               ├─ name: keyless\n" +
			"         │                   │                               ├─ columns: [c0 c1]\n" +
			"         │                   │                               ├─ colSet: (9,10)\n" +
			"         │                   │                               └─ tableId: 5\n" +
			"         │                   └─ HashLookup\n" +
			"         │                       ├─ left-key: TUPLE()\n" +
			"         │                       ├─ right-key: TUPLE()\n" +
			"         │                       └─ TableAlias(u0)\n" +
			"         │                           └─ Table\n" +
			"         │                               ├─ name: keyless\n" +
			"         │                               ├─ columns: [c0]\n" +
			"         │                               ├─ colSet: (11,12)\n" +
			"         │                               └─ tableId: 7\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: keyless\n" +
			"                 └─ columns: [c0 c1]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(1) as COUNT(*)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1))\n" +
			"     ├─ Grouping()\n" +
			"     └─ Filter\n" +
			"         ├─ InSubquery\n" +
			"         │   ├─ left: keyless.c0\n" +
			"         │   └─ right: Subquery\n" +
			"         │       ├─ cacheable: false\n" +
			"         │       └─ Project\n" +
			"         │           ├─ columns: [u0.c0]\n" +
			"         │           └─ Filter\n" +
			"         │               ├─ (cte.j = keyless.c0)\n" +
			"         │               └─ CrossHashJoin\n" +
			"         │                   ├─ SubqueryAlias\n" +
			"         │                   │   ├─ name: cte\n" +
			"         │                   │   ├─ outerVisibility: true\n" +
			"         │                   │   ├─ isLateral: false\n" +
			"         │                   │   ├─ cacheable: true\n" +
			"         │                   │   └─ RecursiveCTE\n" +
			"         │                   │       └─ Union all\n" +
			"         │                   │           ├─ Project\n" +
			"         │                   │           │   ├─ columns: [0, t1.c0, t1.c1]\n" +
			"         │                   │           │   └─ Filter\n" +
			"         │                   │           │       ├─ (t1.c0 = 0)\n" +
			"         │                   │           │       └─ TableAlias(t1)\n" +
			"         │                   │           │           └─ Table\n" +
			"         │                   │           │               ├─ name: keyless\n" +
			"         │                   │           │               └─ columns: [c0 c1]\n" +
			"         │                   │           └─ Project\n" +
			"         │                   │               ├─ columns: [(cte.depth + 1) as cte.depth + 1, cte.i, (t2.c1 + 1) as T2.c1 + 1]\n" +
			"         │                   │               └─ HashJoin\n" +
			"         │                   │                   ├─ (cte.depth = t2.c0)\n" +
			"         │                   │                   ├─ RecursiveTable(cte)\n" +
			"         │                   │                   └─ HashLookup\n" +
			"         │                   │                       ├─ left-key: (cte.depth)\n" +
			"         │                   │                       ├─ right-key: (t2.c0)\n" +
			"         │                   │                       └─ TableAlias(t2)\n" +
			"         │                   │                           └─ Table\n" +
			"         │                   │                               ├─ name: keyless\n" +
			"         │                   │                               └─ columns: [c0 c1]\n" +
			"         │                   └─ HashLookup\n" +
			"         │                       ├─ left-key: ()\n" +
			"         │                       ├─ right-key: ()\n" +
			"         │                       └─ TableAlias(u0)\n" +
			"         │                           └─ Table\n" +
			"         │                               ├─ name: keyless\n" +
			"         │                               └─ columns: [c0]\n" +
			"         └─ Table\n" +
			"             └─ name: keyless\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(1) as COUNT(*)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1))\n" +
			"     ├─ Grouping()\n" +
			"     └─ Filter\n" +
			"         ├─ InSubquery\n" +
			"         │   ├─ left: keyless.c0\n" +
			"         │   └─ right: Subquery\n" +
			"         │       ├─ cacheable: false\n" +
			"         │       └─ Project\n" +
			"         │           ├─ columns: [u0.c0]\n" +
			"         │           └─ Filter\n" +
			"         │               ├─ (cte.j = keyless.c0)\n" +
			"         │               └─ CrossHashJoin\n" +
			"         │                   ├─ SubqueryAlias\n" +
			"         │                   │   ├─ name: cte\n" +
			"         │                   │   ├─ outerVisibility: true\n" +
			"         │                   │   ├─ isLateral: false\n" +
			"         │                   │   ├─ cacheable: true\n" +
			"         │                   │   └─ RecursiveCTE\n" +
			"         │                   │       └─ Union all\n" +
			"         │                   │           ├─ Project\n" +
			"         │                   │           │   ├─ columns: [0, t1.c0, t1.c1]\n" +
			"         │                   │           │   └─ Filter\n" +
			"         │                   │           │       ├─ (t1.c0 = 0)\n" +
			"         │                   │           │       └─ TableAlias(t1)\n" +
			"         │                   │           │           └─ Table\n" +
			"         │                   │           │               ├─ name: keyless\n" +
			"         │                   │           │               └─ columns: [c0 c1]\n" +
			"         │                   │           └─ Project\n" +
			"         │                   │               ├─ columns: [(cte.depth + 1) as cte.depth + 1, cte.i, (t2.c1 + 1) as T2.c1 + 1]\n" +
			"         │                   │               └─ HashJoin\n" +
			"         │                   │                   ├─ (cte.depth = t2.c0)\n" +
			"         │                   │                   ├─ RecursiveTable(cte)\n" +
			"         │                   │                   └─ HashLookup\n" +
			"         │                   │                       ├─ left-key: (cte.depth)\n" +
			"         │                   │                       ├─ right-key: (t2.c0)\n" +
			"         │                   │                       └─ TableAlias(t2)\n" +
			"         │                   │                           └─ Table\n" +
			"         │                   │                               ├─ name: keyless\n" +
			"         │                   │                               └─ columns: [c0 c1]\n" +
			"         │                   └─ HashLookup\n" +
			"         │                       ├─ left-key: ()\n" +
			"         │                       ├─ right-key: ()\n" +
			"         │                       └─ TableAlias(u0)\n" +
			"         │                           └─ Table\n" +
			"         │                               ├─ name: keyless\n" +
			"         │                               └─ columns: [c0]\n" +
			"         └─ Table\n" +
			"             └─ name: keyless\n" +
			"",
	},
	{
		Query: `
SELECT COUNT(*)
FROM keyless
WHERE keyless.c0 IN (
    WITH RECURSIVE cte(depth, i, j) AS (
        SELECT 0, T1.c0, T1.c1
        FROM keyless T1
        WHERE T1.c0 = 0

        UNION ALL

        SELECT cte.depth + 1, cte.i, T2.c1 + 1
        FROM cte, keyless T2
        WHERE cte.depth = T2.c0
    )

    SELECT U0.c0
    FROM cte, keyless U0
    WHERE cte.j = keyless.c0
);`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [count(1):0!null as COUNT(*)]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: COUNT(1 (bigint))\n" +
			"     ├─ group: \n" +
			"     └─ Filter\n" +
			"         ├─ InSubquery\n" +
			"         │   ├─ left: keyless.c0:0\n" +
			"         │   └─ right: Subquery\n" +
			"         │       ├─ cacheable: false\n" +
			"         │       ├─ alias-string: with recursive cte (depth, i, j) as (select 0, T1.c0, T1.c1 from keyless as T1 where T1.c0 = 0 union all select cte.depth + 1, cte.i, T2.c1 + 1 from cte, keyless as T2 where cte.depth = T2.c0) select U0.c0 from cte, keyless as U0 where cte.j = keyless.c0\n" +
			"         │       └─ Project\n" +
			"         │           ├─ columns: [u0.c0:5]\n" +
			"         │           └─ Filter\n" +
			"         │               ├─ Eq\n" +
			"         │               │   ├─ cte.j:4\n" +
			"         │               │   └─ keyless.c0:0\n" +
			"         │               └─ CrossHashJoin\n" +
			"         │                   ├─ SubqueryAlias\n" +
			"         │                   │   ├─ name: cte\n" +
			"         │                   │   ├─ outerVisibility: true\n" +
			"         │                   │   ├─ isLateral: false\n" +
			"         │                   │   ├─ cacheable: true\n" +
			"         │                   │   ├─ colSet: (6-8)\n" +
			"         │                   │   ├─ tableId: 3\n" +
			"         │                   │   └─ RecursiveCTE\n" +
			"         │                   │       └─ Union all\n" +
			"         │                   │           ├─ Project\n" +
			"         │                   │           │   ├─ columns: [0 (tinyint), t1.c0:2, t1.c1:3]\n" +
			"         │                   │           │   └─ Filter\n" +
			"         │                   │           │       ├─ Eq\n" +
			"         │                   │           │       │   ├─ t1.c0:2\n" +
			"         │                   │           │       │   └─ 0 (bigint)\n" +
			"         │                   │           │       └─ TableAlias(t1)\n" +
			"         │                   │           │           └─ Table\n" +
			"         │                   │           │               ├─ name: keyless\n" +
			"         │                   │           │               ├─ columns: [c0 c1]\n" +
			"         │                   │           │               ├─ colSet: (3,4)\n" +
			"         │                   │           │               └─ tableId: 2\n" +
			"         │                   │           └─ Project\n" +
			"         │                   │               ├─ columns: [(cte.depth:2!null + 1 (tinyint)) as cte.depth + 1, cte.i:3, (t2.c1:6 + 1 (tinyint)) as T2.c1 + 1]\n" +
			"         │                   │               └─ HashJoin\n" +
			"         │                   │                   ├─ Eq\n" +
			"         │                   │                   │   ├─ cte.depth:2!null\n" +
			"         │                   │                   │   └─ t2.c0:5\n" +
			"         │                   │                   ├─ RecursiveTable(cte)\n" +
			"         │                   │                   └─ HashLookup\n" +
			"         │                   │                       ├─ left-key: TUPLE(cte.depth:2!null)\n" +
			"         │                   │                       ├─ right-key: TUPLE(t2.c0:2)\n" +
			"         │                   │                       └─ TableAlias(t2)\n" +
			"         │                   │                           └─ Table\n" +
			"         │                   │                               ├─ name: keyless\n" +
			"         │                   │                               ├─ columns: [c0 c1]\n" +
			"         │                   │                               ├─ colSet: (9,10)\n" +
			"         │                   │                               └─ tableId: 5\n" +
			"         │                   └─ HashLookup\n" +
			"         │                       ├─ left-key: TUPLE()\n" +
			"         │                       ├─ right-key: TUPLE()\n" +
			"         │                       └─ TableAlias(u0)\n" +
			"         │                           └─ Table\n" +
			"         │                               ├─ name: keyless\n" +
			"         │                               ├─ columns: [c0]\n" +
			"         │                               ├─ colSet: (11,12)\n" +
			"         │                               └─ tableId: 7\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: keyless\n" +
			"                 └─ columns: [c0 c1]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [count(1) as COUNT(*)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1))\n" +
			"     ├─ Grouping()\n" +
			"     └─ Filter\n" +
			"         ├─ InSubquery\n" +
			"         │   ├─ left: keyless.c0\n" +
			"         │   └─ right: Subquery\n" +
			"         │       ├─ cacheable: false\n" +
			"         │       └─ Project\n" +
			"         │           ├─ columns: [u0.c0]\n" +
			"         │           └─ Filter\n" +
			"         │               ├─ (cte.j = keyless.c0)\n" +
			"         │               └─ CrossHashJoin\n" +
			"         │                   ├─ SubqueryAlias\n" +
			"         │                   │   ├─ name: cte\n" +
			"         │                   │   ├─ outerVisibility: true\n" +
			"         │                   │   ├─ isLateral: false\n" +
			"         │                   │   ├─ cacheable: true\n" +
			"         │                   │   └─ RecursiveCTE\n" +
			"         │                   │       └─ Union all\n" +
			"         │                   │           ├─ Project\n" +
			"         │                   │           │   ├─ columns: [0, t1.c0, t1.c1]\n" +
			"         │                   │           │   └─ Filter\n" +
			"         │                   │           │       ├─ (t1.c0 = 0)\n" +
			"         │                   │           │       └─ TableAlias(t1)\n" +
			"         │                   │           │           └─ Table\n" +
			"         │                   │           │               ├─ name: keyless\n" +
			"         │                   │           │               └─ columns: [c0 c1]\n" +
			"         │                   │           └─ Project\n" +
			"         │                   │               ├─ columns: [(cte.depth + 1) as cte.depth + 1, cte.i, (t2.c1 + 1) as T2.c1 + 1]\n" +
			"         │                   │               └─ HashJoin\n" +
			"         │                   │                   ├─ (cte.depth = t2.c0)\n" +
			"         │                   │                   ├─ RecursiveTable(cte)\n" +
			"         │                   │                   └─ HashLookup\n" +
			"         │                   │                       ├─ left-key: (cte.depth)\n" +
			"         │                   │                       ├─ right-key: (t2.c0)\n" +
			"         │                   │                       └─ TableAlias(t2)\n" +
			"         │                   │                           └─ Table\n" +
			"         │                   │                               ├─ name: keyless\n" +
			"         │                   │                               └─ columns: [c0 c1]\n" +
			"         │                   └─ HashLookup\n" +
			"         │                       ├─ left-key: ()\n" +
			"         │                       ├─ right-key: ()\n" +
			"         │                       └─ TableAlias(u0)\n" +
			"         │                           └─ Table\n" +
			"         │                               ├─ name: keyless\n" +
			"         │                               └─ columns: [c0]\n" +
			"         └─ Table\n" +
			"             └─ name: keyless\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [count(1) as COUNT(*)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(COUNT(1))\n" +
			"     ├─ Grouping()\n" +
			"     └─ Filter\n" +
			"         ├─ InSubquery\n" +
			"         │   ├─ left: keyless.c0\n" +
			"         │   └─ right: Subquery\n" +
			"         │       ├─ cacheable: false\n" +
			"         │       └─ Project\n" +
			"         │           ├─ columns: [u0.c0]\n" +
			"         │           └─ Filter\n" +
			"         │               ├─ (cte.j = keyless.c0)\n" +
			"         │               └─ CrossHashJoin\n" +
			"         │                   ├─ SubqueryAlias\n" +
			"         │                   │   ├─ name: cte\n" +
			"         │                   │   ├─ outerVisibility: true\n" +
			"         │                   │   ├─ isLateral: false\n" +
			"         │                   │   ├─ cacheable: true\n" +
			"         │                   │   └─ RecursiveCTE\n" +
			"         │                   │       └─ Union all\n" +
			"         │                   │           ├─ Project\n" +
			"         │                   │           │   ├─ columns: [0, t1.c0, t1.c1]\n" +
			"         │                   │           │   └─ Filter\n" +
			"         │                   │           │       ├─ (t1.c0 = 0)\n" +
			"         │                   │           │       └─ TableAlias(t1)\n" +
			"         │                   │           │           └─ Table\n" +
			"         │                   │           │               ├─ name: keyless\n" +
			"         │                   │           │               └─ columns: [c0 c1]\n" +
			"         │                   │           └─ Project\n" +
			"         │                   │               ├─ columns: [(cte.depth + 1) as cte.depth + 1, cte.i, (t2.c1 + 1) as T2.c1 + 1]\n" +
			"         │                   │               └─ HashJoin\n" +
			"         │                   │                   ├─ (cte.depth = t2.c0)\n" +
			"         │                   │                   ├─ RecursiveTable(cte)\n" +
			"         │                   │                   └─ HashLookup\n" +
			"         │                   │                       ├─ left-key: (cte.depth)\n" +
			"         │                   │                       ├─ right-key: (t2.c0)\n" +
			"         │                   │                       └─ TableAlias(t2)\n" +
			"         │                   │                           └─ Table\n" +
			"         │                   │                               ├─ name: keyless\n" +
			"         │                   │                               └─ columns: [c0 c1]\n" +
			"         │                   └─ HashLookup\n" +
			"         │                       ├─ left-key: ()\n" +
			"         │                       ├─ right-key: ()\n" +
			"         │                       └─ TableAlias(u0)\n" +
			"         │                           └─ Table\n" +
			"         │                               ├─ name: keyless\n" +
			"         │                               └─ columns: [c0]\n" +
			"         └─ Table\n" +
			"             └─ name: keyless\n" +
			"",
	},
	{
		Query: `SELECT s,i FROM mytable as a order by i;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [a.s:1!null, a.i:0!null]\n" +
			" └─ TableAlias(a)\n" +
			"     └─ IndexedTableAccess(mytable)\n" +
			"         ├─ index: [mytable.i]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: mytable\n" +
			"             └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [a.s, a.i]\n" +
			" └─ TableAlias(a)\n" +
			"     └─ IndexedTableAccess(mytable)\n" +
			"         ├─ index: [mytable.i]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [a.s, a.i]\n" +
			" └─ TableAlias(a)\n" +
			"     └─ IndexedTableAccess(mytable)\n" +
			"         ├─ index: [mytable.i]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [i s]\n" +
			"",
	},
	{
		Query: `SELECT s,i FROM mytable order by i DESC;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [mytable.s:1!null, mytable.i:0!null]\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i]\n" +
			"     ├─ static: [{[NULL, ∞)}]\n" +
			"     ├─ reverse: true\n" +
			"     ├─ colSet: (1,2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [mytable.s, mytable.i]\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     ├─ columns: [i s]\n" +
			"     └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [mytable.s, mytable.i]\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.i]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     ├─ columns: [i s]\n" +
			"     └─ reverse: true\n" +
			"",
	},
	{
		Query: `SELECT pk1, pk2 FROM two_pk order by pk1 asc, pk2 asc;`,
		ExpectedPlan: "IndexedTableAccess(two_pk)\n" +
			" ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			" ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" ├─ colSet: (1-7)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: two_pk\n" +
			"     └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(two_pk)\n" +
			" ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			" ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(two_pk)\n" +
			" ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			" ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk1, pk2 FROM two_pk order by pk1 asc, pk2 desc;`,
		ExpectedPlan: "Sort(two_pk.pk1:0!null ASC nullsFirst, two_pk.pk2:1!null DESC nullsFirst)\n" +
			" └─ ProcessTable\n" +
			"     └─ Table\n" +
			"         ├─ name: two_pk\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Sort(two_pk.pk1 ASC, two_pk.pk2 DESC)\n" +
			" └─ Table\n" +
			"     ├─ name: two_pk\n" +
			"     └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Sort(two_pk.pk1 ASC, two_pk.pk2 DESC)\n" +
			" └─ Table\n" +
			"     ├─ name: two_pk\n" +
			"     └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk1, pk2 FROM two_pk order by pk1 desc, pk2 desc;`,
		ExpectedPlan: "IndexedTableAccess(two_pk)\n" +
			" ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			" ├─ static: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" ├─ reverse: true\n" +
			" ├─ colSet: (1-7)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: two_pk\n" +
			"     └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(two_pk)\n" +
			" ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			" ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" ├─ columns: [pk1 pk2]\n" +
			" └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(two_pk)\n" +
			" ├─ index: [two_pk.pk1,two_pk.pk2]\n" +
			" ├─ filters: [{[NULL, ∞), [NULL, ∞)}]\n" +
			" ├─ columns: [pk1 pk2]\n" +
			" └─ reverse: true\n" +
			"",
	},
	{
		Query: `SELECT pk1, pk2 FROM two_pk group by pk1, pk2 order by pk1, pk2;`,
		ExpectedPlan: "Sort(two_pk.pk1:0!null ASC nullsFirst, two_pk.pk2:1!null ASC nullsFirst)\n" +
			" └─ GroupBy\n" +
			"     ├─ select: two_pk.pk1:0!null, two_pk.pk2:1!null\n" +
			"     ├─ group: two_pk.pk1:0!null, two_pk.pk2:1!null\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: two_pk\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Sort(two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(two_pk.pk1, two_pk.pk2)\n" +
			"     ├─ Grouping(two_pk.pk1, two_pk.pk2)\n" +
			"     └─ Table\n" +
			"         ├─ name: two_pk\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Sort(two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(two_pk.pk1, two_pk.pk2)\n" +
			"     ├─ Grouping(two_pk.pk1, two_pk.pk2)\n" +
			"     └─ Table\n" +
			"         ├─ name: two_pk\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `SELECT pk1, pk2 FROM two_pk group by pk1, pk2 order by pk1 desc, pk2 desc;`,
		ExpectedPlan: "Sort(two_pk.pk1:0!null DESC nullsFirst, two_pk.pk2:1!null DESC nullsFirst)\n" +
			" └─ GroupBy\n" +
			"     ├─ select: two_pk.pk1:0!null, two_pk.pk2:1!null\n" +
			"     ├─ group: two_pk.pk1:0!null, two_pk.pk2:1!null\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: two_pk\n" +
			"             └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedEstimates: "Sort(two_pk.pk1 DESC, two_pk.pk2 DESC)\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(two_pk.pk1, two_pk.pk2)\n" +
			"     ├─ Grouping(two_pk.pk1, two_pk.pk2)\n" +
			"     └─ Table\n" +
			"         ├─ name: two_pk\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
		ExpectedAnalysis: "Sort(two_pk.pk1 DESC, two_pk.pk2 DESC)\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(two_pk.pk1, two_pk.pk2)\n" +
			"     ├─ Grouping(two_pk.pk1, two_pk.pk2)\n" +
			"     └─ Table\n" +
			"         ├─ name: two_pk\n" +
			"         └─ columns: [pk1 pk2]\n" +
			"",
	},
	{
		Query: `select pk1, pk2, row_number() over (partition by pk1 order by c1 desc) from two_pk order by 1,2;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [two_pk.pk1:1!null, two_pk.pk2:2!null, row_number() over ( partition by two_pk.pk1 order by two_pk.c1 desc):0!null as row_number() over (partition by pk1 order by c1 desc)]\n" +
			" └─ Sort(two_pk.pk1:1!null ASC nullsFirst, two_pk.pk2:2!null ASC nullsFirst)\n" +
			"     └─ Window\n" +
			"         ├─ row_number() over ( partition by two_pk.pk1 order by two_pk.c1 DESC)\n" +
			"         ├─ two_pk.pk1:0!null\n" +
			"         ├─ two_pk.pk2:1!null\n" +
			"         └─ ProcessTable\n" +
			"             └─ Table\n" +
			"                 ├─ name: two_pk\n" +
			"                 └─ columns: [pk1 pk2 c1]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [two_pk.pk1, two_pk.pk2, row_number() over ( partition by two_pk.pk1 order by two_pk.c1 desc) as row_number() over (partition by pk1 order by c1 desc)]\n" +
			" └─ Sort(two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			"     └─ Window(row_number() over ( partition by two_pk.pk1 order by two_pk.c1 DESC), two_pk.pk1, two_pk.pk2)\n" +
			"         └─ Table\n" +
			"             ├─ name: two_pk\n" +
			"             └─ columns: [pk1 pk2 c1]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [two_pk.pk1, two_pk.pk2, row_number() over ( partition by two_pk.pk1 order by two_pk.c1 desc) as row_number() over (partition by pk1 order by c1 desc)]\n" +
			" └─ Sort(two_pk.pk1 ASC, two_pk.pk2 ASC)\n" +
			"     └─ Window(row_number() over ( partition by two_pk.pk1 order by two_pk.c1 DESC), two_pk.pk1, two_pk.pk2)\n" +
			"         └─ Table\n" +
			"             ├─ name: two_pk\n" +
			"             └─ columns: [pk1 pk2 c1]\n" +
			"",
	},
	{
		Query: `SELECT * FROM one_pk ORDER BY pk LIMIT 0, 10;`,
		ExpectedPlan: "Limit(10)\n" +
			" └─ IndexedTableAccess(one_pk)\n" +
			"     ├─ index: [one_pk.pk]\n" +
			"     ├─ static: [{[NULL, ∞)}]\n" +
			"     ├─ colSet: (1-6)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: one_pk\n" +
			"         └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedEstimates: "Limit(10)\n" +
			" └─ IndexedTableAccess(one_pk)\n" +
			"     ├─ index: [one_pk.pk]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedAnalysis: "Limit(10)\n" +
			" └─ IndexedTableAccess(one_pk)\n" +
			"     ├─ index: [one_pk.pk]\n" +
			"     ├─ filters: [{[NULL, ∞)}]\n" +
			"     └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
	},
	{
		Query: `SELECT * FROM one_pk ORDER BY pk LIMIT 5, 10;`,
		ExpectedPlan: "Limit(10)\n" +
			" └─ Offset(5)\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedEstimates: "Limit(10)\n" +
			" └─ Offset(5)\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
		ExpectedAnalysis: "Limit(10)\n" +
			" └─ Offset(5)\n" +
			"     └─ IndexedTableAccess(one_pk)\n" +
			"         ├─ index: [one_pk.pk]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [pk c1 c2 c3 c4 c5]\n" +
			"",
	},
	{
		Query: `select x, u from xy, lateral (select * from uv where y = u) uv;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [xy.x:0!null, uv.u:2!null]\n" +
			" └─ LateralCrossJoin\n" +
			"     ├─ ProcessTable\n" +
			"     │   └─ Table\n" +
			"     │       ├─ name: xy\n" +
			"     │       └─ columns: [x y]\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: uv\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: true\n" +
			"         ├─ cacheable: false\n" +
			"         ├─ colSet: (5,6)\n" +
			"         ├─ tableId: 3\n" +
			"         └─ Filter\n" +
			"             ├─ Eq\n" +
			"             │   ├─ xy.y:1\n" +
			"             │   └─ uv.u:2!null\n" +
			"             └─ Table\n" +
			"                 ├─ name: uv\n" +
			"                 ├─ columns: [u v]\n" +
			"                 ├─ colSet: (3,4)\n" +
			"                 └─ tableId: 2\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [xy.x, uv.u]\n" +
			" └─ LateralCrossJoin (estimated cost=100999.000 rows=125)\n" +
			"     ├─ Table\n" +
			"     │   └─ name: xy\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: uv\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: true\n" +
			"         ├─ cacheable: false\n" +
			"         └─ Filter\n" +
			"             ├─ (xy.y = uv.u)\n" +
			"             └─ Table\n" +
			"                 ├─ name: uv\n" +
			"                 └─ columns: [u v]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [xy.x, uv.u]\n" +
			" └─ LateralCrossJoin (estimated cost=100999.000 rows=125) (actual rows=4 loops=1)\n" +
			"     ├─ Table\n" +
			"     │   └─ name: xy\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: uv\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: true\n" +
			"         ├─ cacheable: false\n" +
			"         └─ Filter\n" +
			"             ├─ (xy.y = uv.u)\n" +
			"             └─ Table\n" +
			"                 ├─ name: uv\n" +
			"                 └─ columns: [u v]\n" +
			"",
	},
	{
		Query: `select x from xy where x > 0 and x <= 2 order by x`,
		ExpectedPlan: "IndexedTableAccess(xy)\n" +
			" ├─ index: [xy.x]\n" +
			" ├─ static: [{(0, 2]}]\n" +
			" ├─ colSet: (1,2)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: xy\n" +
			"     └─ columns: [x]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(xy)\n" +
			" ├─ index: [xy.x]\n" +
			" ├─ filters: [{(0, 2]}]\n" +
			" └─ columns: [x]\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(xy)\n" +
			" ├─ index: [xy.x]\n" +
			" ├─ filters: [{(0, 2]}]\n" +
			" └─ columns: [x]\n" +
			"",
	},
	{
		Query: `select * from xy where y < 1 or y > 2 order by y`,
		ExpectedPlan: "IndexedTableAccess(xy)\n" +
			" ├─ index: [xy.y]\n" +
			" ├─ static: [{(NULL, 1)}, {(2, ∞)}]\n" +
			" ├─ colSet: (1,2)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: xy\n" +
			"     └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(xy)\n" +
			" ├─ index: [xy.y]\n" +
			" ├─ filters: [{(NULL, 1)}, {(2, ∞)}]\n" +
			" └─ columns: [x y]\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(xy)\n" +
			" ├─ index: [xy.y]\n" +
			" ├─ filters: [{(NULL, 1)}, {(2, ∞)}]\n" +
			" └─ columns: [x y]\n" +
			"",
	},
	{
		Query: `select * from xy where y < 1 or y > 2 order by y desc`,
		ExpectedPlan: "IndexedTableAccess(xy)\n" +
			" ├─ index: [xy.y]\n" +
			" ├─ static: [{(2, ∞)}, {(NULL, 1)}]\n" +
			" ├─ reverse: true\n" +
			" ├─ colSet: (1,2)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: xy\n" +
			"     └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(xy)\n" +
			" ├─ index: [xy.y]\n" +
			" ├─ filters: [{(2, ∞)}, {(NULL, 1)}]\n" +
			" ├─ columns: [x y]\n" +
			" └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(xy)\n" +
			" ├─ index: [xy.y]\n" +
			" ├─ filters: [{(2, ∞)}, {(NULL, 1)}]\n" +
			" ├─ columns: [x y]\n" +
			" └─ reverse: true\n" +
			"",
	},
	{
		Query: `select * from xy where x in (3, 0, 1) order by x`,
		ExpectedPlan: "Filter\n" +
			" ├─ HashIn\n" +
			" │   ├─ xy.x:0!null\n" +
			" │   └─ TUPLE(3 (tinyint), 0 (tinyint), 1 (tinyint))\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.x]\n" +
			"     ├─ static: [{[0, 0]}, {[1, 1]}, {[3, 3]}]\n" +
			"     ├─ colSet: (1,2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: xy\n" +
			"         └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (xy.x HASH IN (3, 0, 1))\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.x]\n" +
			"     ├─ filters: [{[0, 0]}, {[1, 1]}, {[3, 3]}]\n" +
			"     └─ columns: [x y]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (xy.x HASH IN (3, 0, 1))\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.x]\n" +
			"     ├─ filters: [{[0, 0]}, {[1, 1]}, {[3, 3]}]\n" +
			"     └─ columns: [x y]\n" +
			"",
	},
	{
		Query: `select * from xy where x in (3, 0, 1) order by x desc`,
		ExpectedPlan: "Filter\n" +
			" ├─ HashIn\n" +
			" │   ├─ xy.x:0!null\n" +
			" │   └─ TUPLE(3 (tinyint), 0 (tinyint), 1 (tinyint))\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.x]\n" +
			"     ├─ static: [{[3, 3]}, {[1, 1]}, {[0, 0]}]\n" +
			"     ├─ reverse: true\n" +
			"     ├─ colSet: (1,2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: xy\n" +
			"         └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (xy.x HASH IN (3, 0, 1))\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.x]\n" +
			"     ├─ filters: [{[3, 3]}, {[1, 1]}, {[0, 0]}]\n" +
			"     ├─ columns: [x y]\n" +
			"     └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (xy.x HASH IN (3, 0, 1))\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.x]\n" +
			"     ├─ filters: [{[3, 3]}, {[1, 1]}, {[0, 0]}]\n" +
			"     ├─ columns: [x y]\n" +
			"     └─ reverse: true\n" +
			"",
	},
	{
		Query: `select * from xy where y in (3, 0, 1) order by y`,
		ExpectedPlan: "Filter\n" +
			" ├─ HashIn\n" +
			" │   ├─ xy.y:1\n" +
			" │   └─ TUPLE(3 (tinyint), 0 (tinyint), 1 (tinyint))\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.y]\n" +
			"     ├─ static: [{[0, 0]}, {[1, 1]}, {[3, 3]}]\n" +
			"     ├─ colSet: (1,2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: xy\n" +
			"         └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (xy.y HASH IN (3, 0, 1))\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.y]\n" +
			"     ├─ filters: [{[0, 0]}, {[1, 1]}, {[3, 3]}]\n" +
			"     └─ columns: [x y]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (xy.y HASH IN (3, 0, 1))\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.y]\n" +
			"     ├─ filters: [{[0, 0]}, {[1, 1]}, {[3, 3]}]\n" +
			"     └─ columns: [x y]\n" +
			"",
	},
	{
		Query: `select * from xy where y in (3, 0, 1) order by y desc`,
		ExpectedPlan: "Filter\n" +
			" ├─ HashIn\n" +
			" │   ├─ xy.y:1\n" +
			" │   └─ TUPLE(3 (tinyint), 0 (tinyint), 1 (tinyint))\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.y]\n" +
			"     ├─ static: [{[3, 3]}, {[1, 1]}, {[0, 0]}]\n" +
			"     ├─ reverse: true\n" +
			"     ├─ colSet: (1,2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: xy\n" +
			"         └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ (xy.y HASH IN (3, 0, 1))\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.y]\n" +
			"     ├─ filters: [{[3, 3]}, {[1, 1]}, {[0, 0]}]\n" +
			"     ├─ columns: [x y]\n" +
			"     └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ (xy.y HASH IN (3, 0, 1))\n" +
			" └─ IndexedTableAccess(xy)\n" +
			"     ├─ index: [xy.y]\n" +
			"     ├─ filters: [{[3, 3]}, {[1, 1]}, {[0, 0]}]\n" +
			"     ├─ columns: [x y]\n" +
			"     └─ reverse: true\n" +
			"",
	},
	{
		Query: `select * from xy_hasnull_idx order by y`,
		ExpectedPlan: "IndexedTableAccess(xy_hasnull_idx)\n" +
			" ├─ index: [xy_hasnull_idx.y]\n" +
			" ├─ static: [{[NULL, ∞)}]\n" +
			" ├─ colSet: (1,2)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: xy_hasnull_idx\n" +
			"     └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(xy_hasnull_idx)\n" +
			" ├─ index: [xy_hasnull_idx.y]\n" +
			" ├─ filters: [{[NULL, ∞)}]\n" +
			" └─ columns: [x y]\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(xy_hasnull_idx)\n" +
			" ├─ index: [xy_hasnull_idx.y]\n" +
			" ├─ filters: [{[NULL, ∞)}]\n" +
			" └─ columns: [x y]\n" +
			"",
	},
	{
		Query: `select * from xy_hasnull_idx order by y desc`,
		ExpectedPlan: "IndexedTableAccess(xy_hasnull_idx)\n" +
			" ├─ index: [xy_hasnull_idx.y]\n" +
			" ├─ static: [{[NULL, ∞)}]\n" +
			" ├─ reverse: true\n" +
			" ├─ colSet: (1,2)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: xy_hasnull_idx\n" +
			"     └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(xy_hasnull_idx)\n" +
			" ├─ index: [xy_hasnull_idx.y]\n" +
			" ├─ filters: [{[NULL, ∞)}]\n" +
			" ├─ columns: [x y]\n" +
			" └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(xy_hasnull_idx)\n" +
			" ├─ index: [xy_hasnull_idx.y]\n" +
			" ├─ filters: [{[NULL, ∞)}]\n" +
			" ├─ columns: [x y]\n" +
			" └─ reverse: true\n" +
			"",
	},
	{
		Query: `select * from xy_hasnull_idx where y < 1 or y > 1 order by y desc`,
		ExpectedPlan: "IndexedTableAccess(xy_hasnull_idx)\n" +
			" ├─ index: [xy_hasnull_idx.y]\n" +
			" ├─ static: [{(1, ∞)}, {(NULL, 1)}]\n" +
			" ├─ reverse: true\n" +
			" ├─ colSet: (1,2)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: xy_hasnull_idx\n" +
			"     └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(xy_hasnull_idx)\n" +
			" ├─ index: [xy_hasnull_idx.y]\n" +
			" ├─ filters: [{(1, ∞)}, {(NULL, 1)}]\n" +
			" ├─ columns: [x y]\n" +
			" └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(xy_hasnull_idx)\n" +
			" ├─ index: [xy_hasnull_idx.y]\n" +
			" ├─ filters: [{(1, ∞)}, {(NULL, 1)}]\n" +
			" ├─ columns: [x y]\n" +
			" └─ reverse: true\n" +
			"",
	},
	{
		Query: `select * from xy_hasnull_idx where y < 1 or y > 1 or y is null order by y desc`,
		ExpectedPlan: "IndexedTableAccess(xy_hasnull_idx)\n" +
			" ├─ index: [xy_hasnull_idx.y]\n" +
			" ├─ static: [{(1, ∞)}, {[NULL, 1)}]\n" +
			" ├─ reverse: true\n" +
			" ├─ colSet: (1,2)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: xy_hasnull_idx\n" +
			"     └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(xy_hasnull_idx)\n" +
			" ├─ index: [xy_hasnull_idx.y]\n" +
			" ├─ filters: [{(1, ∞)}, {[NULL, 1)}]\n" +
			" ├─ columns: [x y]\n" +
			" └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(xy_hasnull_idx)\n" +
			" ├─ index: [xy_hasnull_idx.y]\n" +
			" ├─ filters: [{(1, ∞)}, {[NULL, 1)}]\n" +
			" ├─ columns: [x y]\n" +
			" └─ reverse: true\n" +
			"",
	},
	{
		Query: `select * from xy_hasnull_idx where y in (0, 2) or y is null order by y`,
		ExpectedPlan: "Filter\n" +
			" ├─ Or\n" +
			" │   ├─ HashIn\n" +
			" │   │   ├─ xy_hasnull_idx.y:1\n" +
			" │   │   └─ TUPLE(0 (tinyint), 2 (tinyint))\n" +
			" │   └─ xy_hasnull_idx.y:1 IS NULL\n" +
			" └─ IndexedTableAccess(xy_hasnull_idx)\n" +
			"     ├─ index: [xy_hasnull_idx.y]\n" +
			"     ├─ static: [{[NULL, NULL]}, {[0, 0]}, {[2, 2]}]\n" +
			"     ├─ colSet: (1,2)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: xy_hasnull_idx\n" +
			"         └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Filter\n" +
			" ├─ ((xy_hasnull_idx.y HASH IN (0, 2)) OR xy_hasnull_idx.y IS NULL)\n" +
			" └─ IndexedTableAccess(xy_hasnull_idx)\n" +
			"     ├─ index: [xy_hasnull_idx.y]\n" +
			"     ├─ filters: [{[NULL, NULL]}, {[0, 0]}, {[2, 2]}]\n" +
			"     └─ columns: [x y]\n" +
			"",
		ExpectedAnalysis: "Filter\n" +
			" ├─ ((xy_hasnull_idx.y HASH IN (0, 2)) OR xy_hasnull_idx.y IS NULL)\n" +
			" └─ IndexedTableAccess(xy_hasnull_idx)\n" +
			"     ├─ index: [xy_hasnull_idx.y]\n" +
			"     ├─ filters: [{[NULL, NULL]}, {[0, 0]}, {[2, 2]}]\n" +
			"     └─ columns: [x y]\n" +
			"",
	},
	{
		Query: `select x as xx, y as yy from xy_hasnull_idx order by yy desc`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [xy_hasnull_idx.x:0!null as xx, xy_hasnull_idx.y:1 as yy]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy_hasnull_idx.x:0!null, xy_hasnull_idx.y:1, xy_hasnull_idx.x:0!null as xx, xy_hasnull_idx.y:1 as yy]\n" +
			"     └─ IndexedTableAccess(xy_hasnull_idx)\n" +
			"         ├─ index: [xy_hasnull_idx.y]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ reverse: true\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: xy_hasnull_idx\n" +
			"             └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [xy_hasnull_idx.x as xx, xy_hasnull_idx.y as yy]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy_hasnull_idx.x, xy_hasnull_idx.y, xy_hasnull_idx.x as xx, xy_hasnull_idx.y as yy]\n" +
			"     └─ IndexedTableAccess(xy_hasnull_idx)\n" +
			"         ├─ index: [xy_hasnull_idx.y]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         ├─ columns: [x y]\n" +
			"         └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [xy_hasnull_idx.x as xx, xy_hasnull_idx.y as yy]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy_hasnull_idx.x, xy_hasnull_idx.y, xy_hasnull_idx.x as xx, xy_hasnull_idx.y as yy]\n" +
			"     └─ IndexedTableAccess(xy_hasnull_idx)\n" +
			"         ├─ index: [xy_hasnull_idx.y]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         ├─ columns: [x y]\n" +
			"         └─ reverse: true\n" +
			"",
	},
	{
		Query: `select x as xx, y as yy from xy_hasnull_idx order by YY desc`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [xy_hasnull_idx.x:0!null as xx, xy_hasnull_idx.y:1 as yy]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy_hasnull_idx.x:0!null, xy_hasnull_idx.y:1, xy_hasnull_idx.x:0!null as xx, xy_hasnull_idx.y:1 as yy]\n" +
			"     └─ IndexedTableAccess(xy_hasnull_idx)\n" +
			"         ├─ index: [xy_hasnull_idx.y]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ reverse: true\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: xy_hasnull_idx\n" +
			"             └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [xy_hasnull_idx.x as xx, xy_hasnull_idx.y as yy]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy_hasnull_idx.x, xy_hasnull_idx.y, xy_hasnull_idx.x as xx, xy_hasnull_idx.y as yy]\n" +
			"     └─ IndexedTableAccess(xy_hasnull_idx)\n" +
			"         ├─ index: [xy_hasnull_idx.y]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         ├─ columns: [x y]\n" +
			"         └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [xy_hasnull_idx.x as xx, xy_hasnull_idx.y as yy]\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy_hasnull_idx.x, xy_hasnull_idx.y, xy_hasnull_idx.x as xx, xy_hasnull_idx.y as yy]\n" +
			"     └─ IndexedTableAccess(xy_hasnull_idx)\n" +
			"         ├─ index: [xy_hasnull_idx.y]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         ├─ columns: [x y]\n" +
			"         └─ reverse: true\n" +
			"",
	},
	{
		Query: `select * from xy_hasnull_idx order by Y desc`,
		ExpectedPlan: "IndexedTableAccess(xy_hasnull_idx)\n" +
			" ├─ index: [xy_hasnull_idx.y]\n" +
			" ├─ static: [{[NULL, ∞)}]\n" +
			" ├─ reverse: true\n" +
			" ├─ colSet: (1,2)\n" +
			" ├─ tableId: 1\n" +
			" └─ Table\n" +
			"     ├─ name: xy_hasnull_idx\n" +
			"     └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "IndexedTableAccess(xy_hasnull_idx)\n" +
			" ├─ index: [xy_hasnull_idx.y]\n" +
			" ├─ filters: [{[NULL, ∞)}]\n" +
			" ├─ columns: [x y]\n" +
			" └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "IndexedTableAccess(xy_hasnull_idx)\n" +
			" ├─ index: [xy_hasnull_idx.y]\n" +
			" ├─ filters: [{[NULL, ∞)}]\n" +
			" ├─ columns: [x y]\n" +
			" └─ reverse: true\n" +
			"",
	},
	{
		Query: `select max(x) from xy`,
		ExpectedPlan: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x:0!null as max(x)]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ reverse: true\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x]\n" +
			"",
		ExpectedEstimates: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x as max(x)]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         ├─ columns: [x]\n" +
			"         └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x as max(x)]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         ├─ columns: [x]\n" +
			"         └─ reverse: true\n" +
			"",
	},
	{
		Query: `select min(x) from xy`,
		ExpectedPlan: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x:0!null as min(x)]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x]\n" +
			"",
		ExpectedEstimates: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x as min(x)]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [x]\n" +
			"",
		ExpectedAnalysis: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x as min(x)]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         └─ columns: [x]\n" +
			"",
	},
	{
		Query: `select max(y) from xy`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [max(xy.y):0!null as max(y)]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: MAX(xy.y:0)\n" +
			"     ├─ group: \n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [max(xy.y) as max(y)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(MAX(xy.y))\n" +
			"     ├─ Grouping()\n" +
			"     └─ Table\n" +
			"         ├─ name: xy\n" +
			"         └─ columns: [y]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [max(xy.y) as max(y)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(MAX(xy.y))\n" +
			"     ├─ Grouping()\n" +
			"     └─ Table\n" +
			"         ├─ name: xy\n" +
			"         └─ columns: [y]\n" +
			"",
	},
	{
		Query: `select max(x)+100 from xy`,
		ExpectedPlan: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [(xy.x:0!null + 100 (tinyint)) as max(x)+100]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ reverse: true\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x]\n" +
			"",
		ExpectedEstimates: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [(xy.x + 100) as max(x)+100]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         ├─ columns: [x]\n" +
			"         └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [(xy.x + 100) as max(x)+100]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         ├─ columns: [x]\n" +
			"         └─ reverse: true\n" +
			"",
	},
	{
		Query: `select max(x) as xx from xy`,
		ExpectedPlan: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x:0!null as xx]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ reverse: true\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x]\n" +
			"",
		ExpectedEstimates: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x as xx]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         ├─ columns: [x]\n" +
			"         └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x as xx]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         ├─ columns: [x]\n" +
			"         └─ reverse: true\n" +
			"",
	},
	{
		Query: `select 1, 2.0, '3', max(x) from xy`,
		ExpectedPlan: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [1 (tinyint), 2 (decimal(2,1)), 3 (longtext) as 3, xy.x:0!null as max(x)]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ static: [{[NULL, ∞)}]\n" +
			"         ├─ reverse: true\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x]\n" +
			"",
		ExpectedEstimates: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [1, 2.0, '3' as 3, xy.x as max(x)]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         ├─ columns: [x]\n" +
			"         └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [1, 2.0, '3' as 3, xy.x as max(x)]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ filters: [{[NULL, ∞)}]\n" +
			"         ├─ columns: [x]\n" +
			"         └─ reverse: true\n" +
			"",
	},
	{
		Query: `select min(x) from xy where x > 0`,
		ExpectedPlan: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x:0!null as min(x)]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ static: [{(0, ∞)}]\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x]\n" +
			"",
		ExpectedEstimates: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x as min(x)]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ filters: [{(0, ∞)}]\n" +
			"         └─ columns: [x]\n" +
			"",
		ExpectedAnalysis: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x as min(x)]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ filters: [{(0, ∞)}]\n" +
			"         └─ columns: [x]\n" +
			"",
	},
	{
		Query: `select max(x) from xy where x < 3`,
		ExpectedPlan: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x:0!null as max(x)]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ static: [{(NULL, 3)}]\n" +
			"         ├─ reverse: true\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x]\n" +
			"",
		ExpectedEstimates: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x as max(x)]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ filters: [{(NULL, 3)}]\n" +
			"         ├─ columns: [x]\n" +
			"         └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "Limit(1)\n" +
			" └─ Project\n" +
			"     ├─ columns: [xy.x as max(x)]\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.x]\n" +
			"         ├─ filters: [{(NULL, 3)}]\n" +
			"         ├─ columns: [x]\n" +
			"         └─ reverse: true\n" +
			"",
	},
	{
		Query: `select min(x) from xy where y > 0`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [min(xy.x):0!null as min(x)]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: MIN(xy.x:0!null)\n" +
			"     ├─ group: \n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.y]\n" +
			"         ├─ static: [{(0, ∞)}]\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [min(xy.x) as min(x)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(MIN(xy.x))\n" +
			"     ├─ Grouping()\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.y]\n" +
			"         ├─ filters: [{(0, ∞)}]\n" +
			"         └─ columns: [x y]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [min(xy.x) as min(x)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(MIN(xy.x))\n" +
			"     ├─ Grouping()\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.y]\n" +
			"         ├─ filters: [{(0, ∞)}]\n" +
			"         └─ columns: [x y]\n" +
			"",
	},
	{
		Query: `select max(x) from xy where y < 3`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [max(xy.x):0!null as max(x)]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: MAX(xy.x:0!null)\n" +
			"     ├─ group: \n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.y]\n" +
			"         ├─ static: [{(NULL, 3)}]\n" +
			"         ├─ colSet: (1,2)\n" +
			"         ├─ tableId: 1\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [max(xy.x) as max(x)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(MAX(xy.x))\n" +
			"     ├─ Grouping()\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.y]\n" +
			"         ├─ filters: [{(NULL, 3)}]\n" +
			"         └─ columns: [x y]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [max(xy.x) as max(x)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(MAX(xy.x))\n" +
			"     ├─ Grouping()\n" +
			"     └─ IndexedTableAccess(xy)\n" +
			"         ├─ index: [xy.y]\n" +
			"         ├─ filters: [{(NULL, 3)}]\n" +
			"         └─ columns: [x y]\n" +
			"",
	},
	{
		Query: `select * from (select max(x) from xy) sq`,
		ExpectedPlan: "SubqueryAlias\n" +
			" ├─ name: sq\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" ├─ colSet: (4)\n" +
			" ├─ tableId: 2\n" +
			" └─ Limit(1)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [xy.x:0!null as max(x)]\n" +
			"         └─ IndexedTableAccess(xy)\n" +
			"             ├─ index: [xy.x]\n" +
			"             ├─ static: [{[NULL, ∞)}]\n" +
			"             ├─ reverse: true\n" +
			"             ├─ colSet: (1,2)\n" +
			"             ├─ tableId: 1\n" +
			"             └─ Table\n" +
			"                 ├─ name: xy\n" +
			"                 └─ columns: [x]\n" +
			"",
		ExpectedEstimates: "SubqueryAlias\n" +
			" ├─ name: sq\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Limit(1)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [xy.x as max(x)]\n" +
			"         └─ IndexedTableAccess(xy)\n" +
			"             ├─ index: [xy.x]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             ├─ columns: [x]\n" +
			"             └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "SubqueryAlias\n" +
			" ├─ name: sq\n" +
			" ├─ outerVisibility: false\n" +
			" ├─ isLateral: false\n" +
			" ├─ cacheable: true\n" +
			" └─ Limit(1)\n" +
			"     └─ Project\n" +
			"         ├─ columns: [xy.x as max(x)]\n" +
			"         └─ IndexedTableAccess(xy)\n" +
			"             ├─ index: [xy.x]\n" +
			"             ├─ filters: [{[NULL, ∞)}]\n" +
			"             ├─ columns: [x]\n" +
			"             └─ reverse: true\n" +
			"",
	},
	{
		Query: `with cte(i) as (select max(x) from xy) select i + 100 from cte`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [(cte.i:0!null + 100 (tinyint)) as i + 100]\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: cte\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     ├─ colSet: (4)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Limit(1)\n" +
			"         └─ Project\n" +
			"             ├─ columns: [xy.x:0!null as max(x)]\n" +
			"             └─ IndexedTableAccess(xy)\n" +
			"                 ├─ index: [xy.x]\n" +
			"                 ├─ static: [{[NULL, ∞)}]\n" +
			"                 ├─ reverse: true\n" +
			"                 ├─ colSet: (1,2)\n" +
			"                 ├─ tableId: 1\n" +
			"                 └─ Table\n" +
			"                     ├─ name: xy\n" +
			"                     └─ columns: [x]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [(cte.i + 100) as i + 100]\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: cte\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Limit(1)\n" +
			"         └─ Project\n" +
			"             ├─ columns: [xy.x as max(x)]\n" +
			"             └─ IndexedTableAccess(xy)\n" +
			"                 ├─ index: [xy.x]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 ├─ columns: [x]\n" +
			"                 └─ reverse: true\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [(cte.i + 100) as i + 100]\n" +
			" └─ SubqueryAlias\n" +
			"     ├─ name: cte\n" +
			"     ├─ outerVisibility: false\n" +
			"     ├─ isLateral: false\n" +
			"     ├─ cacheable: true\n" +
			"     └─ Limit(1)\n" +
			"         └─ Project\n" +
			"             ├─ columns: [xy.x as max(x)]\n" +
			"             └─ IndexedTableAccess(xy)\n" +
			"                 ├─ index: [xy.x]\n" +
			"                 ├─ filters: [{[NULL, ∞)}]\n" +
			"                 ├─ columns: [x]\n" +
			"                 └─ reverse: true\n" +
			"",
	},
	{
		Query: `with cte(i) as (select x from xy) select max(i) from cte`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [max(cte.i):0!null as max(i)]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: MAX(cte.i:0!null)\n" +
			"     ├─ group: \n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: cte\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         ├─ colSet: (3)\n" +
			"         ├─ tableId: 2\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             ├─ columns: [x]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             └─ tableId: 1\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [max(cte.i) as max(i)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(MAX(cte.i))\n" +
			"     ├─ Grouping()\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: cte\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [max(cte.i) as max(i)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(MAX(cte.i))\n" +
			"     ├─ Grouping()\n" +
			"     └─ SubqueryAlias\n" +
			"         ├─ name: cte\n" +
			"         ├─ outerVisibility: false\n" +
			"         ├─ isLateral: false\n" +
			"         ├─ cacheable: true\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x]\n" +
			"",
	},
	{
		Query: `select max(x) from xy group by y`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [max(xy.x):0!null as max(x)]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: MAX(xy.x:0!null)\n" +
			"     ├─ group: xy.y:1\n" +
			"     └─ ProcessTable\n" +
			"         └─ Table\n" +
			"             ├─ name: xy\n" +
			"             └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [max(xy.x) as max(x)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(MAX(xy.x))\n" +
			"     ├─ Grouping(xy.y)\n" +
			"     └─ Table\n" +
			"         ├─ name: xy\n" +
			"         └─ columns: [x y]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [max(xy.x) as max(x)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(MAX(xy.x))\n" +
			"     ├─ Grouping(xy.y)\n" +
			"     └─ Table\n" +
			"         ├─ name: xy\n" +
			"         └─ columns: [x y]\n" +
			"",
	},
	{
		Query: `select max(x) from xy join uv where x = u`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [max(xy.x):0!null as max(x)]\n" +
			" └─ GroupBy\n" +
			"     ├─ select: MAX(xy.x:1!null)\n" +
			"     ├─ group: \n" +
			"     └─ LookupJoin\n" +
			"         ├─ ProcessTable\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: uv\n" +
			"         │       └─ columns: [u]\n" +
			"         └─ IndexedTableAccess(xy)\n" +
			"             ├─ index: [xy.x]\n" +
			"             ├─ keys: [uv.u:0!null]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             ├─ tableId: 1\n" +
			"             └─ Table\n" +
			"                 ├─ name: xy\n" +
			"                 └─ columns: [x]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [max(xy.x) as max(x)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(MAX(xy.x))\n" +
			"     ├─ Grouping()\n" +
			"     └─ LookupJoin\n" +
			"         ├─ Table\n" +
			"         │   ├─ name: uv\n" +
			"         │   └─ columns: [u]\n" +
			"         └─ IndexedTableAccess(xy)\n" +
			"             ├─ index: [xy.x]\n" +
			"             ├─ columns: [x]\n" +
			"             └─ keys: uv.u\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [max(xy.x) as max(x)]\n" +
			" └─ GroupBy\n" +
			"     ├─ SelectedExprs(MAX(xy.x))\n" +
			"     ├─ Grouping()\n" +
			"     └─ LookupJoin\n" +
			"         ├─ Table\n" +
			"         │   ├─ name: uv\n" +
			"         │   └─ columns: [u]\n" +
			"         └─ IndexedTableAccess(xy)\n" +
			"             ├─ index: [xy.x]\n" +
			"             ├─ columns: [x]\n" +
			"             └─ keys: uv.u\n" +
			"",
	},
	{
		Query: `
select * from mytable,
	lateral (
	with recursive cte(a) as (
		select y from xy
		union
		select x from cte
		join
		xy
		on x = a
		)
	select * from cte
) sqa 
where i = a
order by i;`,
		ExpectedPlan: "Sort(mytable.i:0!null ASC nullsFirst)\n" +
			" └─ Filter\n" +
			"     ├─ Eq\n" +
			"     │   ├─ mytable.i:0!null\n" +
			"     │   └─ sqa.a:2\n" +
			"     └─ LateralCrossJoin\n" +
			"         ├─ ProcessTable\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: mytable\n" +
			"         │       └─ columns: [i s]\n" +
			"         └─ SubqueryAlias\n" +
			"             ├─ name: sqa\n" +
			"             ├─ outerVisibility: false\n" +
			"             ├─ isLateral: true\n" +
			"             ├─ cacheable: true\n" +
			"             ├─ colSet: (8)\n" +
			"             ├─ tableId: 7\n" +
			"             └─ SubqueryAlias\n" +
			"                 ├─ name: cte\n" +
			"                 ├─ outerVisibility: false\n" +
			"                 ├─ isLateral: true\n" +
			"                 ├─ cacheable: true\n" +
			"                 ├─ colSet: (5)\n" +
			"                 ├─ tableId: 3\n" +
			"                 └─ RecursiveCTE\n" +
			"                     └─ Union distinct\n" +
			"                         ├─ Table\n" +
			"                         │   ├─ name: xy\n" +
			"                         │   ├─ columns: [y]\n" +
			"                         │   ├─ colSet: (3,4)\n" +
			"                         │   └─ tableId: 2\n" +
			"                         └─ Project\n" +
			"                             ├─ columns: [xy.x:3!null]\n" +
			"                             └─ LookupJoin\n" +
			"                                 ├─ RecursiveTable(cte)\n" +
			"                                 └─ IndexedTableAccess(xy)\n" +
			"                                     ├─ index: [xy.x]\n" +
			"                                     ├─ keys: [cte.a:2]\n" +
			"                                     ├─ colSet: (6,7)\n" +
			"                                     ├─ tableId: 5\n" +
			"                                     └─ Table\n" +
			"                                         ├─ name: xy\n" +
			"                                         └─ columns: [x]\n" +
			"",
		ExpectedEstimates: "Sort(mytable.i ASC)\n" +
			" └─ Filter\n" +
			"     ├─ (mytable.i = sqa.a)\n" +
			"     └─ LateralCrossJoin\n" +
			"         ├─ Table\n" +
			"         │   └─ name: mytable\n" +
			"         └─ SubqueryAlias\n" +
			"             ├─ name: sqa\n" +
			"             ├─ outerVisibility: false\n" +
			"             ├─ isLateral: true\n" +
			"             ├─ cacheable: true\n" +
			"             └─ SubqueryAlias\n" +
			"                 ├─ name: cte\n" +
			"                 ├─ outerVisibility: false\n" +
			"                 ├─ isLateral: true\n" +
			"                 ├─ cacheable: true\n" +
			"                 └─ RecursiveCTE\n" +
			"                     └─ Union distinct\n" +
			"                         ├─ Table\n" +
			"                         │   ├─ name: xy\n" +
			"                         │   └─ columns: [y]\n" +
			"                         └─ Project\n" +
			"                             ├─ columns: [xy.x]\n" +
			"                             └─ LookupJoin\n" +
			"                                 ├─ RecursiveTable(cte)\n" +
			"                                 └─ IndexedTableAccess(xy)\n" +
			"                                     ├─ index: [xy.x]\n" +
			"                                     ├─ columns: [x]\n" +
			"                                     └─ keys: cte.a\n" +
			"",
		ExpectedAnalysis: "Sort(mytable.i ASC)\n" +
			" └─ Filter\n" +
			"     ├─ (mytable.i = sqa.a)\n" +
			"     └─ LateralCrossJoin\n" +
			"         ├─ Table\n" +
			"         │   └─ name: mytable\n" +
			"         └─ SubqueryAlias\n" +
			"             ├─ name: sqa\n" +
			"             ├─ outerVisibility: false\n" +
			"             ├─ isLateral: true\n" +
			"             ├─ cacheable: true\n" +
			"             └─ SubqueryAlias\n" +
			"                 ├─ name: cte\n" +
			"                 ├─ outerVisibility: false\n" +
			"                 ├─ isLateral: true\n" +
			"                 ├─ cacheable: true\n" +
			"                 └─ RecursiveCTE\n" +
			"                     └─ Union distinct\n" +
			"                         ├─ Table\n" +
			"                         │   ├─ name: xy\n" +
			"                         │   └─ columns: [y]\n" +
			"                         └─ Project\n" +
			"                             ├─ columns: [xy.x]\n" +
			"                             └─ LookupJoin\n" +
			"                                 ├─ RecursiveTable(cte)\n" +
			"                                 └─ IndexedTableAccess(xy)\n" +
			"                                     ├─ index: [xy.x]\n" +
			"                                     ├─ columns: [x]\n" +
			"                                     └─ keys: cte.a\n" +
			"",
	},
	{
		Query: `
select * from mytable,
	lateral (
	with recursive cte(a) as (
		select y from xy
		union
		select x from cte
		join
		(
			select * 
			from xy
			where x = 1
		 ) sqa1
		on x = a
		limit 3
		)
	select * from cte
) sqa2
where i = a
order by i;`,
		ExpectedPlan: "Sort(mytable.i:0!null ASC nullsFirst)\n" +
			" └─ Filter\n" +
			"     ├─ Eq\n" +
			"     │   ├─ mytable.i:0!null\n" +
			"     │   └─ sqa2.a:2\n" +
			"     └─ LateralCrossJoin\n" +
			"         ├─ ProcessTable\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: mytable\n" +
			"         │       └─ columns: [i s]\n" +
			"         └─ SubqueryAlias\n" +
			"             ├─ name: sqa2\n" +
			"             ├─ outerVisibility: false\n" +
			"             ├─ isLateral: true\n" +
			"             ├─ cacheable: true\n" +
			"             ├─ colSet: (10)\n" +
			"             ├─ tableId: 8\n" +
			"             └─ SubqueryAlias\n" +
			"                 ├─ name: cte\n" +
			"                 ├─ outerVisibility: false\n" +
			"                 ├─ isLateral: true\n" +
			"                 ├─ cacheable: true\n" +
			"                 ├─ colSet: (5)\n" +
			"                 ├─ tableId: 3\n" +
			"                 └─ RecursiveCTE\n" +
			"                     └─ Union distinct\n" +
			"                         ├─ limit: 3\n" +
			"                         ├─ Table\n" +
			"                         │   ├─ name: xy\n" +
			"                         │   ├─ columns: [y]\n" +
			"                         │   ├─ colSet: (3,4)\n" +
			"                         │   └─ tableId: 2\n" +
			"                         └─ Project\n" +
			"                             ├─ columns: [sqa1.x:3!null]\n" +
			"                             └─ HashJoin\n" +
			"                                 ├─ Eq\n" +
			"                                 │   ├─ sqa1.x:3!null\n" +
			"                                 │   └─ cte.a:2\n" +
			"                                 ├─ RecursiveTable(cte)\n" +
			"                                 └─ HashLookup\n" +
			"                                     ├─ left-key: TUPLE(cte.a:2)\n" +
			"                                     ├─ right-key: TUPLE(sqa1.x:2!null)\n" +
			"                                     └─ SubqueryAlias\n" +
			"                                         ├─ name: sqa1\n" +
			"                                         ├─ outerVisibility: false\n" +
			"                                         ├─ isLateral: true\n" +
			"                                         ├─ cacheable: true\n" +
			"                                         ├─ colSet: (8,9)\n" +
			"                                         ├─ tableId: 6\n" +
			"                                         └─ IndexedTableAccess(xy)\n" +
			"                                             ├─ index: [xy.x]\n" +
			"                                             ├─ static: [{[1, 1]}]\n" +
			"                                             ├─ colSet: (6,7)\n" +
			"                                             ├─ tableId: 5\n" +
			"                                             └─ Table\n" +
			"                                                 ├─ name: xy\n" +
			"                                                 └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Sort(mytable.i ASC)\n" +
			" └─ Filter\n" +
			"     ├─ (mytable.i = sqa2.a)\n" +
			"     └─ LateralCrossJoin\n" +
			"         ├─ Table\n" +
			"         │   └─ name: mytable\n" +
			"         └─ SubqueryAlias\n" +
			"             ├─ name: sqa2\n" +
			"             ├─ outerVisibility: false\n" +
			"             ├─ isLateral: true\n" +
			"             ├─ cacheable: true\n" +
			"             └─ SubqueryAlias\n" +
			"                 ├─ name: cte\n" +
			"                 ├─ outerVisibility: false\n" +
			"                 ├─ isLateral: true\n" +
			"                 ├─ cacheable: true\n" +
			"                 └─ RecursiveCTE\n" +
			"                     └─ Union distinct\n" +
			"                         ├─ limit: 3\n" +
			"                         ├─ Table\n" +
			"                         │   ├─ name: xy\n" +
			"                         │   └─ columns: [y]\n" +
			"                         └─ Project\n" +
			"                             ├─ columns: [sqa1.x]\n" +
			"                             └─ HashJoin\n" +
			"                                 ├─ (sqa1.x = cte.a)\n" +
			"                                 ├─ RecursiveTable(cte)\n" +
			"                                 └─ HashLookup\n" +
			"                                     ├─ left-key: (cte.a)\n" +
			"                                     ├─ right-key: (sqa1.x)\n" +
			"                                     └─ SubqueryAlias\n" +
			"                                         ├─ name: sqa1\n" +
			"                                         ├─ outerVisibility: false\n" +
			"                                         ├─ isLateral: true\n" +
			"                                         ├─ cacheable: true\n" +
			"                                         └─ IndexedTableAccess(xy)\n" +
			"                                             ├─ index: [xy.x]\n" +
			"                                             ├─ filters: [{[1, 1]}]\n" +
			"                                             └─ columns: [x y]\n" +
			"",
		ExpectedAnalysis: "Sort(mytable.i ASC)\n" +
			" └─ Filter\n" +
			"     ├─ (mytable.i = sqa2.a)\n" +
			"     └─ LateralCrossJoin\n" +
			"         ├─ Table\n" +
			"         │   └─ name: mytable\n" +
			"         └─ SubqueryAlias\n" +
			"             ├─ name: sqa2\n" +
			"             ├─ outerVisibility: false\n" +
			"             ├─ isLateral: true\n" +
			"             ├─ cacheable: true\n" +
			"             └─ SubqueryAlias\n" +
			"                 ├─ name: cte\n" +
			"                 ├─ outerVisibility: false\n" +
			"                 ├─ isLateral: true\n" +
			"                 ├─ cacheable: true\n" +
			"                 └─ RecursiveCTE\n" +
			"                     └─ Union distinct\n" +
			"                         ├─ limit: 3\n" +
			"                         ├─ Table\n" +
			"                         │   ├─ name: xy\n" +
			"                         │   └─ columns: [y]\n" +
			"                         └─ Project\n" +
			"                             ├─ columns: [sqa1.x]\n" +
			"                             └─ HashJoin\n" +
			"                                 ├─ (sqa1.x = cte.a)\n" +
			"                                 ├─ RecursiveTable(cte)\n" +
			"                                 └─ HashLookup\n" +
			"                                     ├─ left-key: (cte.a)\n" +
			"                                     ├─ right-key: (sqa1.x)\n" +
			"                                     └─ SubqueryAlias\n" +
			"                                         ├─ name: sqa1\n" +
			"                                         ├─ outerVisibility: false\n" +
			"                                         ├─ isLateral: true\n" +
			"                                         ├─ cacheable: true\n" +
			"                                         └─ IndexedTableAccess(xy)\n" +
			"                                             ├─ index: [xy.x]\n" +
			"                                             ├─ filters: [{[1, 1]}]\n" +
			"                                             └─ columns: [x y]\n" +
			"",
	},
	{
		Query: `
select *
from xy inner join uv
on xy.x = uv.u and uv.v = (select max(v) from uv where xy.x = uv.u)
order by xy.x, xy.y, uv.u, uv.v;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [xy.x:2!null, xy.y:3, uv.u:0!null, uv.v:1]\n" +
			" └─ Sort(xy.x:2!null ASC nullsFirst, xy.y:3 ASC nullsFirst, uv.u:0!null ASC nullsFirst, uv.v:1 ASC nullsFirst)\n" +
			"     └─ LookupJoin\n" +
			"         ├─ Eq\n" +
			"         │   ├─ uv.v:1\n" +
			"         │   └─ Subquery\n" +
			"         │       ├─ cacheable: false\n" +
			"         │       ├─ alias-string: select max(v) from uv where xy.x = uv.u\n" +
			"         │       └─ Project\n" +
			"         │           ├─ columns: [max(uv.v):4!null as max(v)]\n" +
			"         │           └─ GroupBy\n" +
			"         │               ├─ select: MAX(uv.v:5)\n" +
			"         │               ├─ group: \n" +
			"         │               └─ Filter\n" +
			"         │                   ├─ Eq\n" +
			"         │                   │   ├─ xy.x:2!null\n" +
			"         │                   │   └─ uv.u:4!null\n" +
			"         │                   └─ IndexedTableAccess(uv)\n" +
			"         │                       ├─ index: [uv.u]\n" +
			"         │                       ├─ keys: [xy.x:2!null]\n" +
			"         │                       ├─ colSet: (5,6)\n" +
			"         │                       ├─ tableId: 3\n" +
			"         │                       └─ Table\n" +
			"         │                           ├─ name: uv\n" +
			"         │                           └─ columns: [u v]\n" +
			"         ├─ ProcessTable\n" +
			"         │   └─ Table\n" +
			"         │       ├─ name: uv\n" +
			"         │       └─ columns: [u v]\n" +
			"         └─ IndexedTableAccess(xy)\n" +
			"             ├─ index: [xy.x]\n" +
			"             ├─ keys: [uv.u:0!null]\n" +
			"             ├─ colSet: (1,2)\n" +
			"             ├─ tableId: 1\n" +
			"             └─ Table\n" +
			"                 ├─ name: xy\n" +
			"                 └─ columns: [x y]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [xy.x, xy.y, uv.u, uv.v]\n" +
			" └─ Sort(xy.x ASC, xy.y ASC, uv.u ASC, uv.v ASC)\n" +
			"     └─ LookupJoin\n" +
			"         ├─ (uv.v = Subquery\n" +
			"         │   ├─ cacheable: false\n" +
			"         │   └─ Project\n" +
			"         │       ├─ columns: [max(uv.v) as max(v)]\n" +
			"         │       └─ GroupBy\n" +
			"         │           ├─ SelectedExprs(MAX(uv.v))\n" +
			"         │           ├─ Grouping()\n" +
			"         │           └─ Filter\n" +
			"         │               ├─ (xy.x = uv.u)\n" +
			"         │               └─ IndexedTableAccess(uv)\n" +
			"         │                   ├─ index: [uv.u]\n" +
			"         │                   ├─ columns: [u v]\n" +
			"         │                   └─ keys: xy.x\n" +
			"         │  )\n" +
			"         ├─ Table\n" +
			"         │   └─ name: uv\n" +
			"         └─ IndexedTableAccess(xy)\n" +
			"             ├─ index: [xy.x]\n" +
			"             └─ keys: uv.u\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [xy.x, xy.y, uv.u, uv.v]\n" +
			" └─ Sort(xy.x ASC, xy.y ASC, uv.u ASC, uv.v ASC)\n" +
			"     └─ LookupJoin\n" +
			"         ├─ (uv.v = Subquery\n" +
			"         │   ├─ cacheable: false\n" +
			"         │   └─ Project\n" +
			"         │       ├─ columns: [max(uv.v) as max(v)]\n" +
			"         │       └─ GroupBy\n" +
			"         │           ├─ SelectedExprs(MAX(uv.v))\n" +
			"         │           ├─ Grouping()\n" +
			"         │           └─ Filter\n" +
			"         │               ├─ (xy.x = uv.u)\n" +
			"         │               └─ IndexedTableAccess(uv)\n" +
			"         │                   ├─ index: [uv.u]\n" +
			"         │                   ├─ columns: [u v]\n" +
			"         │                   └─ keys: xy.x\n" +
			"         │  )\n" +
			"         ├─ Table\n" +
			"         │   └─ name: uv\n" +
			"         └─ IndexedTableAccess(xy)\n" +
			"             ├─ index: [xy.x]\n" +
			"             └─ keys: uv.u\n" +
			"",
	},
	{
		Query: `
select a, b
from ab as ab2
where exists (
    select *
    from ab
	where ab.b = (
        select max(v)
        from uv
        where uv.v = ab2.a and uv.v = ab.a
    )
);`,
		ExpectedPlan: "SemiJoin\n" +
			" ├─ Eq\n" +
			" │   ├─ ab.b:3\n" +
			" │   └─ Subquery\n" +
			" │       ├─ cacheable: false\n" +
			" │       ├─ alias-string: select max(v) from uv where uv.v = ab2.a and uv.v = ab.a\n" +
			" │       └─ Project\n" +
			" │           ├─ columns: [max(uv.v):4!null as max(v)]\n" +
			" │           └─ GroupBy\n" +
			" │               ├─ select: MAX(uv.v:4)\n" +
			" │               ├─ group: \n" +
			" │               └─ Filter\n" +
			" │                   ├─ AND\n" +
			" │                   │   ├─ Eq\n" +
			" │                   │   │   ├─ uv.v:4\n" +
			" │                   │   │   └─ ab2.a:0!null\n" +
			" │                   │   └─ Eq\n" +
			" │                   │       ├─ uv.v:4\n" +
			" │                   │       └─ ab.a:2!null\n" +
			" │                   └─ Table\n" +
			" │                       ├─ name: uv\n" +
			" │                       ├─ columns: [v]\n" +
			" │                       ├─ colSet: (5,6)\n" +
			" │                       └─ tableId: 3\n" +
			" ├─ TableAlias(ab2)\n" +
			" │   └─ ProcessTable\n" +
			" │       └─ Table\n" +
			" │           ├─ name: ab\n" +
			" │           └─ columns: [a b]\n" +
			" └─ Table\n" +
			"     ├─ name: ab\n" +
			"     ├─ columns: [a b]\n" +
			"     ├─ colSet: (3,4)\n" +
			"     └─ tableId: 2\n" +
			"",
		ExpectedEstimates: "SemiJoin (estimated cost=506000.000 rows=1250)\n" +
			" ├─ (ab.b = Subquery\n" +
			" │   ├─ cacheable: false\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [max(uv.v) as max(v)]\n" +
			" │       └─ GroupBy\n" +
			" │           ├─ SelectedExprs(MAX(uv.v))\n" +
			" │           ├─ Grouping()\n" +
			" │           └─ Filter\n" +
			" │               ├─ ((uv.v = ab2.a) AND (uv.v = ab.a))\n" +
			" │               └─ Table\n" +
			" │                   ├─ name: uv\n" +
			" │                   └─ columns: [v]\n" +
			" │  )\n" +
			" ├─ TableAlias(ab2)\n" +
			" │   └─ Table\n" +
			" │       └─ name: ab\n" +
			" └─ Table\n" +
			"     └─ name: ab\n" +
			"",
		ExpectedAnalysis: "SemiJoin (estimated cost=506000.000 rows=1250) (actual rows=1 loops=1)\n" +
			" ├─ (ab.b = Subquery\n" +
			" │   ├─ cacheable: false\n" +
			" │   └─ Project\n" +
			" │       ├─ columns: [max(uv.v) as max(v)]\n" +
			" │       └─ GroupBy\n" +
			" │           ├─ SelectedExprs(MAX(uv.v))\n" +
			" │           ├─ Grouping()\n" +
			" │           └─ Filter\n" +
			" │               ├─ ((uv.v = ab2.a) AND (uv.v = ab.a))\n" +
			" │               └─ Table\n" +
			" │                   ├─ name: uv\n" +
			" │                   └─ columns: [v]\n" +
			" │  )\n" +
			" ├─ TableAlias(ab2)\n" +
			" │   └─ Table\n" +
			" │       └─ name: ab\n" +
			" └─ Table\n" +
			"     └─ name: ab\n" +
			"",
	},
	{
		Query: `
select x, y
from xy as xy2
where exists (
    select *
    from xy
        where xy.y = (
        select max(v)
        from uv
        where uv.v = xy2.x and uv.v = xy.x
    )
)
order by x, y;
`,
		ExpectedPlan: "Sort(xy2.x:0!null ASC nullsFirst, xy2.y:1 ASC nullsFirst)\n" +
			" └─ SemiJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ xy.y:3\n" +
			"     │   └─ Subquery\n" +
			"     │       ├─ cacheable: false\n" +
			"     │       ├─ alias-string: select max(v) from uv where uv.v = xy2.x and uv.v = xy.x\n" +
			"     │       └─ Project\n" +
			"     │           ├─ columns: [max(uv.v):4!null as max(v)]\n" +
			"     │           └─ GroupBy\n" +
			"     │               ├─ select: MAX(uv.v:4)\n" +
			"     │               ├─ group: \n" +
			"     │               └─ Filter\n" +
			"     │                   ├─ AND\n" +
			"     │                   │   ├─ Eq\n" +
			"     │                   │   │   ├─ uv.v:4\n" +
			"     │                   │   │   └─ xy2.x:0!null\n" +
			"     │                   │   └─ Eq\n" +
			"     │                   │       ├─ uv.v:4\n" +
			"     │                   │       └─ xy.x:2!null\n" +
			"     │                   └─ Table\n" +
			"     │                       ├─ name: uv\n" +
			"     │                       ├─ columns: [v]\n" +
			"     │                       ├─ colSet: (5,6)\n" +
			"     │                       └─ tableId: 3\n" +
			"     ├─ TableAlias(xy2)\n" +
			"     │   └─ ProcessTable\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: xy\n" +
			"     │           └─ columns: [x y]\n" +
			"     └─ Table\n" +
			"         ├─ name: xy\n" +
			"         ├─ columns: [x y]\n" +
			"         ├─ colSet: (3,4)\n" +
			"         └─ tableId: 2\n" +
			"",
		ExpectedEstimates: "Sort(xy2.x ASC, xy2.y ASC)\n" +
			" └─ SemiJoin\n" +
			"     ├─ (xy.y = Subquery\n" +
			"     │   ├─ cacheable: false\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [max(uv.v) as max(v)]\n" +
			"     │       └─ GroupBy\n" +
			"     │           ├─ SelectedExprs(MAX(uv.v))\n" +
			"     │           ├─ Grouping()\n" +
			"     │           └─ Filter\n" +
			"     │               ├─ ((uv.v = xy2.x) AND (uv.v = xy.x))\n" +
			"     │               └─ Table\n" +
			"     │                   ├─ name: uv\n" +
			"     │                   └─ columns: [v]\n" +
			"     │  )\n" +
			"     ├─ TableAlias(xy2)\n" +
			"     │   └─ Table\n" +
			"     │       └─ name: xy\n" +
			"     └─ Table\n" +
			"         └─ name: xy\n" +
			"",
		ExpectedAnalysis: "Sort(xy2.x ASC, xy2.y ASC)\n" +
			" └─ SemiJoin\n" +
			"     ├─ (xy.y = Subquery\n" +
			"     │   ├─ cacheable: false\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [max(uv.v) as max(v)]\n" +
			"     │       └─ GroupBy\n" +
			"     │           ├─ SelectedExprs(MAX(uv.v))\n" +
			"     │           ├─ Grouping()\n" +
			"     │           └─ Filter\n" +
			"     │               ├─ ((uv.v = xy2.x) AND (uv.v = xy.x))\n" +
			"     │               └─ Table\n" +
			"     │                   ├─ name: uv\n" +
			"     │                   └─ columns: [v]\n" +
			"     │  )\n" +
			"     ├─ TableAlias(xy2)\n" +
			"     │   └─ Table\n" +
			"     │       └─ name: xy\n" +
			"     └─ Table\n" +
			"         └─ name: xy\n" +
			"",
	},
	{
		Query: `select * from (select 'k' as k) sq join bigtable on t = k join xy where x between n and n;`,
		ExpectedPlan: "Project\n" +
			" ├─ columns: [sq.k:0!null, bigtable.t:3!null, bigtable.n:4, xy.x:1!null, xy.y:2]\n" +
			" └─ HashJoin\n" +
			"     ├─ Eq\n" +
			"     │   ├─ bigtable.t:3!null\n" +
			"     │   └─ sq.k:0!null\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: sq\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   ├─ colSet: (2)\n" +
			"     │   ├─ tableId: 1\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: [k (longtext) as k]\n" +
			"     │       └─ Table\n" +
			"     │           ├─ name: \n" +
			"     │           ├─ columns: []\n" +
			"     │           ├─ colSet: ()\n" +
			"     │           └─ tableId: 0\n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: TUPLE(sq.k:0!null)\n" +
			"         ├─ right-key: TUPLE(bigtable.t:2!null)\n" +
			"         └─ RangeHeapJoin\n" +
			"             ├─ AND\n" +
			"             │   ├─ GreaterThanOrEqual\n" +
			"             │   │   ├─ xy.x:1!null\n" +
			"             │   │   └─ bigtable.n:4\n" +
			"             │   └─ LessThanOrEqual\n" +
			"             │       ├─ xy.x:1!null\n" +
			"             │       └─ bigtable.n:4\n" +
			"             ├─ IndexedTableAccess(xy)\n" +
			"             │   ├─ index: [xy.x]\n" +
			"             │   ├─ static: [{[NULL, ∞)}]\n" +
			"             │   ├─ colSet: (5,6)\n" +
			"             │   ├─ tableId: 3\n" +
			"             │   └─ Table\n" +
			"             │       ├─ name: xy\n" +
			"             │       └─ columns: [x y]\n" +
			"             └─ Sort(bigtable.n:1 ASC nullsFirst)\n" +
			"                 └─ ProcessTable\n" +
			"                     └─ Table\n" +
			"                         ├─ name: bigtable\n" +
			"                         └─ columns: [t n]\n" +
			"",
		ExpectedEstimates: "Project\n" +
			" ├─ columns: [sq.k, bigtable.t, bigtable.n, xy.x, xy.y]\n" +
			" └─ HashJoin (estimated cost=153.250 rows=125)\n" +
			"     ├─ (bigtable.t = sq.k)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: sq\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: ['k' as k]\n" +
			"     │       └─ Table\n" +
			"     │           └─ name: \n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (sq.k)\n" +
			"         ├─ right-key: (bigtable.t)\n" +
			"         └─ RangeHeapJoin\n" +
			"             ├─ ((xy.x >= bigtable.n) AND (xy.x <= bigtable.n))\n" +
			"             ├─ IndexedTableAccess(xy)\n" +
			"             │   ├─ index: [xy.x]\n" +
			"             │   ├─ filters: [{[NULL, ∞)}]\n" +
			"             │   └─ columns: [x y]\n" +
			"             └─ Sort(bigtable.n ASC)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: bigtable\n" +
			"                     └─ columns: [t n]\n" +
			"",
		ExpectedAnalysis: "Project\n" +
			" ├─ columns: [sq.k, bigtable.t, bigtable.n, xy.x, xy.y]\n" +
			" └─ HashJoin (estimated cost=153.250 rows=125) (actual rows=1 loops=1)\n" +
			"     ├─ (bigtable.t = sq.k)\n" +
			"     ├─ SubqueryAlias\n" +
			"     │   ├─ name: sq\n" +
			"     │   ├─ outerVisibility: false\n" +
			"     │   ├─ isLateral: false\n" +
			"     │   ├─ cacheable: true\n" +
			"     │   └─ Project\n" +
			"     │       ├─ columns: ['k' as k]\n" +
			"     │       └─ Table\n" +
			"     │           └─ name: \n" +
			"     └─ HashLookup\n" +
			"         ├─ left-key: (sq.k)\n" +
			"         ├─ right-key: (bigtable.t)\n" +
			"         └─ RangeHeapJoin\n" +
			"             ├─ ((xy.x >= bigtable.n) AND (xy.x <= bigtable.n))\n" +
			"             ├─ IndexedTableAccess(xy)\n" +
			"             │   ├─ index: [xy.x]\n" +
			"             │   ├─ filters: [{[NULL, ∞)}]\n" +
			"             │   └─ columns: [x y]\n" +
			"             └─ Sort(bigtable.n ASC)\n" +
			"                 └─ Table\n" +
			"                     ├─ name: bigtable\n" +
			"                     └─ columns: [t n]\n" +
			"",
	},
	{
		Query: `select * from one_pk_two_idx where v1 < 4 and v2 < 2 or v2 > 3 order by v1`,
		ExpectedPlan: "Sort(one_pk_two_idx.v1:1 ASC nullsFirst)\n" +
			" └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     ├─ static: [{[NULL, ∞), (3, ∞)}, {(NULL, 4), (NULL, 2)}]\n" +
			"     ├─ colSet: (1-3)\n" +
			"     ├─ tableId: 1\n" +
			"     └─ Table\n" +
			"         ├─ name: one_pk_two_idx\n" +
			"         └─ columns: [pk v1 v2]\n" +
			"",
		ExpectedEstimates: "Sort(one_pk_two_idx.v1 ASC)\n" +
			" └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     ├─ filters: [{[NULL, ∞), (3, ∞)}, {(NULL, 4), (NULL, 2)}]\n" +
			"     └─ columns: [pk v1 v2]\n" +
			"",
		ExpectedAnalysis: "Sort(one_pk_two_idx.v1 ASC)\n" +
			" └─ IndexedTableAccess(one_pk_two_idx)\n" +
			"     ├─ index: [one_pk_two_idx.v1,one_pk_two_idx.v2]\n" +
			"     ├─ filters: [{[NULL, ∞), (3, ∞)}, {(NULL, 4), (NULL, 2)}]\n" +
			"     └─ columns: [pk v1 v2]\n" +
			"",
	},
	{
		Query: `SELECT /*+ LOOKUP_JOIN(xy,mytable) JOIN_ORDER(xy,mytable) */ * FROM xy INNER JOIN mytable ON ((xy.x)=(mytable.s));`,
		ExpectedPlan: "LookupJoin\n" +
			" ├─ ProcessTable\n" +
			" │   └─ Table\n" +
			" │       ├─ name: xy\n" +
			" │       └─ columns: [x y]\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.s]\n" +
			"     ├─ keys: [xy.x:0!null]\n" +
			"     ├─ colSet: (3,4)\n" +
			"     ├─ tableId: 2\n" +
			"     └─ Table\n" +
			"         ├─ name: mytable\n" +
			"         └─ columns: [i s]\n" +
			"",
		ExpectedEstimates: "LookupJoin (estimated cost=1006.900 rows=3)\n" +
			" ├─ Table\n" +
			" │   ├─ name: xy\n" +
			" │   └─ columns: [x y]\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.s]\n" +
			"     ├─ columns: [i s]\n" +
			"     └─ keys: xy.x\n" +
			"",
		ExpectedAnalysis: "LookupJoin (estimated cost=1006.900 rows=3) (actual rows=0 loops=1)\n" +
			" ├─ Table\n" +
			" │   ├─ name: xy\n" +
			" │   └─ columns: [x y]\n" +
			" └─ IndexedTableAccess(mytable)\n" +
			"     ├─ index: [mytable.s]\n" +
			"     ├─ columns: [i s]\n" +
			"     └─ keys: xy.x\n" +
			"",
	},
}
